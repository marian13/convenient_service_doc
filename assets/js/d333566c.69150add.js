"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[1226],{241:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=t(4848),r=t(8453);const s={slug:"/faq/why_error_not_exception",sidebar_position:1,title:"Why errors? Why not exceptions?"},o=void 0,a={id:"faq/why_error_not_exception",title:"Why errors? Why not exceptions?",description:"Unhandled exceptions are crashing important flows for minor reasons too often",source:"@site/docs/faq/why_error_not_exception.md",sourceDirName:"faq",slug:"/faq/why_error_not_exception",permalink:"/faq/why_error_not_exception",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/faq/why_error_not_exception.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/faq/why_error_not_exception",sidebar_position:1,title:"Why errors? Why not exceptions?"},sidebar:"docs",previous:{title:"Why failures and errors? Why not just failure or error?",permalink:"/faq/why_both_failure_and_error"},next:{title:"Is it possible to modify the step collection from a callback?",permalink:"/faq/is_it_possible_to_modify_step_collection_from_callback"}},c={},l=[{value:"Unhandled exceptions are crashing important flows for minor reasons too often",id:"unhandled-exceptions-are-crashing-important-flows-for-minor-reasons-too-often",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"unhandled-exceptions-are-crashing-important-flows-for-minor-reasons-too-often",children:"Unhandled exceptions are crashing important flows for minor reasons too often"}),"\n",(0,i.jsx)(n.p,{children:"Imagine we have a travel app."}),"\n",(0,i.jsx)(n.p,{children:"A typical apartment booking flow may look like the following."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"User opens the application."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"User selects location, dates, guest number, etc."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"User books an apartment."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Host accepts the booking."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"User pays for the apartment."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"And so on..."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"After a while, a new requirement is received to display a small discount proposals widget for the apartments that are located in the not popular regions."}),"\n",(0,i.jsxs)(n.p,{children:["Business truly and argumentably believes that such a feature will increase the ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Conversion_rate_optimization",children:"conversion rate"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The region popularity detection algorithm is developed by a different team, which swears that it works as expected, but the unit tests are not finished due to other commitments."}),"\n",(0,i.jsx)(n.p,{children:"With constant pressure from the higher management, an inexperienced developer agrees to add the widget with the subsequent release."}),"\n",(0,i.jsx)(n.p,{children:"Once the new app version is deployed, apartment selection starts to crash, preventing the users from completing bookings."}),"\n",(0,i.jsx)(n.p,{children:"The rest is history."}),"\n",(0,i.jsx)(n.p,{children:"Massive panic."}),"\n",(0,i.jsx)(n.p,{children:"Endless late-night meetings and discussions."}),"\n",(0,i.jsx)(n.p,{children:"DevOps engineers who know how to roll back the change are on vacation."}),"\n",(0,i.jsx)(n.p,{children:"End-users are posting negative feedback on their social media, etc."}),"\n",(0,i.jsxs)(n.p,{children:["Instead of increasing the ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Conversion_rate_optimization",children:"conversion rate"}),", it is now significantly degraded."]}),"\n",(0,i.jsxs)(n.p,{children:["The moral of the story is that the new feature was added in a non ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Fault_tolerance",children:"fault-tolerant"})," way."]}),"\n",(0,i.jsx)(n.p,{children:"Sure, the discount widget is a useful functionality when properly implemented."}),"\n",(0,i.jsx)(n.p,{children:"But, it is just a tiny component in the context of the full apartment booking flow."}),"\n",(0,i.jsx)(n.p,{children:"Thus not having a feature-specific exception handler for it is an unjustified risk."}),"\n",(0,i.jsxs)(n.p,{children:["That is why ",(0,i.jsx)(n.a,{href:"/",children:"Convenient Service"})," promotes the idea of using ",(0,i.jsx)(n.a,{href:"/basics/errors",children:"error results"})," instead of regular exceptions."]}),"\n",(0,i.jsxs)(n.p,{children:["They help to develop ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Fault_tolerance",children:"fault-tolerant"})," systems right from the beginning."]}),"\n",(0,i.jsx)(n.p,{children:"Let's tackle a more ground-facing example, that every Ruby developer experiences from time to time."}),"\n",(0,i.jsx)(n.p,{children:"Data and time formatting \ud83e\udd72."}),"\n",(0,i.jsx)(n.p,{children:"A minimal code snippet to illustrate the issue is the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'require "date"\n\ndef format_date(string)\n  Date.strptime(string, "%Y-%m-%d")\nend\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Once the user's browser localization format changes, the ",(0,i.jsx)(n.code,{children:"format_date"})," method breaks the whole page by raising ",(0,i.jsx)(n.code,{children:"invalid date (Date::Error)"})," exceptions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'format_date("2024/07/16")\n# =>\n#   `strptime\': invalid date (Date::Error)\n#\n#   Date.strptime(string, "%Y-%m-%d")\n#                 ^^^^^^^^^^^^^^^^^^\n'})}),"\n",(0,i.jsx)(n.p,{children:"At the same time, a corresponding service encloses unhandled exceptions by converting them into error results."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'require "convenient_service"\n\nConvenientService::Dependencies.require_rescues_result_unhandled_exceptions\n\nclass FormatDate\n  include ConvenientService::Standard::Config\n\n  attr_reader :string\n\n middlewares :result do\n use ConvenientService::Plugins::Service::RescuesResultUnhandledExceptions::Middleware\n  end\n\n  def initialize(string:)\n    @string = string\n  end\n\n  def result\n formatted_date = Date.strptime(string, "%Y-%m-%d")\n\n    success(formatted_date: formatted_date)\n  end\nend\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Technically speaking, it creates so-called ",(0,i.jsx)(n.a,{href:"https://devblogs.microsoft.com/cppblog/exception-boundaries",children:"exception boundaries"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'result = FormatDate.result(string: "2024/07/16")\n# =>\n#   <FormatDate::Result status: :error data_keys: [:exception] message: "Date::Error:\n#   ...\n#\n'})}),"\n",(0,i.jsx)(n.p,{children:"As a consequence, only a single service has an unpredicted mistake, but since its negative effect is isolated, the rest of the system stays functional."}),"\n",(0,i.jsxs)(n.p,{children:["Due to the fact that unhandled exceptions can not leak outside error results boundaries, the code becomes ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Fault_tolerance",children:"fault-tolerant"})," by default."]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Currently, the ",(0,i.jsx)(n.code,{children:"RescuesResultUnhandledExceptions"})," plugin is not included in the ",(0,i.jsx)(n.code,{children:"Standard"})," configuration."]}),(0,i.jsx)(n.p,{children:"End-users have the ability to decide by themselves whether to add it or not."}),(0,i.jsx)(n.p,{children:"For example, the best practice says to use it for development and production environments."}),(0,i.jsx)(n.p,{children:"This way you can learn how the plugin works during development and have a calm and healthy sleep when the code is released."}),(0,i.jsx)(n.p,{children:"But for the testing environment, it is still beneficial to not auto rescue exceptions to find them faster."})]}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsx)(n.p,{children:"This article demonstrates the concept that there is a possibility of an automated fallback for exceptions."}),(0,i.jsx)(n.p,{children:"However, developers still need to reasonably predict the edge cases and describe them explicitly in order to have more explanatory error messages."}),(0,i.jsxs)(n.p,{children:["So, the properly finished ",(0,i.jsx)(n.code,{children:"FormatDate"})," service is written below."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class FormatDate\n  include ConvenientService::Standard::Config\n\n  attr_reader :string\n\n middlewares :result do\n use ConvenientService::Plugins::Service::RescuesResultUnhandledExceptions::Middleware\n  end\n\n  def initialize(string:)\n    @string = string\n  end\n\n  def result\n    success(date_time: ::DateTime.strptime(string, format))\n  rescue ::Date::Error\n    error("String `#{string}` does NOT follow date time `#{format}`")\n  end\nend\n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);