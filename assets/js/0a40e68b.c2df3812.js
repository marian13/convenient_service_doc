"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[276],{5906:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>_,contentTitle:()=>f,default:()=>x,frontMatter:()=>y,metadata:()=>k,toc:()=>T});var a=t(7462),i=t(7294),r=t(3905),s=t(6010),l=t(2389),o=t(7392),d=t(7094),u=t(2466);const c="tabList__CuJ",p="tabItem_LNqP";function m(e){var n;const{lazy:t,block:r,defaultValue:l,values:m,groupId:g,className:v}=e,h=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??h.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),y=(0,o.l)(b,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===l?l:l??(null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)??h[0].props.value;if(null!==f&&!b.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:_}=(0,d.U)(),[T,C]=(0,i.useState)(f),x=[],{blockElementScrollPositionUntilNextRender:N}=(0,u.o5)();if(null!=g){const e=k[g];null!=e&&e!==T&&b.some((n=>n.value===e))&&C(e)}const S=e=>{const n=e.currentTarget,t=x.indexOf(n),a=b[t].value;a!==T&&(N(n),C(a),null!=g&&_(g,String(a)))},A=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=x.indexOf(e.currentTarget)+1;t=x[n]??x[0];break}case"ArrowLeft":{const n=x.indexOf(e.currentTarget)-1;t=x[n]??x[x.length-1];break}}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,s.Z)("tabs-container",c)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},v)},b.map((e=>{let{value:n,label:t,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:e=>x.push(e),onKeyDown:A,onFocus:S,onClick:S},r,{className:(0,s.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":T===n})}),t??n)}))),t?(0,i.cloneElement)(h.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==T})))))}function g(e){const n=(0,l.Z)();return i.createElement(m,(0,a.Z)({key:String(n)},e))}const v="tabItem_Ymn6";function h(e){let{children:n,hidden:t,className:a}=e;return i.createElement("div",{role:"tabpanel",className:(0,s.Z)(v,a),hidden:t},n)}var b=t(3803);const y={slug:"/",sidebar_position:1,title:"Home"},f=void 0,k={unversionedId:"home",id:"home",title:"Home",description:"#StandWithUkraine",source:"@site/docs/home.mdx",sourceDirName:".",slug:"/",permalink:"/convenient_service_docs/",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/home.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/",sidebar_position:1,title:"Home"},sidebar:"tutorialSidebar",next:{title:"Requirements",permalink:"/convenient_service_docs/requirements"}},_={},T=[{value:"WARNING \u2757\u2757\u2757",id:"warning-",level:2},{value:"Usage",id:"usage",level:2}],C={toc:T};function x(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},C,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{align:"center"},"#StandWithUkraine"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://vshymanskyy.github.io/StandWithUkraine"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner-direct.svg",alt:"SWUbanner"}))),(0,r.kt)("h1",{align:"center"},"Convenient Service"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://rubygems.org/gems/convenient_service"},(0,r.kt)("img",{parentName:"a",src:"https://badge.fury.io/rb/convenient_service.svg",alt:"Gem Version"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/marian13/convenient_service/actions/workflows/ci.yml"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/marian13/convenient_service/actions/workflows/ci.yml/badge.svg?branch=main",alt:"GitHub Actions CI"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/testdouble/standard"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/code_style-standard-brightgreen.svg",alt:"Ruby Style Guide"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://coveralls.io/github/marian13/convenient_service?branch=main"},(0,r.kt)("img",{parentName:"a",src:"https://coveralls.io/repos/github/marian13/convenient_service/badge.svg",alt:"Coverage Status"}))," ",(0,r.kt)("a",{parentName:"p",href:"http://inch-ci.org/github/marian13/convenient_service"},(0,r.kt)("img",{parentName:"a",src:"http://inch-ci.org/github/marian13/convenient_service.svg?branch=main",alt:"inline docs"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/tags/convenient-service"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/stackoverflow-community-orange.svg?logo=stackoverflow",alt:"Convenient Service on stackoverflow"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.patreon.com/user?u=31435716&fan_landing=true"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/patreon-donate-orange.svg",alt:"Patreon"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://opensource.org/licenses/MIT"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/license-MIT-yellow.svg",alt:"License: MIT"}))),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/marian13/convenient_service/main/logo.png",width:"300"})),(0,r.kt)("p",null,"Yet another approach to revisit the service object pattern, but this time focusing on the unique, opinionated features."),(0,r.kt)("p",null,"*"," Logo is downloaded from ",(0,r.kt)("a",{parentName:"p",href:"https://cutewallpaper.org/24/cartoon-diamond-png/2703010921.html"},"CuteWallpaper.org"),". It will be replaced later."),(0,r.kt)("h2",{id:"warning-"},"WARNING \u2757\u2757\u2757"),(0,r.kt)("p",null,"This library is under heavy development. Public API may be subject to change. The first major release is still to come. Use the current version at your own risk. Ruby 2.7+. Thanks."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)(g,{groupId:"config",mdxType:"Tabs"},(0,r.kt)(h,{value:"standard",label:"Standard",default:!0,mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        # frozen_string_literal: true\n        -\n        require "convenient_service"\n      ')),(0,r.kt)(h,{value:"rails",label:"Rails",mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        # frozen_string_literal: true\n        -\n        ##\n        # NOTE: Minimal `active_model` version - `5.2.0`.\n        #\n        require "active_model"\n        -\n        require "convenient_service"\n        -\n        ConvenientService::Dependencies.require_assigns_attributes_in_constructor_using_active_model_attribute_assignment\n        ConvenientService::Dependencies.require_has_attributes_using_active_model_attributes\n        ConvenientService::Dependencies.require_has_result_params_validations_using_active_model_validations\n      ')),(0,r.kt)(h,{value:"dry",label:"Dry",mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        # frozen_string_literal: true\n        -\n        ##\n        # NOTE: Minimal `dry-initializer` version - `3.0.0`.\n        #\n        require "dry-initializer"\n        -\n        ##\n        # NOTE: Minimal `dry-validation` version - `1.5.0`.\n        #\n        require "dry-validation"\n        -\n        require "convenient_service"\n        -\n        ConvenientService::Dependencies.require_assigns_attributes_in_constructor_using_dry_initializer\n        ConvenientService::Dependencies.require_has_result_params_validations_using_dry_validation\n      '))),(0,r.kt)(g,{groupId:"config",mdxType:"Tabs"},(0,r.kt)(h,{value:"standard",label:"Standard",default:!0,mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        # frozen_string_literal: true\n        -\n        class ApplicationService\n          module Config\n            def self.included(service_class)\n              service_class.include ConvenientService::Standard::Config\n            end\n          end\n        end\n      ")),(0,r.kt)(h,{value:"rails",label:"Rails",mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        # frozen_string_literal: true\n        -\n        class RailsService\n          module Config\n            def self.included(service_class)\n              service_class.class_exec do\n                include ConvenientService::Standard::Config\n                -\n                ##\n                # NOTE: `AssignsAttributesInConstructor::UsingActiveModelAttributeAssignment` plugin.\n                #\n                concerns do\n                  use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingActiveModelAttributeAssignment::Concern\n                end\n                -\n                middlewares :initialize do\n                  use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingActiveModelAttributeAssignment::Middleware\n                end\n                -\n                ##\n                # NOTE: `HasAttributes::UsingActiveModelAttributes` plugin.\n                #\n                concerns do\n                  use ConvenientService::Plugins::Common::HasAttributes::UsingActiveModelAttributes::Concern\n                end\n                -\n                ##\n                # NOTE: `HasResultParamsValidations::UsingActiveModelValidations` plugin.\n                #\n                concerns do\n                  use ConvenientService::Plugins::Service::HasResultParamsValidations::UsingActiveModelValidations::Concern\n                end\n                -\n                middlewares :result do\n                  use ConvenientService::Plugins::Service::HasResultParamsValidations::UsingActiveModelValidations::Middleware\n                end\n              end\n            end\n          end\n        end\n      ")),(0,r.kt)(h,{value:"dry",label:"Dry",mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        # frozen_string_literal: true\n        -\n        class DryService\n          module Config\n            def self.included(service_class)\n              service_class.class_exec do\n                include ConvenientService::Standard::Config\n                -\n                ##\n                # NOTE: `AssignsAttributesInConstructor::UsingDryInitializer` plugin.\n                #\n                concerns do\n                  use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingDryInitializer::Concern\n                end\n                -\n                ##\n                # NOTE: `HasResultParamsValidations::UsingDryValidation` plugin.\n                #\n                concerns do\n                  use ConvenientService::Plugins::Service::HasResultParamsValidations::UsingDryValidation::Concern\n                end\n                -\n                middlewares :result do\n                  use ConvenientService::Plugins::Service::HasResultParamsValidations::UsingDryValidation::Middleware\n                end\n              end\n            end\n          end\n        end\n      "))),(0,r.kt)(g,{groupId:"config",mdxType:"Tabs"},(0,r.kt)(h,{value:"standard",label:"Standard",default:!0,mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        # frozen_string_literal: true\n        -\n        class AssertFileExists\n          include ApplicationService::Config\n          -\n          attr_accessor :path\n          -\n          def initialize(path:)\n            @path = path\n          end\n          -\n          def result\n            return failure(data: {path: "Path is `nil`"}) if path.nil?\n            return failure(data: {path: "Path is empty"}) if path.empty?\n            -\n            return error(message: "File with path `#{path}` does NOT exist") unless ::File.exist?(path)\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(h,{value:"rails",label:"Rails",mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        # frozen_string_literal: true\n        -\n        class AssertFileExists\n          include RailsService::Config\n          -\n          attribute :path, :string\n          -\n          validates :path, presence: true\n          -\n          def result\n            return error(message: "File with path `#{path}` does NOT exist") unless ::File.exist?(path)\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(h,{value:"dry",label:"Dry",mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        # frozen_string_literal: true\n        -\n        class AssertFileExists\n          include DryService::Config\n          -\n          option :path\n          -\n          contract do\n            schema do\n              required(:path).value(:string)\n            end\n          end\n          -\n          def result\n            return error(message: "File with path `#{path}` does NOT exist") unless ::File.exist?(path)\n            -\n            success\n          end\n        end\n      '))),(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'result = AssertFileExists.result(path: "Gemfile")'),(0,r.kt)(g,{groupId:"config",mdxType:"Tabs"},(0,r.kt)(h,{value:"standard",label:"Standard",default:!0,mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        # frozen_string_literal: true\n        -\n        class AssertFileNotEmpty\n          include ApplicationService::Config\n          -\n          attr_accessor :path\n          -\n          def initialize(path:)\n            @path = path\n          end\n          -\n          def result\n            return failure(data: {path: "Path is `nil`"}) if path.nil?\n            return failure(data: {path: "Path is empty"}) if path.empty?\n            -\n            return error(message: "File with path `#{path}` is empty") if ::File.zero?(path)\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(h,{value:"rails",label:"Rails",mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        # frozen_string_literal: true\n        -\n        class AssertFileNotEmpty\n          include RailsService::Config\n          -\n          attribute :path, :string\n          -\n          validates :path, presence: true\n          -\n          def result\n            return error(message: "File with path `#{path}` is empty") if ::File.zero?(path)\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(h,{value:"dry",label:"Dry",mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        # frozen_string_literal: true\n        -\n        class AssertFileNotEmpty\n          include DryService::Config\n          -\n          option :path\n          -\n          contract do\n            schema do\n              required(:path).value(:string)\n            end\n          end\n          -\n          def result\n            return error(message: "File with path `#{path}` is empty") if ::File.zero?(path)\n            -\n            success\n          end\n        end\n      '))),(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'result = AssertFileNotEmpty.result(path: "Gemfile")'),(0,r.kt)(g,{groupId:"config",mdxType:"Tabs"},(0,r.kt)(h,{value:"standard",label:"Standard",default:!0,mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        # frozen_string_literal: true\n        -\n        class ReadFileContent\n          include ApplicationService::Config\n          -\n          attr_reader :path\n          -\n          step :validate_path\n          step AssertFileExists, in: :path\n          step AssertFileNotEmpty, in: :path\n          step :result, in: :path, out: :content\n          -\n          def initialize(path:)\n            @path = path\n          end\n          -\n          def result\n            success(data: {content: ::File.read(path)})\n          end\n          -\n          private\n          -\n          def validate_path\n            return failure(data: {path: "Path is `nil`"}) if path.nil?\n            return failure(data: {path: "Path is empty"}) if path.empty?\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(h,{value:"rails",label:"Rails",mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        # frozen_string_literal: true\n        -\n        class ReadFileContent\n          include RailsService::Config\n          -\n          attribute :path, :string\n          -\n          validates :path, presence: true\n          -\n          step AssertFileExists, in: :path\n          step AssertFileNotEmpty, in: :path\n          step :result, in: :path, out: :content\n          -\n          def result\n            success(data: {content: ::File.read(path)})\n          end\n        end\n      ")),(0,r.kt)(h,{value:"dry",label:"Dry",mdxType:"TabItem"},(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        # frozen_string_literal: true\n        -\n        class ReadFileContent\n          include DryService::Config\n          -\n          option :path\n          -\n          contract do\n            schema do\n              required(:path).value(:string)\n            end\n          end\n          -\n          step AssertFileExists, in: :path\n          step AssertFileNotEmpty, in: :path\n          step :result, in: :path, out: :content\n          -\n          def result\n            success(data: {content: ::File.read(path)})\n          end\n        end\n      "))),(0,r.kt)(b.Z,{language:"ruby",mdxType:"CodeBlock"},'\n    result = ReadFileContent.result(path: "Gemfile")\n    -\n    if result.success?\n      puts result.data[:content]\n    else\n      puts result.message\n    end\n  '),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Copyright (c) 2022 ",(0,r.kt)("a",{parentName:"p",href:"http://mariankostyk.com"},"Marian Kostyk"),"."))}x.isMDXComponent=!0}}]);