"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[3852],{8075:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var t=r(4848),s=r(8453);const a={slug:"/guides/fdd/usage/how_to_create_and_invoke_entries",sidebar_position:1,title:"How to use entries?"},o=void 0,i={id:"guides/fdd/usage/how_to_use_entries",title:"How to use entries?",description:"How to create an entry?",source:"@site/docs/guides/fdd/usage/how_to_use_entries.mdx",sourceDirName:"guides/fdd/usage",slug:"/guides/fdd/usage/how_to_create_and_invoke_entries",permalink:"/guides/fdd/usage/how_to_create_and_invoke_entries",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/fdd/usage/how_to_use_entries.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/guides/fdd/usage/how_to_create_and_invoke_entries",sidebar_position:1,title:"How to use entries?"},sidebar:"docs",previous:{title:"Usage",permalink:"/category/usage-1"},next:{title:"Advanced",permalink:"/category/advanced"}},d={},l=[{value:"How to create an entry?",id:"how-to-create-an-entry",level:2},{value:"How to define arguments for entries?",id:"how-to-define-arguments-for-entries",level:2},{value:"How to invoke an entry?",id:"how-to-invoke-an-entry",level:2},{value:"How to add a middleware for all entries?",id:"how-to-add-a-middleware-for-all-entries",level:2},{value:"How to add a middleware for the specific entry?",id:"how-to-add-a-middleware-for-the-specific-entry",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"how-to-create-an-entry",children:"How to create an entry?"}),"\n",(0,t.jsx)(n.p,{children:"There are two ways to do it - block and method forms."}),"\n",(0,t.jsx)(n.p,{children:"This is how it can be done using the block form."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format do\n      Services::Format.result(path: "#{::Dir.pwd}/Gemfile")\n    end\n  end\nend\n'})}),"\n",(0,t.jsx)(n.p,{children:"The following code snippet demonstrates the equivalent method form."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format\n\n    def format\n      Services::Format.result(path: "#{::Dir.pwd}/Gemfile")\n    end\n  end\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-define-arguments-for-entries",children:"How to define arguments for entries?"}),"\n",(0,t.jsx)(n.p,{children:"Since entries are built on the top of the regular Ruby blocks and methods you are able to utilize the techniques that you already know."}),"\n",(0,t.jsx)(n.p,{children:"Here are some examples of how to define positional and keyword arguments."}),"\n",(0,t.jsx)(n.p,{children:"The block form:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format do |path, verbose: false|\n      Services::Format.result(path: path, verbose: verbose)\n    end\n  end\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"The method form:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format\n\n    def format(path, verbose: false)\n      Services::Format.result(path: path, verbose: verbose)\n    end\n  end\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Entries with ",(0,t.jsx)(n.a,{href:"https://rubyguides.com/2018/06/rubys-method-arguments",children:"variable arguments list"})," may look like as follows."]}),"\n",(0,t.jsx)(n.p,{children:"The block form:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format do |*args, **kwargs, &block|\n      path = args.first\n\n      verbose = block ? block.call : kwargs[:verbose]\n\n      Services::Format.result(path: path, verbose: verbose)\n    end\n  end\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"The method form:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format\n\n    def format(*args, **kwargs, &block)\n      path = args.first\n\n      verbose = block ? block.call : kwargs[:verbose]\n\n      Services::Format.result(path: path, verbose: verbose)\n    end\n  end\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-invoke-an-entry",children:"How to invoke an entry?"}),"\n",(0,t.jsx)(n.p,{children:"No matter whether an entry was defined by a block or by a method, its invocation is the same, e.g:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"Features::Gemfile.format\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"Features::Gemfile.format(path, verbose: true)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"Features::Gemfile.format(*args, **kwargs, &block)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-add-a-middleware-for-all-entries",children:"How to add a middleware for all entries?"}),"\n",(0,t.jsx)(n.p,{children:"Check the following feature."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'module Features\n  class SomeFeature\n    include ConvenientService::Feature::Standard::Config\n\n    entry :some_entry_without_arguments\n    entry :some_entry_with_arguments\n\n    def some_entry_without_arguments\n      puts "Entry `some_entry_without_arguments` called."\n    end\n\n    def some_entry_with_arguments(*args, **kwargs, &block)\n      puts "Entry `some_entry_with_arguments` called."\n    end\n  end\nend\n'})}),"\n",(0,t.jsx)(n.p,{children:"It has two entries that are displaying some text on the screen."}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'Features::SomeFeature.some_entry_without_arguments\n# "Entry `some_entry_without_arguments` called."\n# => nil\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'Features::SomeFeature.some_entry_with_arguments\n# "Entry `some_entry_with_arguments` called."\n# => nil\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now, let's define a simple middleware."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'class TestMiddleware < ConvenientService::MethodMiddleware\n  def next(entry_name, *args, **kwargs, &block)\n    puts "`TestMiddleware` called for entry `#{entry_name}` with args `#{args.inspect}`, kwargs `#{kwargs.inspect}` and block `#{block.inspect}`."\n\n    chain.next(entry_name, *args, **kwargs, &block)\n  end\nend\n'})}),"\n",(0,t.jsx)(n.p,{children:"It logs the entry name and its arguments."}),"\n",(0,t.jsx)(n.p,{children:"Then it triggers the original entry behaviour."}),"\n",(0,t.jsxs)(n.p,{children:["In order to register a middleware for all entries inside the particular feature, use the ",(0,t.jsx)(n.code,{children:"middlewares :entry"})," directive."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'module Features\n  class SomeFeature\n    include ConvenientService::Feature::Standard::Config\n\n    # highlight-start\n    middlewares :entry do\n      use TestMiddleware\n    end\n    # highlight-end\n\n    entry :some_entry_without_arguments\n    entry :some_entry_with_arguments\n\n    def some_entry_without_arguments\n      puts "Entry `some_entry_without_arguments` called."\n    end\n\n    def some_entry_with_arguments(*args, **kwargs, &block)\n      puts "Entry `some_entry_with_arguments` called."\n    end\n  end\nend\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now the ",(0,t.jsx)(n.code,{children:"TestMiddleware"})," is executed before any entry invocation."]}),"\n",(0,t.jsx)(n.p,{children:"This is how it looks in practice."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'Features::SomeFeature.some_entry_without_arguments\n# "`TestMiddleware` called for entry `some_entry_without_arguments` with args `[]`, kwargs `{}` and block `nil`."\n# "Entry `some_entry_without_arguments` called."\n# => nil\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'Features::SomeFeature.some_entry_with_arguments(:foo, foo: :bar) { :foo }\n# "`TestMiddleware` called for entry `some_entry_with_arguments` with args `[:foo]`, kwargs `{:foo=>:bar}` and block `#<Proc:0x00000001227756c8.>`."\n# "Entry `some_entry_with_arguments` called."\n# => nil\n'})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-add-a-middleware-for-the-specific-entry",children:"How to add a middleware for the specific entry?"}),"\n",(0,t.jsx)(n.p,{children:"The process is almost the same as with the addition of a middleware for all entries."}),"\n",(0,t.jsxs)(n.p,{children:["But the arguments list does not start with positional ",(0,t.jsx)(n.code,{children:"entry_name"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["It is still possible to access ",(0,t.jsx)(n.code,{children:"entry_name"})," via method ",(0,t.jsx)(n.code,{children:"method"})," \ud83d\ude42."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'class TestMiddleware < ConvenientService::MethodMiddleware\n  def next(*args, **kwargs, &block)\n    puts "`TestMiddleware` called for entry `#{method}` with args `#{args.inspect}`, kwargs `#{kwargs.inspect}` and block `#{block.inspect}`."\n\n    chain.next(*args, **kwargs, &block)\n  end\nend\n'})}),"\n",(0,t.jsx)(n.p,{children:"The registration directive contains the specific entry name."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'module Features\n  class SomeFeature\n    include ConvenientService::Feature::Standard::Config\n\n    # highlight-start\n    middlewares :some_entry do\n      use TestMiddleware\n    end\n    # highlight-end\n\n    entry :some_entry\n    entry :some_other_entry\n\n    def some_entry(first_positional_argument, second_positional_argument)\n      puts "Entry `some_entry` called."\n    end\n\n    def some_other_entry\n      puts "Entry `some_other_entry` called."\n    end\n  end\nend\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Thus the ",(0,t.jsx)(n.code,{children:"TestMiddleware"})," is executed only before specific entry invocation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'Features::SomeFeature.some_entry(:foo, :bar)\n# "`TestMiddleware` called for entry `some_entry` with args `[:foo, :bar]`, kwargs `{}` and block `nil`."\n# "Entry `some_entry` called."\n# => nil\n'})}),"\n",(0,t.jsx)(n.p,{children:"All the other entries stay unaffected."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'Features::SomeFeature.some_other_entry\n# "Entry `some_other_entry` called."\n# => nil\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var t=r(6540);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);