"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[6563,7918],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=i.createContext({}),d=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return i.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=r,v=p["".concat(o,".").concat(m)]||p[m]||c[m]||a;return t?i.createElement(v,l(l({ref:n},u),{},{components:t})):i.createElement(v,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var d=2;d<a;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var i=t(7294),r=t(6010);const a="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return i.createElement("div",{role:"tabpanel",className:(0,r.Z)(a,l),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>m});var i=t(7462),r=t(7294),a=t(6010),l=t(2389),s=t(7392),o=t(7094),d=t(2466);const u="tabList__CuJ",c="tabItem_LNqP";function p(e){var n;const{lazy:t,block:l,defaultValue:p,values:m,groupId:v,className:g}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=m??b.map((e=>{let{props:{value:n,label:t,attributes:i}}=e;return{value:n,label:t,attributes:i}})),h=(0,s.l)(y,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===p?p:p??(null==(n=b.find((e=>e.props.default)))?void 0:n.props.value)??b[0].props.value;if(null!==f&&!y.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:C,setTabGroupChoices:k}=(0,o.U)(),[_,T]=(0,r.useState)(f),x=[],{blockElementScrollPositionUntilNextRender:S}=(0,d.o5)();if(null!=v){const e=C[v];null!=e&&e!==_&&y.some((n=>n.value===e))&&T(e)}const Z=e=>{const n=e.currentTarget,t=x.indexOf(n),i=y[t].value;i!==_&&(S(n),T(i),null!=v&&k(v,String(i)))},E=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=x.indexOf(e.currentTarget)+1;t=x[n]??x[0];break}case"ArrowLeft":{const n=x.indexOf(e.currentTarget)-1;t=x[n]??x[x.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,a.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":l},g)},y.map((e=>{let{value:n,label:t,attributes:l}=e;return r.createElement("li",(0,i.Z)({role:"tab",tabIndex:_===n?0:-1,"aria-selected":_===n,key:n,ref:e=>x.push(e),onKeyDown:E,onFocus:Z,onClick:Z},l,{className:(0,a.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":_===n})}),t??n)}))),t?(0,r.cloneElement)(b.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==_})))))}function m(e){const n=(0,l.Z)();return r.createElement(p,(0,i.Z)({key:String(n)},e))}},8573:(e,n,t)=>{t.d(n,{Z:()=>l});var i=t(7410),r=t(7294),a=t(814);(void 0!==t.g?t.g:window).Prism=i.Z,t(9385);function l(e){let{children:n,...t}=e;return r.createElement(r.Fragment,null,r.createElement(a.Z,t,(e=>{let n=e.toString().split("\n");n=""===n[0]?n.slice(1):n;const t=n.find((e=>e.length)).search(/[^ ]/),i=-1===t?0:t;return n.map((e=>e.trimEnd())).map((e=>"-"===e.trimStart()?"":e)).map((e=>e.slice(i))).join("\n")})(n)))}},8584:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>v,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var i=t(7462),r=(t(7294),t(3905)),a=t(5488),l=t(5162),s=t(8573);const o={slug:"/tldr",sidebar_position:1,title:"TL;DR"},d=void 0,u={unversionedId:"tldr",id:"tldr",title:"TL;DR",description:"I have no time to read tons of docs.",source:"@site/docs/tldr.mdx",sourceDirName:".",slug:"/tldr",permalink:"/tldr",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/tldr.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/tldr",sidebar_position:1,title:"TL;DR"},sidebar:"docs",previous:{title:"Introduction",permalink:"/"},next:{title:"Requirements",permalink:"/requirements"}},c={},p=[{value:"More examples",id:"more-examples",level:2}],m={toc:p};function v(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"I have no time to read tons of docs. ",(0,r.kt)("br",null),"\nJust show me an example use case and I'll quickly craft something similar \ud83d\ude0e."),(0,r.kt)("p",{parentName:"blockquote"},"\u2014 A lazy developer")),(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n    # Any source code in the project.\n    def read_file_content(path)\n      result = ReadFileContent.result(path: path)\n      -\n      if result.success?\n        ##\n        # Service tried to read the file content and completed it.\n        #\n        result.data[:content] # File content.\n      elsif result.failure?\n        ##\n        # Service tried to read file content but did NOT complete it due to some expected reason.\n        #\n        App.logger.warn { result.message.to_s }\n        -\n        "" # Fallback value or any other reasonable fallback behavior.\n      else # result.error?\n        ##\n        # Service NOT even tried to read file content due to a validation issue or exception.\n        #\n        App.logger.error { result.message.to_s }\n        -\n        raise VerboseException, result.message.to_s # Self-explanatory exception or any other reasonable fallback behavior.\n      end\n    end\n  '),(0,r.kt)(a.Z,{groupId:"config",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"standard",label:"Standard",default:!0,mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'require "convenient_service"')),(0,r.kt)(l.Z,{value:"rails",label:"Rails",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        require "active_model" # NOTE: Minimal `active_model` version - `5.2.0`.\n        -\n        require "convenient_service"\n        -\n        ConvenientService::Dependencies.require_assigns_attributes_in_constructor_using_active_model_attribute_assignment\n        ConvenientService::Dependencies.require_has_attributes_using_active_model_attributes\n        ConvenientService::Dependencies.require_has_j_send_result_params_validations_using_active_model_validations\n      ')),(0,r.kt)(l.Z,{value:"dry",label:"Dry",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        require "dry-initializer" # NOTE: Minimal `dry-initializer` version - `3.0.0`.\n        require "dry-validation" # NOTE: Minimal `dry-validation` version - `1.5.0`.\n        -\n        require "convenient_service"\n        -\n        ConvenientService::Dependencies.require_assigns_attributes_in_constructor_using_dry_initializer\n        ConvenientService::Dependencies.require_has_result_params_validations_using_dry_validation\n      ')),(0,r.kt)(l.Z,{value:"custom",label:"Custom",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        require "active_model" # NOTE: Minimal `active_model` version - `5.2.0`.\n        require "dry-initializer" # NOTE: Minimal `dry-initializer` version - `3.0.0`.\n        require "awesome_print" # NOTE: Minimal `awesome_print` version - `1.0.0`.\n        -\n        require "convenient_service"\n        -\n        ConvenientService::Dependencies.require_has_j_send_result_params_validations_using_active_model_validations\n        ConvenientService::Dependencies.require_assigns_attributes_in_constructor_using_dry_initializer\n        ConvenientService::Dependencies.require_rescues_result_unhandled_exceptions\n        ConvenientService::Dependencies.require_awesome_print_inspect if Rails.env.development? || Rails.env.test?\n      '))),(0,r.kt)(a.Z,{groupId:"config",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"standard",label:"Standard",default:!0,mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        module ApplicationService\n          module Config\n            include ConvenientService::Concern\n            -\n            included do\n              include ConvenientService::Standard::Config\n            end\n          end\n        end\n      ")),(0,r.kt)(l.Z,{value:"rails",label:"Rails",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        module RailsService\n          module Config\n            include ConvenientService::Concern\n            -\n            included do\n              include ConvenientService::Standard::Config\n              -\n              concerns do\n                use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingActiveModelAttributeAssignment::Concern\n                use ConvenientService::Plugins::Common::HasAttributes::UsingActiveModelAttributes::Concern\n                use ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingActiveModelValidations::Concern\n              end\n              -\n              middlewares :initialize do\n                use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingActiveModelAttributeAssignment::Middleware\n              end\n              -\n              middlewares :result do\n                insert_before \\\n                  ConvenientService::Plugins::Service::CanHaveConnectedSteps::Middleware,\n                  ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingActiveModelValidations::Middleware\n              end\n            end\n          end\n        end\n      ")),(0,r.kt)(l.Z,{value:"dry",label:"Dry",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        module DryService\n          module Config\n            include ConvenientService::Concern\n            -\n            included do\n              include ConvenientService::Standard::Config\n              -\n              concerns do\n                use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingDryInitializer::Concern\n                use ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingDryValidation::Concern\n              end\n              -\n              middlewares :result do\n                insert_before \\\n                  ConvenientService::Plugins::Service::CanHaveConnectedSteps::Middleware,\n                  ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingDryValidation::Middleware\n              end\n            end\n          end\n        end\n      ")),(0,r.kt)(l.Z,{value:"custom",label:"Custom",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        module CustomService\n          module Config\n            include ConvenientService::Concern\n            -\n            included do\n              include ConvenientService::Standard::Config\n              -\n              if Rails.env.development? || Rails.env.test?\n                include ConvenientService::AwesomePrintInspect::Config\n              end\n              -\n              concerns do\n                use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingDryInitializer::Concern\n                use ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingActiveModelValidations::Concern\n              end\n              -\n              middlewares :result do\n                insert_before \\\n                  ConvenientService::Plugins::Service::CanHaveConnectedSteps::Middleware,\n                  ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingActiveModelValidations::Middleware\n              end\n              -\n              if !Rails.env.test?\n                middlewares :result do\n                  use ConvenientService::Plugins::Service::RescuesResultUnhandledExceptions::Middleware\n                end\n                -\n                middlewares :result, scope: :class do\n                  use ConvenientService::Plugins::Service::RescuesResultUnhandledExceptions::Middleware\n                end\n              end\n            end\n          end\n        end\n      "))),(0,r.kt)(a.Z,{groupId:"config",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"standard",label:"Standard",default:!0,mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        class AssertFileExists\n          include ApplicationService::Config\n          -\n          attr_reader :path\n          -\n          def initialize(path:)\n            @path = path\n          end\n          -\n          def result\n            return error("Path is `nil`") if path.nil?\n            return error("Path is empty") if path.empty?\n            -\n            return failure("File does not exist at path `#{path}`") unless ::File.exist?(path)\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(l.Z,{value:"rails",label:"Rails",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        class AssertFileExists\n          include RailsService::Config\n          -\n          attribute :path, :string\n          -\n          validates :path, presence: true\n          -\n          def result\n            return failure("File does not exist at path `#{path}`") unless ::File.exist?(path)\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(l.Z,{value:"dry",label:"Dry",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        class AssertFileExists\n          include DryService::Config\n          -\n          option :path\n          -\n          contract do\n            schema do\n              required(:path).value(:string)\n            end\n          end\n          -\n          def result\n            return failure("File does not exist at path `#{path}`") unless ::File.exist?(path)\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(l.Z,{value:"custom",label:"Custom",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        class AssertFileExists\n          include CustomService::Config\n          -\n          option :path\n          -\n          validates :path, presence: true\n          -\n          def result\n            return failure("File does not exist at path `#{path}`") unless ::File.exist?(path)\n            -\n            success\n          end\n        end\n      '))),(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'result = AssertFileExists.result(path: "Gemfile")'),(0,r.kt)(a.Z,{groupId:"config",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"standard",label:"Standard",default:!0,mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        class AssertFileNotEmpty\n          include ApplicationService::Config\n          -\n          attr_accessor :path\n          -\n          def initialize(path:)\n            @path = path\n          end\n          -\n          def result\n            return error("Path is `nil`") if path.nil?\n            return error("Path is empty") if path.empty?\n            -\n            return failure("File is empty at path `#{path}`") if ::File.zero?(path)\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(l.Z,{value:"rails",label:"Rails",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        class AssertFileNotEmpty\n          include RailsService::Config\n          -\n          attribute :path, :string\n          -\n          validates :path, presence: true\n          -\n          def result\n            return failure("File is empty at path `#{path}`") if ::File.zero?(path)\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(l.Z,{value:"dry",label:"Dry",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        class AssertFileNotEmpty\n          include DryService::Config\n          -\n          option :path\n          -\n          contract do\n            schema do\n              required(:path).value(:string)\n            end\n          end\n          -\n          def result\n            return failure("File is empty at path `#{path}`") if ::File.zero?(path)\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(l.Z,{value:"custom",label:"Custom",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        class AssertFileNotEmpty\n          include CustomService::Config\n          -\n          option :path\n          -\n          validates :path, presence: true\n          -\n          def result\n            return failure("File is empty at path `#{path}`") if ::File.zero?(path)\n            -\n            success\n          end\n        end\n      '))),(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'result = AssertFileNotEmpty.result(path: "Gemfile")'),(0,r.kt)(a.Z,{groupId:"config",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"standard",label:"Standard",default:!0,mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'\n        class ReadFileContent\n          include ApplicationService::Config\n          -\n          attr_reader :path\n          -\n          step :validate_path\n          step AssertFileExists, in: :path\n          step AssertFileNotEmpty, in: :path\n          step :result, in: :path, out: :content\n          -\n          def initialize(path:)\n            @path = path\n          end\n          -\n          def result\n            success(content: ::File.read(path))\n          end\n          -\n          private\n          -\n          def validate_path\n            return error("Path is `nil`") if path.nil?\n            return error("Path is empty") if path.empty?\n            -\n            success\n          end\n        end\n      ')),(0,r.kt)(l.Z,{value:"rails",label:"Rails",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        class ReadFileContent\n          include RailsService::Config\n          -\n          attribute :path, :string\n          -\n          validates :path, presence: true\n          -\n          step AssertFileExists, in: :path\n          step AssertFileNotEmpty, in: :path\n          step :result, in: :path, out: :content\n          -\n          def result\n            success(content: ::File.read(path))\n          end\n        end\n      ")),(0,r.kt)(l.Z,{value:"dry",label:"Dry",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        class ReadFileContent\n          include DryService::Config\n          -\n          option :path\n          -\n          contract do\n            schema do\n              required(:path).value(:string)\n            end\n          end\n          -\n          step AssertFileExists, in: :path\n          step AssertFileNotEmpty, in: :path\n          step :result, in: :path, out: :content\n          -\n          def result\n            success(content: ::File.read(path))\n          end\n        end\n      ")),(0,r.kt)(l.Z,{value:"custom",label:"Custom",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},"\n        class ReadFileContent\n          include CustomService::Config\n          -\n          option :path\n          -\n          validates :path, presence: true\n          -\n          step AssertFileExists, in: :path\n          step AssertFileNotEmpty, in: :path\n          step :result, in: :path, out: :content\n          -\n          def result\n            success(content: ::File.read(path))\n          end\n        end\n      "))),(0,r.kt)(s.Z,{language:"ruby",mdxType:"CodeBlock"},'result = ReadFileContent.result(path: "Gemfile")'),(0,r.kt)("h2",{id:"more-examples"},"More examples"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Source Code"),(0,r.kt)("th",{parentName:"tr",align:null},"RSpec Specs"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/marian13/convenient_service/tree/main/lib/convenient_service/examples"},"lib/convenient_service/examples")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/marian13/convenient_service/tree/main/spec/lib/convenient_service/examples"},"spec/lib/convenient_service"))))))}v.isMDXComponent=!0}}]);