"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[4548],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),v=r,f=d["".concat(l,".").concat(v)]||d[v]||p[v]||a;return n?s.createElement(f,o(o({ref:t},u),{},{components:n})):s.createElement(f,o({ref:t},u))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<a;c++)o[c]=n[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4534:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=n(7462),r=(n(7294),n(3905));const a={slug:"/guides/usage/how_to_use_steps",sidebar_position:3,title:"How to use service steps?"},o=void 0,i={unversionedId:"guides/usage/how_to_use_steps",id:"guides/usage/how_to_use_steps",title:"How to use service steps?",description:"Which types of steps are available?",source:"@site/docs/guides/usage/how_to_use_steps.mdx",sourceDirName:"guides/usage",slug:"/guides/usage/how_to_use_steps",permalink:"/guides/usage/how_to_use_steps",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/usage/how_to_use_steps.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/guides/usage/how_to_use_steps",sidebar_position:3,title:"How to use service steps?"},sidebar:"docs",previous:{title:"How to use service results?",permalink:"/guides/usage/how_to_use_results"},next:{title:"How to pass a value to step from class/instance scope?",permalink:"/guides/usage/how_to_pass_value_to_step_class_or_instance_scope"}},l={},c=[{value:"Which types of steps are available?",id:"which-types-of-steps-are-available",level:2},{value:"How to define a service step?",id:"how-to-define-a-service-step",level:2},{value:"How to define a method step?",id:"how-to-define-a-method-step",level:2},{value:"What is the result of a service with steps?",id:"what-is-the-result-of-a-service-with-steps",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"which-types-of-steps-are-available"},"Which types of steps are available?"),(0,r.kt)("p",null,"The two criteria currently categorize steps."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By action: service and method steps.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By control flow: ",(0,r.kt)("inlineCode",{parentName:"p"},"and"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"or"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"not")," steps."))),(0,r.kt)("h2",{id:"how-to-define-a-service-step"},"How to define a service step?"),(0,r.kt)("p",null,"You can register existing services as steps of other services using the ",(0,r.kt)("inlineCode",{parentName:"p"},"step")," directive."),(0,r.kt)("p",null,"Let's have a look at it in practice."),(0,r.kt)("p",null,"Having the ",(0,r.kt)("inlineCode",{parentName:"p"},"Service")," service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n")),(0,r.kt)("p",null,"We can use it as a step of the ",(0,r.kt)("inlineCode",{parentName:"p"},"OtherService")," service in the following way."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class OtherService\n  include ConvenientService::Standard::Config\n\n  step Service\nend\n")),(0,r.kt)("p",null,"This code works almost the same as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class OtherService\n  include ConvenientService::Standard::Config\n\n  def result\n    Service.result\n  end\nend\n")),(0,r.kt)("p",null,"That is why for a single-step service the usage of steps may not seem very beneficial."),(0,r.kt)("p",null,"So consider a more complex example."),(0,r.kt)("p",null,"Now we have 3 services."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class FooService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class BarService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class BazService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"HostService")," uses them as steps."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class HostService\n  include ConvenientService::Standard::Config\n\n  step FooService\n  step BarService\n  step BazService\nend\n")),(0,r.kt)("p",null,"Rough ",(0,r.kt)("inlineCode",{parentName:"p"},"HostService")," equivalent without steps may be implemented as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class HostService\n  include ConvenientService::Standard::Config\n\n  def result\n    foo_result = FooService.result\n\n    return foo_result unless foo_result.success?\n\n    bar_result = BarService.result\n\n    return bar_result unless bar_result.success?\n\n    BazService.result\n  end\nend\n")),(0,r.kt)("p",null,"As you can see, steps allow us to eliminate at least 2 assignments and 2 if-conditionals for this particular example."),(0,r.kt)("p",null,"Sure, those assignments and if-conditionals are still performed under the hood, but it is no longer a developer's responsibility to manage them."),(0,r.kt)("p",null,"Now the benefit of steps becomes more obvious, but that is not the only benefit."),(0,r.kt)("p",null,"Other guides are going to demonstrate the additional simplifications."),(0,r.kt)("h2",{id:"how-to-define-a-method-step"},"How to define a method step?"),(0,r.kt)("p",null,"Any method can be a step."),(0,r.kt)("p",null,"The only requirement is that it must return a result."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  include ConvenientService::Standard::Config\n\n  step :foo\n\n  def foo\n    success\n  end\nend\n")),(0,r.kt)("h2",{id:"what-is-the-result-of-a-service-with-steps"},"What is the result of a service with steps?"),(0,r.kt)("p",null,"Consider the following service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  include ConvenientService::Standard::Config\n\n  step :foo\n  step :bar\n  step :baz\n\n  def foo\n    success\n  end\n\n  def bar\n    success\n  end\n\n  def baz\n    success\n  end\nend\n")),(0,r.kt)("p",null,"When all steps are successful, the overall service result is the last step result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"result.step\n# => <Service::Step method: :baz>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"result = Service.result\n# => <Service::Result status: :success>\n")),(0,r.kt)("p",null,"Let's check some other service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class OtherService\n  include ConvenientService::Standard::Config\n\n  step :foo\n  step :bar\n  step :baz\n\n  def foo\n    success\n  end\n\n  def bar\n    failure("Message from `bar`") # `error("Message from `bar`")` also stops the sequence.\n  end\n\n  def baz\n    raise "Not raised exception"\n\n    success\n  end\nend\n')),(0,r.kt)("p",null,"When any step is NOT successful, the overall service result is that NOT successful step result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"result = OtherService.result\n# => <OtherService::Result status: :failure>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"result.step\n# => <OtherService::Step method: :bar>\n")),(0,r.kt)("p",null,"It is important to note that the remaining steps are NOT even evaluated."),(0,r.kt)("p",null,"That is why the exception from ",(0,r.kt)("inlineCode",{parentName:"p"},"baz")," was not raised."))}p.isMDXComponent=!0}}]);