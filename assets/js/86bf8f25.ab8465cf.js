"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[9444,8401],{5097:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>u,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var i=t(4848),r=t(8453),s=t(1470),a=t(9365),l=t(4428);const o={slug:"/tldr",sidebar_position:1,title:"TL;DR"},u=void 0,c={id:"tldr",title:"TL;DR",description:"I have no time to read tons of docs.",source:"@site/docs/tldr.mdx",sourceDirName:".",slug:"/tldr",permalink:"/tldr",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/tldr.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/tldr",sidebar_position:1,title:"TL;DR"},sidebar:"docs",previous:{title:"Introduction",permalink:"/"},next:{title:"Requirements",permalink:"/requirements"}},d={},p=[{value:"More examples",id:"more-examples",level:2}];function v(e){const n={a:"a",blockquote:"blockquote",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["I have no time to read tons of docs. ",(0,i.jsx)("br",{}),"\nJust show me an example use case and I'll quickly craft something similar \ud83d\ude0e."]}),"\n",(0,i.jsx)(n.p,{children:"\u2014 A lazy developer"}),"\n"]}),"\n",(0,i.jsx)(l.A,{language:"ruby",children:'\n  # Any source code in the project.\n  def read_file_content(path)\n    result = ReadFileContent.result(path: path)\n    -\n    if result.success?\n      ##\n      # Service tried to read the file content and completed it.\n      #\n      result.data[:content] # File content.\n    elsif result.failure?\n      ##\n      # Service tried to read file content but did NOT complete it due to some expected reason.\n      #\n      App.logger.warn { result.message.to_s }\n      -\n      "" # Fallback value or any other reasonable fallback behavior.\n    else # result.error?\n      ##\n      # Service NOT even tried to read file content due to a validation issue or exception.\n      #\n      App.logger.error { result.message.to_s }\n      -\n      raise VerboseException, result.message.to_s # Self-explanatory exception or any other reasonable fallback behavior.\n    end\n  end\n'}),"\n",(0,i.jsxs)(s.A,{groupId:"config",children:[(0,i.jsx)(a.A,{value:"standard",label:"Standard",default:!0,children:(0,i.jsx)(l.A,{language:"ruby",children:'require "convenient_service"'})}),(0,i.jsx)(a.A,{value:"rails",label:"Rails",children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      require "active_model" # NOTE: Minimal `active_model` version - `5.2.0`.\n      -\n      require "convenient_service"\n      -\n      ConvenientService::Dependencies.require_assigns_attributes_in_constructor_using_active_model_attribute_assignment\n      ConvenientService::Dependencies.require_has_attributes_using_active_model_attributes\n      ConvenientService::Dependencies.require_has_j_send_result_params_validations_using_active_model_validations\n    '})}),(0,i.jsx)(a.A,{value:"dry",label:"Dry",children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      require "dry-initializer" # NOTE: Minimal `dry-initializer` version - `3.0.0`.\n      require "dry-validation" # NOTE: Minimal `dry-validation` version - `1.5.0`.\n      -\n      require "convenient_service"\n      -\n      ConvenientService::Dependencies.require_assigns_attributes_in_constructor_using_dry_initializer\n      ConvenientService::Dependencies.require_has_result_params_validations_using_dry_validation\n    '})}),(0,i.jsx)(a.A,{value:"custom",label:"Custom",children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      require "active_model" # NOTE: Minimal `active_model` version - `5.2.0`.\n      require "dry-initializer" # NOTE: Minimal `dry-initializer` version - `3.0.0`.\n      require "awesome_print" # NOTE: Minimal `awesome_print` version - `1.0.0`.\n      -\n      require "convenient_service"\n      -\n      ConvenientService::Dependencies.require_has_j_send_result_params_validations_using_active_model_validations\n      ConvenientService::Dependencies.require_assigns_attributes_in_constructor_using_dry_initializer\n      ConvenientService::Dependencies.require_rescues_result_unhandled_exceptions\n      ConvenientService::Dependencies.require_awesome_print_inspect if Rails.env.development? || Rails.env.test?\n    '})})]}),"\n",(0,i.jsxs)(s.A,{groupId:"config",children:[(0,i.jsx)(a.A,{value:"standard",label:"Standard",default:!0,children:(0,i.jsx)(l.A,{language:"ruby",children:"\n      module ApplicationService\n        module Config\n          include ConvenientService::Concern\n          -\n          included do\n            include ConvenientService::Standard::Config\n          end\n        end\n      end\n    "})}),(0,i.jsx)(a.A,{value:"rails",label:"Rails",children:(0,i.jsx)(l.A,{language:"ruby",children:"\n      module RailsService\n        module Config\n          include ConvenientService::Concern\n          -\n          included do\n            include ConvenientService::Standard::Config\n            -\n            concerns do\n              use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingActiveModelAttributeAssignment::Concern\n              use ConvenientService::Plugins::Common::HasAttributes::UsingActiveModelAttributes::Concern\n              use ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingActiveModelValidations::Concern\n            end\n            -\n            middlewares :initialize do\n              use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingActiveModelAttributeAssignment::Middleware\n            end\n            -\n            middlewares :result do\n              insert_before \\\n                ConvenientService::Plugins::Service::CanHaveConnectedSteps::Middleware,\n                ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingActiveModelValidations::Middleware\n            end\n          end\n        end\n      end\n    "})}),(0,i.jsx)(a.A,{value:"dry",label:"Dry",children:(0,i.jsx)(l.A,{language:"ruby",children:"\n      module DryService\n        module Config\n          include ConvenientService::Concern\n          -\n          included do\n            include ConvenientService::Standard::Config\n            -\n            concerns do\n              use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingDryInitializer::Concern\n              use ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingDryValidation::Concern\n            end\n            -\n            middlewares :result do\n              insert_before \\\n                ConvenientService::Plugins::Service::CanHaveConnectedSteps::Middleware,\n                ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingDryValidation::Middleware\n            end\n          end\n        end\n      end\n    "})}),(0,i.jsx)(a.A,{value:"custom",label:"Custom",children:(0,i.jsx)(l.A,{language:"ruby",children:"\n      module CustomService\n        module Config\n          include ConvenientService::Concern\n          -\n          included do\n            include ConvenientService::Standard::Config\n            -\n            if Rails.env.development? || Rails.env.test?\n              include ConvenientService::AwesomePrintInspect::Config\n            end\n            -\n            concerns do\n              use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingDryInitializer::Concern\n              use ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingActiveModelValidations::Concern\n            end\n            -\n            middlewares :result do\n              insert_before \\\n                ConvenientService::Plugins::Service::CanHaveConnectedSteps::Middleware,\n                ConvenientService::Plugins::Service::HasJSendResultParamsValidations::UsingActiveModelValidations::Middleware\n            end\n            -\n            if !Rails.env.test?\n              middlewares :result do\n                use ConvenientService::Plugins::Service::RescuesResultUnhandledExceptions::Middleware\n              end\n              -\n              middlewares :result, scope: :class do\n                use ConvenientService::Plugins::Service::RescuesResultUnhandledExceptions::Middleware\n              end\n            end\n          end\n        end\n      end\n    "})})]}),"\n",(0,i.jsxs)(s.A,{groupId:"config",children:[(0,i.jsx)(a.A,{value:"standard",label:"Standard",default:!0,children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      class AssertFileExists\n        include ApplicationService::Config\n        -\n        attr_reader :path\n        -\n        def initialize(path:)\n          @path = path\n        end\n        -\n        def result\n          return error("Path is `nil`") if path.nil?\n          return error("Path is empty") if path.empty?\n          -\n          return failure("File does not exist at path `#{path}`") unless ::File.exist?(path)\n          -\n          success\n        end\n      end\n    '})}),(0,i.jsx)(a.A,{value:"rails",label:"Rails",children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      class AssertFileExists\n        include RailsService::Config\n        -\n        attribute :path, :string\n        -\n        validates :path, presence: true\n        -\n        def result\n          return failure("File does not exist at path `#{path}`") unless ::File.exist?(path)\n          -\n          success\n        end\n      end\n    '})}),(0,i.jsx)(a.A,{value:"dry",label:"Dry",children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      class AssertFileExists\n        include DryService::Config\n        -\n        option :path\n        -\n        contract do\n          schema do\n            required(:path).value(:string)\n          end\n        end\n        -\n        def result\n          return failure("File does not exist at path `#{path}`") unless ::File.exist?(path)\n          -\n          success\n        end\n      end\n    '})}),(0,i.jsx)(a.A,{value:"custom",label:"Custom",children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      class AssertFileExists\n        include CustomService::Config\n        -\n        option :path\n        -\n        validates :path, presence: true\n        -\n        def result\n          return failure("File does not exist at path `#{path}`") unless ::File.exist?(path)\n          -\n          success\n        end\n      end\n    '})})]}),"\n",(0,i.jsx)(l.A,{language:"ruby",children:'result = AssertFileExists.result(path: "Gemfile")'}),"\n",(0,i.jsxs)(s.A,{groupId:"config",children:[(0,i.jsx)(a.A,{value:"standard",label:"Standard",default:!0,children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      class AssertFileNotEmpty\n        include ApplicationService::Config\n        -\n        attr_accessor :path\n        -\n        def initialize(path:)\n          @path = path\n        end\n        -\n        def result\n          return error("Path is `nil`") if path.nil?\n          return error("Path is empty") if path.empty?\n          -\n          return failure("File is empty at path `#{path}`") if ::File.zero?(path)\n          -\n          success\n        end\n      end\n    '})}),(0,i.jsx)(a.A,{value:"rails",label:"Rails",children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      class AssertFileNotEmpty\n        include RailsService::Config\n        -\n        attribute :path, :string\n        -\n        validates :path, presence: true\n        -\n        def result\n          return failure("File is empty at path `#{path}`") if ::File.zero?(path)\n          -\n          success\n        end\n      end\n    '})}),(0,i.jsx)(a.A,{value:"dry",label:"Dry",children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      class AssertFileNotEmpty\n        include DryService::Config\n        -\n        option :path\n        -\n        contract do\n          schema do\n            required(:path).value(:string)\n          end\n        end\n        -\n        def result\n          return failure("File is empty at path `#{path}`") if ::File.zero?(path)\n          -\n          success\n        end\n      end\n    '})}),(0,i.jsx)(a.A,{value:"custom",label:"Custom",children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      class AssertFileNotEmpty\n        include CustomService::Config\n        -\n        option :path\n        -\n        validates :path, presence: true\n        -\n        def result\n          return failure("File is empty at path `#{path}`") if ::File.zero?(path)\n          -\n          success\n        end\n      end\n    '})})]}),"\n",(0,i.jsx)(l.A,{language:"ruby",children:'result = AssertFileNotEmpty.result(path: "Gemfile")'}),"\n",(0,i.jsxs)(s.A,{groupId:"config",children:[(0,i.jsx)(a.A,{value:"standard",label:"Standard",default:!0,children:(0,i.jsx)(l.A,{language:"ruby",children:'\n      class ReadFileContent\n        include ApplicationService::Config\n        -\n        attr_reader :path\n        -\n        step :validate_path\n        step AssertFileExists, in: :path\n        step AssertFileNotEmpty, in: :path\n        step :result, in: :path, out: :content\n        -\n        def initialize(path:)\n          @path = path\n        end\n        -\n        def result\n          success(content: ::File.read(path))\n        end\n        -\n        private\n        -\n        def validate_path\n          return error("Path is `nil`") if path.nil?\n          return error("Path is empty") if path.empty?\n          -\n          success\n        end\n      end\n    '})}),(0,i.jsx)(a.A,{value:"rails",label:"Rails",children:(0,i.jsx)(l.A,{language:"ruby",children:"\n      class ReadFileContent\n        include RailsService::Config\n        -\n        attribute :path, :string\n        -\n        validates :path, presence: true\n        -\n        step AssertFileExists, in: :path\n        step AssertFileNotEmpty, in: :path\n        step :result, in: :path, out: :content\n        -\n        def result\n          success(content: ::File.read(path))\n        end\n      end\n    "})}),(0,i.jsx)(a.A,{value:"dry",label:"Dry",children:(0,i.jsx)(l.A,{language:"ruby",children:"\n      class ReadFileContent\n        include DryService::Config\n        -\n        option :path\n        -\n        contract do\n          schema do\n            required(:path).value(:string)\n          end\n        end\n        -\n        step AssertFileExists, in: :path\n        step AssertFileNotEmpty, in: :path\n        step :result, in: :path, out: :content\n        -\n        def result\n          success(content: ::File.read(path))\n        end\n      end\n    "})}),(0,i.jsx)(a.A,{value:"custom",label:"Custom",children:(0,i.jsx)(l.A,{language:"ruby",children:"\n      class ReadFileContent\n        include CustomService::Config\n        -\n        option :path\n        -\n        validates :path, presence: true\n        -\n        step AssertFileExists, in: :path\n        step AssertFileNotEmpty, in: :path\n        step :result, in: :path, out: :content\n        -\n        def result\n          success(content: ::File.read(path))\n        end\n      end\n    "})})]}),"\n",(0,i.jsx)(l.A,{language:"ruby",children:'result = ReadFileContent.result(path: "Gemfile")'}),"\n",(0,i.jsx)(n.h2,{id:"more-examples",children:"More examples"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Source Code"}),(0,i.jsx)(n.th,{children:"RSpec Specs"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://github.com/marian13/convenient_service/tree/main/lib/convenient_service/examples",children:"lib/convenient_service/examples"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://github.com/marian13/convenient_service/tree/main/spec/lib/convenient_service/examples",children:"spec/lib/convenient_service"})})]})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(v,{...e})}):v(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var i=t(4164);const r={tabItem:"tabItem_Ymn6"};var s=t(4848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,a),hidden:t,children:n})}},1470:(e,n,t)=>{t.d(n,{A:()=>_});var i=t(6540),r=t(4164),s=t(3104),a=t(6347),l=t(205),o=t(7485),u=t(1682),c=t(679);function d(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function v(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const r=(0,a.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=p(e),[a,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!v({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:s}))),[u,d]=h({queryString:t,groupId:r}),[m,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,c.Dv)(t);return[r,(0,i.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),f=(()=>{const e=u??m;return v({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{f&&o(f)}),[f]);return{selectedValue:a,selectValue:(0,i.useCallback)((e=>{if(!v({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),g(e)}),[d,g,s]),tabValues:s}}var g=t(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(4848);function x(e){let{className:n,block:t,selectedValue:i,selectValue:a,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.a_)(),c=e=>{const n=e.currentTarget,t=o.indexOf(n),r=l[t].value;r!==i&&(u(n),a(r))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>o.push(e),onKeyDown:d,onClick:c,...s,className:(0,r.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function A(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function C(e){const n=m(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,b.jsx)(x,{...n,...e}),(0,b.jsx)(A,{...n,...e})]})}function _(e){const n=(0,g.A)();return(0,b.jsx)(C,{...e,children:d(e.children)},String(n))}},4428:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var i=t(1432),r=t(4848);const s=e=>{let n=e.toString().split("\n");n=""===n[0]?n.slice(1):n;const t=n.find((e=>e.length)).search(/[^ ]/),i=-1===t?0:t;return n.map((e=>e.trimEnd())).map((e=>"-"===e.trimStart()?"":e)).map((e=>e.slice(i))).join("\n")};function a(e){let{children:n,...t}=e;return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(i.A,{...t,children:s(n)})})}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);