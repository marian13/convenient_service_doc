"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[3142],{84:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>t,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>a});var n=r(4848),i=r(8453);const c={slug:"/guides/usage/how_to_use_results",sidebar_position:2,title:"How to use service results?"},l=void 0,o={id:"guides/usage/how_to_use_results",title:"How to use service results?",description:"Which result types/statuses are available?",source:"@site/docs/guides/usage/how_to_use_results.mdx",sourceDirName:"guides/usage",slug:"/guides/usage/how_to_use_results",permalink:"/guides/usage/how_to_use_results",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/usage/how_to_use_results.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/guides/usage/how_to_use_results",sidebar_position:2,title:"How to use service results?"},sidebar:"docs",previous:{title:"How to create and invoke services?",permalink:"/guides/usage/how_to_create_and_invoke_services"},next:{title:"How to use service steps?",permalink:"/guides/usage/how_to_use_steps"}},t={},a=[{value:"Which result types/statuses are available?",id:"which-result-typesstatuses-are-available",level:2},{value:"How to create <code>success</code> result?",id:"how-to-create-success-result",level:2},{value:"How to pass <code>data</code> to <code>success</code> result?",id:"how-to-pass-data-to-success-result",level:2},{value:"How to access <code>success</code> result <code>data</code>?",id:"how-to-access-success-result-data",level:2},{value:"How to create <code>failure</code> or <code>error</code> results?",id:"how-to-create-failure-or-error-results",level:2},{value:"How to access <code>failure</code> or <code>error</code> result <code>message</code>?",id:"how-to-access-failure-or-error-result-message",level:2},{value:"How to check result status?",id:"how-to-check-result-status",level:2},{value:"How to check for specific <code>failure</code> or <code>error</code>?",id:"how-to-check-for-specific-failure-or-error",level:2},{value:"When to use <code>success</code> results?",id:"when-to-use-success-results",level:2},{value:"When to use <code>failure</code> results?",id:"when-to-use-failure-results",level:2},{value:"When to use <code>error</code> results?",id:"when-to-use-error-results",level:2},{value:"How to decide between <code>success</code>, <code>failure</code>, and <code>error</code> results?",id:"how-to-decide-between-success-failure-and-error-results",level:2}];function d(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h2,{id:"which-result-typesstatuses-are-available",children:"Which result types/statuses are available?"}),"\n",(0,n.jsxs)(s.p,{children:["There are only ",(0,n.jsx)(s.a,{href:"/faq/why_both_failure_and_error",children:"3 available statuses"})," for service results."]}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"success"})," status is when the service goal is resolved positively."]}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"failure"})," status is when a service goal is resolved negatively."]}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"error"})," status is when the service goal is not resolved. Additional moves are required to get a ",(0,n.jsx)(s.code,{children:"failure"})," or ",(0,n.jsx)(s.code,{children:"success"})," instead."]}),"\n",(0,n.jsxs)(s.h2,{id:"how-to-create-success-result",children:["How to create ",(0,n.jsx)(s.code,{children:"success"})," result?"]}),"\n",(0,n.jsxs)(s.p,{children:["Just call the ",(0,n.jsx)(s.code,{children:"success"})," instance method and return it from ",(0,n.jsx)(s.code,{children:"result"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n"})}),"\n",(0,n.jsxs)(s.h2,{id:"how-to-pass-data-to-success-result",children:["How to pass ",(0,n.jsx)(s.code,{children:"data"})," to ",(0,n.jsx)(s.code,{children:"success"})," result?"]}),"\n",(0,n.jsxs)(s.p,{children:["To be explicit, you may use the ",(0,n.jsx)(s.code,{children:"data"})," keyword."]}),"\n",(0,n.jsxs)(s.p,{children:["It accepts a hash with ",(0,n.jsx)(s.a,{href:"https://ruby-doc.org/core-2.7.0/Symbol.html",children:"Symbol"})," keys and any values."]}),"\n",(0,n.jsx)(s.p,{children:"Like in the service below."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    success(data: {foo: :bar, baz: :qux})\n  end\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:"But it is more common to omit it."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    success(foo: :bar, baz: :qux)\n  end\nend\n"})}),"\n",(0,n.jsxs)(s.h2,{id:"how-to-access-success-result-data",children:["How to access ",(0,n.jsx)(s.code,{children:"success"})," result ",(0,n.jsx)(s.code,{children:"data"}),"?"]}),"\n",(0,n.jsxs)(s.p,{children:["Utilize round brackes ",(0,n.jsx)(s.code,{children:"[]"})," on the result ",(0,n.jsx)(s.code,{children:"data"})," object."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"result = Service.result\n\nif result.success?\n  result.data[:foo]\n  # => bar\nend\n"})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsx)(s.p,{children:"A self-explanatory exception is raised when data is accessed before the status is checked."}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"result = Service.result\n\nresult.data[:foo]\n# => Raises exception since result status is NOT checked...\n"})}),(0,n.jsx)(s.p,{children:"That is by design."}),(0,n.jsx)(s.p,{children:"The intention is to encourage developers to think about fallbacks from the beginning."}),(0,n.jsxs)(s.p,{children:["For example, to define reasonable ",(0,n.jsx)(s.code,{children:"else"}),"."]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"if result.success?\n  result.data[:foo]\n  # => bar\nelse\n  # Fallback.\nend\n"})}),(0,n.jsxs)(s.p,{children:["Or to check for ",(0,n.jsx)(s.code,{children:"failure"})," and ",(0,n.jsx)(s.code,{children:"error"})," as well."]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"if result.success?\n  result.data[:foo]\n  # => bar\nelsif result.failure?\n  # Some fallback.\nelse # result.error?\n  # Some other fallback.\nend\n"})})]}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsx)(s.p,{children:"A self-explanatory exception is raised when a missing data key is accessed."}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"result = Service.result\n\nif result.success?\n  result.data[:missing_key]\n  # => Raises exception since data has NO value by `:missing_key` key...\nend\n"})}),(0,n.jsx)(s.p,{children:"That is also by design."}),(0,n.jsx)(s.p,{children:"The intention is to highligh typos during development, so that they are fixed earlier."})]}),"\n",(0,n.jsxs)(s.h2,{id:"how-to-create-failure-or-error-results",children:["How to create ",(0,n.jsx)(s.code,{children:"failure"})," or ",(0,n.jsx)(s.code,{children:"error"})," results?"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"failures"})," and ",(0,n.jsx)(s.code,{children:"errors"})," have similar public interface."]}),"\n",(0,n.jsx)(s.p,{children:"That is why it makes sence to explain them together."}),"\n",(0,n.jsxs)(s.p,{children:["So in order to create a ",(0,n.jsx)(s.code,{children:"failure"})," or ",(0,n.jsx)(s.code,{children:"error"})," - invoke the corresponding instance method, pass a ",(0,n.jsx)(s.code,{children:"message"})," to it, and return its value from ",(0,n.jsx)(s.code,{children:"result"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["This is an example for ",(0,n.jsx)(s.code,{children:"failure"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    failure(message: "Some business rule is NOT satisfied")\n  end\nend\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This is how to create ",(0,n.jsx)(s.code,{children:"error"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    error(message: "Something forbided service goal to be resolved")\n  end\nend\n'})}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"message"})," keyword can be omitted."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'def result\n  failure("Some business rule is NOT satisfied")\nend\n'})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'def result\n  error("Something forbided service goal to be resolved")\nend\n'})}),"\n",(0,n.jsxs)(s.h2,{id:"how-to-access-failure-or-error-result-message",children:["How to access ",(0,n.jsx)(s.code,{children:"failure"})," or ",(0,n.jsx)(s.code,{children:"error"})," result ",(0,n.jsx)(s.code,{children:"message"}),"?"]}),"\n",(0,n.jsxs)(s.p,{children:["Utilize the result ",(0,n.jsx)(s.code,{children:"message"})," object."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'result = Service.result\n\nif result.success?\n  # ...\nelsif result.failure?\n  result.message\n  # => "Some business rule is NOT satisfied"\nelse # result.error?\n  result.message\n  # => "Something forbided service goal to be resolved"\nend\n'})}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsx)(s.p,{children:"A self-explanatory exception is raised when message is accessed before the status is checked."}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"result = Service.result\n\nresult.message\n# => Raises exception since result status is NOT checked...\n"})}),(0,n.jsxs)(s.p,{children:["The motivation is to discourage checks like ",(0,n.jsx)(s.code,{children:"if result.message.empty?"}),"."]})]}),"\n",(0,n.jsx)(s.h2,{id:"how-to-check-result-status",children:"How to check result status?"}),"\n",(0,n.jsx)(s.p,{children:"Check the comprehensive list of commands below."}),"\n",(0,n.jsx)(s.p,{children:"To make them more demonstrative, let's introduce the following minimalistic services."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class SuccessService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"SuccessService"})," always returns ",(0,n.jsx)(s.code,{children:"success"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class FailureService\n  include ConvenientService::Standard::Config\n\n  def result\n    failure\n  end\nend\n"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"FailureService"})," always returns ",(0,n.jsx)(s.code,{children:"failure"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class ErrorServices\n  include ConvenientService::Standard::Config\n\n  def result\n    error\n  end\nend\n"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"ErrorServices"})," always returns ",(0,n.jsx)(s.code,{children:"error"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Having that information status checkers work as follows:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"SuccessService.result.success?\n# => true\n\nFailureService.result.success?\n# => false\n\nErrorService.result.success?\n# => false\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"SuccessService.result.failure?\n# => false\n\nFailureService.result.failure?\n# => true\n\nErrorService.result.failure?\n# => false\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"SuccessService.result.error?\n# => false\n\nFailureService.result.error?\n# => false\n\nErrorService.result.error?\n# => true\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Also ",(0,n.jsx)(s.code,{children:"not"})," counterparts are available."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"SuccessService.result.not_success?\n# => false\n\nFailureService.result.not_success?\n# => true\n\nErrorService.result.not_success?\n# => true\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"SuccessService.result.not_failure?\n# => true\n\nFailureService.result.not_failure?\n# => false\n\nErrorService.result.not_failure?\n# => true\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"SuccessService.result.not_error?\n# => true\n\nFailureService.result.not_error?\n# => true\n\nErrorService.result.not_error?\n# => false\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For people who like to save every keyboard stroke - a shorter equivalent is available for ",(0,n.jsx)(s.code,{children:"success"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["It is just ",(0,n.jsx)(s.code,{children:"ok"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"SuccessService.result.ok?\n# => true\n\nFailureService.result.ok?\n# => false\n\nErrorService.result.ok?\n# => false\n"})}),"\n",(0,n.jsx)(s.p,{children:"And the opposite for it."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"SuccessService.result.not_ok?\n# => false\n\nFailureService.result.not_ok?\n# => true\n\nErrorService.result.not_ok?\n# => true\n"})}),"\n",(0,n.jsxs)(s.h2,{id:"how-to-check-for-specific-failure-or-error",children:["How to check for specific ",(0,n.jsx)(s.code,{children:"failure"})," or ",(0,n.jsx)(s.code,{children:"error"}),"?"]}),"\n",(0,n.jsx)(s.p,{children:"No. You don't need to match regular expressions by yourself."}),"\n",(0,n.jsxs)(s.p,{children:["Something like ",(0,n.jsx)(s.code,{children:"result.message.to_s.match?(/Business Rule/)"})," is NOT the way to go."]}),"\n",(0,n.jsxs)(s.p,{children:["Please, consider the ",(0,n.jsx)(s.code,{children:"code"})," keyword."]}),"\n",(0,n.jsx)(s.p,{children:"Here is a quick demonstration."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'class Service\n  include ConvenientService::Standard::Config\n\n  attr_reader :number\n\n  def initialize(number:)\n    @number = number\n  end\n\n  def result\n    return error(message: "Message for `foo`", code: :foo) if number == 1\n    return error(message: "Message for `bar`", code: :bar) if number == 2\n\n    return failure(message: "Message for `baz`", code: :baz) if number == 3\n    return failure(message: "Message for `qux`", code: :qux) if number == 4\n\n    success\n  end\nend\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Depending on the input ",(0,n.jsx)(s.code,{children:"number"}),", the service above returns various ",(0,n.jsx)(s.code,{children:"failures"})," and ",(0,n.jsx)(s.code,{children:"errors"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"A shorter form is also available."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'def result\n  return error("Message for `foo`", :foo) if number == 1\n  return error("Message for `bar`", :bar) if number == 2\n\n  return failure("Message for `baz`", :baz) if number == 3\n  return failure("Message for `qux`", :qux) if number == 4\n\n  success\nend\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This is how you can differentiate those ",(0,n.jsx)(s.code,{children:"failures"})," and ",(0,n.jsx)(s.code,{children:"errors"})," on the calling code."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'result = Service.result(number: 4)\n\nif result.success?\n  # ...\nelsif result.failure?\n  if result.code.to_sym == :baz\n    result.message\n    # => "Message for `baz`"\n  elsif result.code.to_sym == :qux\n    result.message\n    # => "Message for `qux`"\n  else\n    # ...\n  end\nelse # result.error?\n  if result.code.to_sym == :foo\n    result.message\n    # => "Message for `foo`"\n  elsif result.code.to_sym == :bar\n    result.message\n    # => "Message for `bar`"\n  else\n    # ...\n  end\nend\n'})}),"\n",(0,n.jsx)(s.p,{children:"Sure, this snippet is not the prettiest, but currently, there is NO alternative."}),"\n",(0,n.jsxs)(s.p,{children:["Optimization like the following (API is still subject to change) is planned for the subsequent ",(0,n.jsx)(s.a,{href:"/",children:"Convenient Service"})," releases."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"result = Service.result(number: 4)\n\nresult.respond_to do |status|\n  status.success { }\n\n  status.failure(code: :baz) { }\n  status.failure(code: :qux) { }\n\n  status.error(code: :foo) { }\n  status.error(code: :bar) { }\n\n  status.unexpected { }\nend\n"})}),"\n",(0,n.jsxs)(s.h2,{id:"when-to-use-success-results",children:["When to use ",(0,n.jsx)(s.code,{children:"success"})," results?"]}),"\n",(0,n.jsx)(s.p,{children:"When you have a 100% guarantee that the service's desired outcome is achieved."}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(s.p,{children:["In other words, all ",(0,n.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Business_rule",children:"business rules"})," are satisfied and the service's actual operation is completed."]})}),"\n",(0,n.jsxs)(s.h2,{id:"when-to-use-failure-results",children:["When to use ",(0,n.jsx)(s.code,{children:"failure"})," results?"]}),"\n",(0,n.jsx)(s.p,{children:"When you have a 100% guarantee that the service's desired outcome is NOT achieved."}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(s.p,{children:["In other words, some ",(0,n.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Business_rule",children:"business rule"})," is NOT satisfied."]})}),"\n",(0,n.jsxs)(s.h2,{id:"when-to-use-error-results",children:["When to use ",(0,n.jsx)(s.code,{children:"error"})," results?"]}),"\n",(0,n.jsx)(s.p,{children:"When you don't have any guarantee that the service's desired outcome was even tried to be completely achieved."}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(s.p,{children:["In other words, some ",(0,n.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Business_rule",children:"business rule"})," check is NOT completed or the service's actual operation is NOT completed."]})}),"\n",(0,n.jsxs)(s.h2,{id:"how-to-decide-between-success-failure-and-error-results",children:["How to decide between ",(0,n.jsx)(s.code,{children:"success"}),", ",(0,n.jsx)(s.code,{children:"failure"}),", and ",(0,n.jsx)(s.code,{children:"error"})," results?"]}),"\n",(0,n.jsx)(s.p,{children:"Let's consider the following service."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'class AddRole\n  include ConvenientService::Standard::Config\n\n  attr_reader :user, :role_name\n\n  def initialize(user:, role_name:)\n    @user = user\n    @role_name = role_name\n  end\n\n  def result\n    return error("User is blank") if user.blank?\n    return error("Role name is blank") if role_name.blank?\n\n    return failure("User(#{user.id}) already has `#{role_name}` role") if user.has_role?(role_name) # Business rule.\n    return failure("User(#{user.id}) reputation is too low for `#{role_name}` role") if user.reputation.low? && role_name == :admin # Business rule.\n\n    user.add_role(role_name) # Service actual operation.\n\n    success\n  rescue DB::ConnectionTimeout => exception\n    error("DB connection is lost due to `#{exception.message}`")\n  end\nend\n'})}),"\n",(0,n.jsxs)(s.p,{children:["As its name states, the ",(0,n.jsx)(s.code,{children:"AddRole"})," service is responsible for the addition of a role to a particular user."]}),"\n",(0,n.jsxs)(s.p,{children:["Thus successfully added role is its ",(0,n.jsx)(s.a,{href:"/basics/service_goals",children:"service goal"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"AddRole"})," can be easily invoked like so:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"result = AddRole.result(user: User.find(1), role_name: :admin)\n"})}),"\n",(0,n.jsxs)(s.p,{children:["When the ",(0,n.jsx)(s.code,{children:"success"})," result is returned, you are confident that the role is added."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"result.success?\n# => true\n"})}),"\n",(0,n.jsxs)(s.p,{children:["When the ",(0,n.jsx)(s.code,{children:"failure"})," result is returned, you are confident that the role is NOT added."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"result.failure?\n# => true\n"})}),"\n",(0,n.jsx)(s.p,{children:"As a significant bonus, you immediately receive the exact logical reason that clearly explains what forbade the role addition."}),"\n",(0,n.jsx)(s.p,{children:"For this concrete service, it is the fact that the user already has the passed role."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'result.message\n# => "User(1) already has `admin` role"\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Or the fact that the user's reputation is too low for the ",(0,n.jsx)(s.code,{children:"admin"})," role."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'result.message\n# => "User(1) reputation is too low for `admin` role"\n'})}),"\n",(0,n.jsx)(s.p,{children:"So you can quickly report that reason to the interested people without additional debugging sessions."}),"\n",(0,n.jsxs)(s.p,{children:["When the ",(0,n.jsx)(s.code,{children:"error"})," result is returned, you obtain NO new information about the service goal."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"result.error?\n# => true\n"})}),"\n",(0,n.jsx)(s.p,{children:"As you had NO idea whether it was possible or impossible to add the role before running the service."}),"\n",(0,n.jsx)(s.p,{children:"The same question remains open and unresolved after executing the service."}),"\n",(0,n.jsxs)(s.p,{children:["Strictly speaking, the ",(0,n.jsx)(s.code,{children:"error"})," result notifies that the only way to get the reliable service goal outcome is to rerun the service with changed inputs or to retry later."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"AddRole"})," has multiple errors."]}),"\n",(0,n.jsx)(s.p,{children:"The first two of them are unsatisfied input validations."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'result.message\n# => "User is blank"\n'})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'result.message\n# => "Role name is blank"\n'})}),"\n",(0,n.jsx)(s.p,{children:"Usually, they indicate that a developer (service user) who was invoking the service made a mistake by providing incorrect inputs."}),"\n",(0,n.jsx)(s.p,{children:"That is why they should be changed before rerunning the service."}),"\n",(0,n.jsx)(s.p,{children:"The last one is a database exception."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'result.message\n# => "DB connection is lost due to `Default timeout exceeded`"\n'})}),"\n",(0,n.jsx)(s.p,{children:"Such an error may show that the runtime infrastructure is not stable."}),"\n",(0,n.jsx)(s.p,{children:"That is why retrying again later may be an option."}),"\n",(0,n.jsxs)(s.p,{children:["Similarly to ",(0,n.jsx)(s.code,{children:"failures"}),", ",(0,n.jsx)(s.code,{children:"errors"})," also have messages that clearly explain the reasons for what went wrong."]}),"\n",(0,n.jsx)(s.p,{children:"But, this time they are just hints about where to proceed with debugging, not the reliable facts about service goal resolution."})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>l,x:()=>o});var n=r(6540);const i={},c=n.createContext(i);function l(e){const s=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);