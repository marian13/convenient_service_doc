"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[2372],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(a),m=r,k=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return a?n.createElement(k,o(o({ref:t},u),{},{components:a})):n.createElement(k,o({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3616:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const s={slug:"/basics/results_are_ducks",sidebar_position:7,title:"Results are Ducks"},o=void 0,i={unversionedId:"basics/results_are_ducks",id:"basics/results_are_ducks",title:"Results are Ducks",description:"Why Results are Ducks?",source:"@site/docs/basics/results_are_ducks.mdx",sourceDirName:"basics",slug:"/basics/results_are_ducks",permalink:"/convenient_service_docs/basics/results_are_ducks",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/basics/results_are_ducks.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{slug:"/basics/results_are_ducks",sidebar_position:7,title:"Results are Ducks"},sidebar:"docs",previous:{title:"Success",permalink:"/convenient_service_docs/basics/success"},next:{title:"Steps",permalink:"/convenient_service_docs/basics/steps"}},l={},c=[{value:"Why Results are Ducks?",id:"why-results-are-ducks",level:2}],u={toc:c};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"why-results-are-ducks"},"Why Results are Ducks?"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck."),(0,r.kt)("p",{parentName:"blockquote"},"\u2014 Duck test")),(0,r.kt)("p",null,"Results are Ducks in the sense that no matter whether you have ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"failure"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," - all of them have the same interface with reasonable defaults."),(0,r.kt)("p",null,"Here is a comparison table:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"data"),(0,r.kt)("th",{parentName:"tr",align:null},"message"),(0,r.kt)("th",{parentName:"tr",align:null},"code"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"success"),(0,r.kt)("td",{parentName:"tr",align:null},"*data or ",(0,r.kt)("inlineCode",{parentName:"td"},"{}")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},":default_success"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"failure"),(0,r.kt)("td",{parentName:"tr",align:null},"*data or ",(0,r.kt)("inlineCode",{parentName:"td"},"{}")),(0,r.kt)("td",{parentName:"tr",align:null},"first value from *data or ",(0,r.kt)("inlineCode",{parentName:"td"},'""')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},":default_failure"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"error"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}")),(0,r.kt)("td",{parentName:"tr",align:null},"*message or ",(0,r.kt)("inlineCode",{parentName:"td"},'""')),(0,r.kt)("td",{parentName:"tr",align:null},"*code or ",(0,r.kt)("inlineCode",{parentName:"td"},":default_error"))))),(0,r.kt)("p",null,"Where ","*"," means ",(0,r.kt)("em",{parentName:"p"},"user-provided"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"As a user, you have the ability to pass custom values for everything, e.g: extraordinary code for failures."),(0,r.kt)("p",{parentName:"admonition"},"We (as library designers) left such a possibility to avoid the ",(0,r.kt)("a",{parentName:"p",href:"https://refactoring.guru/smells/incomplete-library-class"},"Incomplete Library Class")," code smell."),(0,r.kt)("p",{parentName:"admonition"},"But to be honest, we don't see any valuable use cases for now.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Actually, ",(0,r.kt)("a",{parentName:"p",href:"./"},"Convenient Service")," utilizes ",(0,r.kt)("a",{parentName:"p",href:"https://www.justinweiss.com/articles/a-decorator-vs-a-subclass/"},"look-alike wrappers")," for data, message, and code."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"{}"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'""')," and ",(0,r.kt)("inlineCode",{parentName:"p"},":symbol")," notations are used to not overcomplicate the table with too low-level details.")),(0,r.kt)("p",null,"As a consequence, you can be confident that any (adequate) status check (like ",(0,r.kt)("inlineCode",{parentName:"p"},"success?"),") is enough to proceed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def show\n  # ...\n\n  # Status is logically checked somewhere.\n  result.success?\n\n  # n lines of code later...\n\n  # Won't crash since all `success`, `failure` and `error` respond to `data` and have reasonable defaults.\n  result.data\n\n  # Won't crash since all `success`, `failure` and `error` respond to `message` and have reasonable defaults.\n  result.message\n\n  # Won't crash since all `success`, `failure` and `error` respond to `code` and have reasonable defaults.\n  result.code\n\n  # ...\nend\n")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"When you forget to check the result status before accessing any of its attributes - an exception is raised."),(0,r.kt)("p",{parentName:"admonition"},"That is intentional in order to motivate a user to think not only about a happy path but about negative cases as well."),(0,r.kt)("p",{parentName:"admonition"},"For example:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"delivery_result = OrderFoodDelivery.result\n\n# Oh, raises `... Result::Errors::StatusIsNotChecked` since (as its name states) status is not checked.\n# How can you eat something if you don't even know whether it is already delivered or not \ud83d\ude42?\nclient.eat(delivery_result.data[:food])\n"))))}d.isMDXComponent=!0}}]);