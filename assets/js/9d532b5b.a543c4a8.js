"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[7045],{3265:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>s});var r=a(4848),d=a(8453);const t={slug:"/glossary/advanced/decorator_middleware",sidebar_position:2,title:"Decorator Middleware"},o=void 0,i={id:"glossary/advanced/decorator_middleware",title:"Decorator Middleware",description:"A decorator middleware is a kind of middleware that always calls the next middleware in a chain.",source:"@site/docs/glossary/advanced/decorator_middleware.mdx",sourceDirName:"glossary/advanced",slug:"/glossary/advanced/decorator_middleware",permalink:"/glossary/advanced/decorator_middleware",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/glossary/advanced/decorator_middleware.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/glossary/advanced/decorator_middleware",sidebar_position:2,title:"Decorator Middleware"},sidebar:"docs",previous:{title:"Advanced",permalink:"/category/advanced-2"},next:{title:"Proxy Middleware",permalink:"/glossary/advanced/proxy_middleware"}},c={},s=[];function l(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"A decorator middleware is a kind of middleware that always calls the next middleware in a chain."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"HasCallbacks"})," is a good example."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"module ConvenientService\n  module Common\n    module Plugins\n      module HasCallbacks\n        class Middleware < Core::MethodChainMiddleware\n          # ...\n          # highlight-start\n          def next(...)\n            entity.callbacks.for([:before, method]).each { |callback| callback.call_in_context(entity) }\n\n            original_value = chain.next(...)\n\n            entity.callbacks.for([:after, method]).reverse_each { |callback| callback.call_in_context(entity, original_value) }\n\n            original_value\n          end\n          # highlight-end\n          # ...\n        end\n      end\n    end\n  end\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["It triggers before callbacks, then ",(0,r.jsx)(n.code,{children:"chain.next(...)"}),", and later after callbacks."]}),"\n",(0,r.jsxs)(n.p,{children:["There are no conditionals that may skip ",(0,r.jsx)(n.code,{children:"chain.next(...)"})," invocation."]}),"\n",(0,r.jsxs)(n.p,{children:["That is why this middleware is considered ",(0,r.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/decorator",children:"decorator"})," middleware."]}),"\n",(0,r.jsxs)(n.p,{children:["In contrast, ",(0,r.jsx)(n.a,{href:"/glossary/advanced/proxy_middleware",children:"proxy middlewares"})," may not call ",(0,r.jsx)(n.code,{children:"chain.next"})," if needed."]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var r=a(6540);const d={},t=r.createContext(d);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);