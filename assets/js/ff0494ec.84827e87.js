"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[2910],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,_=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(_,s(s({ref:t},p),{},{components:n})):r.createElement(_,s({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6693:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905)),i=n(4996);const s={slug:"/troubleshooting/awesome_print_inspect_does_not_colorize_results",sidebar_position:1,title:"`AwesomePrintInspect` does not colorize results"},a=void 0,l={unversionedId:"troubleshooting/awesome_print_inspect_does_not_colorize_results",id:"troubleshooting/awesome_print_inspect_does_not_colorize_results",title:"`AwesomePrintInspect` does not colorize results",description:"Consider a service that includes the AwesomePrintInspect config.",source:"@site/docs/troubleshooting/awesome_print_inspect_does_not_colorize_results.mdx",sourceDirName:"troubleshooting",slug:"/troubleshooting/awesome_print_inspect_does_not_colorize_results",permalink:"/troubleshooting/awesome_print_inspect_does_not_colorize_results",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/troubleshooting/awesome_print_inspect_does_not_colorize_results.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/troubleshooting/awesome_print_inspect_does_not_colorize_results",sidebar_position:1,title:"`AwesomePrintInspect` does not colorize results"},sidebar:"docs",previous:{title:"Troubleshooting",permalink:"/category/troubleshooting"},next:{title:"`AmazingPrintInspect` does not colorize",permalink:"/troubleshooting/amazing_print_inspect_does_not_colorize"}},c={},p=[],u={toc:p};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Consider a service that includes the ",(0,o.kt)("inlineCode",{parentName:"p"},"AwesomePrintInspect")," config."),(0,o.kt)("p",null,"Here is the minimal example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"ConvenientService::Dependencies.require_awesome_print_inspect\n\nclass Service\n  include ::ConvenientService::Standard::Config\n  include ::ConvenientService::AwesomePrintInspect::Config\n\n  def result\n    success(foo: :bar, baz: :qux)\n  end\nend\n")),(0,o.kt)("p",null,"When it is called from the console like ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ruby/irb"},"IRB"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"Service.result\n")),(0,o.kt)("p",null,"The result should be pretty-printed by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/awesome-print/awesome_print"},"awesome_print"),"."),(0,o.kt)("p",null,"But it actually outputs some ",(0,o.kt)("a",{parentName:"p",href:"https://colors.sh"},'"weird escape characters"')," ",(0,o.kt)("inlineCode",{parentName:"p"},"^[[0;37m"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"^[[0m")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"^[[0;33m")," like in the screenshot below."),(0,o.kt)("img",{src:(0,i.Z)("./img/troubleshooting/awesome_print_inspect_does_not_colorize_results/weird_escape_characters.png")}),(0,o.kt)("p",null,"One way to fix that problem is to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/awesome-print/awesome_print?tab=readme-ov-file#irb-integration"},"activate Awesome Print IRB integration"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"AwesomePrint.irb!\n")),(0,o.kt)("p",null,"Thus the output is colorized as expected."),(0,o.kt)("img",{src:(0,i.Z)("./img/troubleshooting/awesome_print_inspect_does_not_colorize_results/proper_coloring.png")}),(0,o.kt)("p",null,"In case you are using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pry/pry"},"Pry"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/awesome-print/awesome_print?tab=readme-ov-file#pry-integration"},"Awesome Print has integration for it")," as well."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"AwesomePrint.pry!\n")))}m.isMDXComponent=!0}}]);