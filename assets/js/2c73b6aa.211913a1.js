"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[9841],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),m=a,k=p["".concat(i,".").concat(m)]||p[m]||d[m]||s;return r?n.createElement(k,o(o({ref:t},c),{},{components:r})):n.createElement(k,o({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<s;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5320:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const s={slug:"/guides/usage/how_to_use_results",sidebar_position:2,title:"How to use service results?"},o=void 0,l={unversionedId:"guides/usage/how_to_use_results",id:"guides/usage/how_to_use_results",title:"How to use service results?",description:"Which result types/statuses are available?",source:"@site/docs/guides/usage/how_to_use_results.mdx",sourceDirName:"guides/usage",slug:"/guides/usage/how_to_use_results",permalink:"/guides/usage/how_to_use_results",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/usage/how_to_use_results.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/guides/usage/how_to_use_results",sidebar_position:2,title:"How to use service results?"},sidebar:"docs",previous:{title:"How to create and invoke services?",permalink:"/guides/usage/how_to_create_and_invoke_services"},next:{title:"How to use service steps?",permalink:"/guides/usage/how_to_use_steps"}},i={},u=[{value:"Which result types/statuses are available?",id:"which-result-typesstatuses-are-available",level:2},{value:"How to create <code>success</code> result?",id:"how-to-create-success-result",level:2},{value:"How to pass <code>data</code> to <code>success</code> result?",id:"how-to-pass-data-to-success-result",level:2},{value:"How to access <code>success</code> result <code>data</code>?",id:"how-to-access-success-result-data",level:2},{value:"How to create <code>failure</code> or <code>error</code> results?",id:"how-to-create-failure-or-error-results",level:2},{value:"How to access <code>failure</code> or <code>error</code> result <code>message</code>?",id:"how-to-access-failure-or-error-result-message",level:2},{value:"How to check result status?",id:"how-to-check-result-status",level:2},{value:"How to check for specific <code>failure</code> or <code>error</code>?",id:"how-to-check-for-specific-failure-or-error",level:2},{value:"When to use <code>success</code> results?",id:"when-to-use-success-results",level:2},{value:"When to use <code>failure</code> results?",id:"when-to-use-failure-results",level:2},{value:"When to use <code>error</code> results?",id:"when-to-use-error-results",level:2},{value:"How to decide between <code>success</code>, <code>failure</code>, and <code>error</code> results?",id:"how-to-decide-between-success-failure-and-error-results",level:2}],c={toc:u};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"which-result-typesstatuses-are-available"},"Which result types/statuses are available?"),(0,a.kt)("p",null,"There are only ",(0,a.kt)("a",{parentName:"p",href:"/faq/why_both_failure_and_error"},"3 available statuses")," for service results."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"success")," status is when the service goal is resolved positively."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"failure")," status is when a service goal is resolved negatively."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," status is when the service goal is not resolved. Additional moves are required to get a ",(0,a.kt)("inlineCode",{parentName:"p"},"failure")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"success")," instead."),(0,a.kt)("h2",{id:"how-to-create-success-result"},"How to create ",(0,a.kt)("inlineCode",{parentName:"h2"},"success")," result?"),(0,a.kt)("p",null,"Just call the ",(0,a.kt)("inlineCode",{parentName:"p"},"success")," instance method and return it from ",(0,a.kt)("inlineCode",{parentName:"p"},"result"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n")),(0,a.kt)("h2",{id:"how-to-pass-data-to-success-result"},"How to pass ",(0,a.kt)("inlineCode",{parentName:"h2"},"data")," to ",(0,a.kt)("inlineCode",{parentName:"h2"},"success")," result?"),(0,a.kt)("p",null,"To be explicit, you may use the ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," keyword."),(0,a.kt)("p",null,"It accepts a hash with ",(0,a.kt)("a",{parentName:"p",href:"https://ruby-doc.org/core-2.7.0/Symbol.html"},"Symbol")," keys and any values."),(0,a.kt)("p",null,"Like in the service below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    success(data: {foo: :bar, baz: :qux})\n  end\nend\n")),(0,a.kt)("p",null,"But it is more common to omit it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    success(foo: :bar, baz: :qux)\n  end\nend\n")),(0,a.kt)("h2",{id:"how-to-access-success-result-data"},"How to access ",(0,a.kt)("inlineCode",{parentName:"h2"},"success")," result ",(0,a.kt)("inlineCode",{parentName:"h2"},"data"),"?"),(0,a.kt)("p",null,"Utilize round brackes ",(0,a.kt)("inlineCode",{parentName:"p"},"[]")," on the result ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result = Service.result\n\nif result.success?\n  result.data[:foo]\n  # => bar\nend\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"A self-explanatory exception is raised when data is accessed before the status is checked."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result = Service.result\n\nresult.data[:foo]\n# => Raises exception since result status is NOT checked...\n")),(0,a.kt)("p",{parentName:"admonition"},"That is by design."),(0,a.kt)("p",{parentName:"admonition"},"The intention is to encourage developers to think about fallbacks from the beginning."),(0,a.kt)("p",{parentName:"admonition"},"For example, to define reasonable ",(0,a.kt)("inlineCode",{parentName:"p"},"else"),"."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"if result.success?\n  result.data[:foo]\n  # => bar\nelse\n  # Fallback.\nend\n")),(0,a.kt)("p",{parentName:"admonition"},"Or to check for ",(0,a.kt)("inlineCode",{parentName:"p"},"failure")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," as well."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"if result.success?\n  result.data[:foo]\n  # => bar\nelsif result.failure?\n  # Some fallback.\nelse # result.error?\n  # Some other fallback.\nend\n"))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"A self-explanatory exception is raised when a missing data key is accessed."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result = Service.result\n\nif result.success?\n  result.data[:missing_key]\n  # => Raises exception since data has NO value by `:missing_key` key...\nend\n")),(0,a.kt)("p",{parentName:"admonition"},"That is also by design."),(0,a.kt)("p",{parentName:"admonition"},"The intention is to highligh typos during development, so that they are fixed earlier.")),(0,a.kt)("h2",{id:"how-to-create-failure-or-error-results"},"How to create ",(0,a.kt)("inlineCode",{parentName:"h2"},"failure")," or ",(0,a.kt)("inlineCode",{parentName:"h2"},"error")," results?"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"failures")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"errors")," have similar public interface."),(0,a.kt)("p",null,"That is why it makes sence to explain them together."),(0,a.kt)("p",null,"So in order to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"failure")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," - invoke the corresponding instance method, pass a ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," to it, and return its value from ",(0,a.kt)("inlineCode",{parentName:"p"},"result"),"."),(0,a.kt)("p",null,"This is an example for ",(0,a.kt)("inlineCode",{parentName:"p"},"failure"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    failure(message: "Some business rule is NOT satisfied")\n  end\nend\n')),(0,a.kt)("p",null,"This is how to create ",(0,a.kt)("inlineCode",{parentName:"p"},"error"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    error(message: "Something forbided service goal to be resolved")\n  end\nend\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," keyword can be omitted."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'def result\n  failure("Some business rule is NOT satisfied")\nend\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'def result\n  error("Something forbided service goal to be resolved")\nend\n')),(0,a.kt)("h2",{id:"how-to-access-failure-or-error-result-message"},"How to access ",(0,a.kt)("inlineCode",{parentName:"h2"},"failure")," or ",(0,a.kt)("inlineCode",{parentName:"h2"},"error")," result ",(0,a.kt)("inlineCode",{parentName:"h2"},"message"),"?"),(0,a.kt)("p",null,"Utilize the result ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'result = Service.result\n\nif result.success?\n  # ...\nelsif result.failure?\n  result.message\n  # => "Some business rule is NOT satisfied"\nelse # result.error?\n  result.message\n  # => "Something forbided service goal to be resolved"\nend\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"A self-explanatory exception is raised when message is accessed before the status is checked."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result = Service.result\n\nresult.message\n# => Raises exception since result status is NOT checked...\n")),(0,a.kt)("p",{parentName:"admonition"},"The motivation is to discourage checks like ",(0,a.kt)("inlineCode",{parentName:"p"},"if result.message.empty?"),".")),(0,a.kt)("h2",{id:"how-to-check-result-status"},"How to check result status?"),(0,a.kt)("p",null,"Check the comprehensive list of commands below."),(0,a.kt)("p",null,"To make them more demonstrative, let's introduce the following minimalistic services."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class SuccessService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SuccessService")," always returns ",(0,a.kt)("inlineCode",{parentName:"p"},"success"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class FailureService\n  include ConvenientService::Standard::Config\n\n  def result\n    failure\n  end\nend\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FailureService")," always returns ",(0,a.kt)("inlineCode",{parentName:"p"},"failure"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class ErrorServices\n  include ConvenientService::Standard::Config\n\n  def result\n    error\n  end\nend\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ErrorServices")," always returns ",(0,a.kt)("inlineCode",{parentName:"p"},"error"),"."),(0,a.kt)("p",null,"Having that information status checkers work as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.success?\n# => true\n\nFailureService.result.success?\n# => false\n\nErrorService.result.success?\n# => false\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.failure?\n# => false\n\nFailureService.result.failure?\n# => true\n\nErrorService.result.failure?\n# => false\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.error?\n# => false\n\nFailureService.result.error?\n# => false\n\nErrorService.result.error?\n# => true\n")),(0,a.kt)("p",null,"Also ",(0,a.kt)("inlineCode",{parentName:"p"},"not")," counterparts are available."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.not_success?\n# => false\n\nFailureService.result.not_success?\n# => true\n\nErrorService.result.not_success?\n# => true\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.not_failure?\n# => true\n\nFailureService.result.not_failure?\n# => false\n\nErrorService.result.not_failure?\n# => true\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.not_error?\n# => true\n\nFailureService.result.not_error?\n# => true\n\nErrorService.result.not_error?\n# => false\n")),(0,a.kt)("p",null,"For people who like to save every keyboard stroke - a shorter equivalent is available for ",(0,a.kt)("inlineCode",{parentName:"p"},"success"),"."),(0,a.kt)("p",null,"It is just ",(0,a.kt)("inlineCode",{parentName:"p"},"ok"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.ok?\n# => true\n\nFailureService.result.ok?\n# => false\n\nErrorService.result.ok?\n# => false\n")),(0,a.kt)("p",null,"And the opposite for it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.not_ok?\n# => false\n\nFailureService.result.not_ok?\n# => true\n\nErrorService.result.not_ok?\n# => true\n")),(0,a.kt)("h2",{id:"how-to-check-for-specific-failure-or-error"},"How to check for specific ",(0,a.kt)("inlineCode",{parentName:"h2"},"failure")," or ",(0,a.kt)("inlineCode",{parentName:"h2"},"error"),"?"),(0,a.kt)("p",null,"No. You don't need to match regular expressions by yourself."),(0,a.kt)("p",null,"Something like ",(0,a.kt)("inlineCode",{parentName:"p"},"result.message.to_s.match?(/Business Rule/)")," is NOT the way to go."),(0,a.kt)("p",null,"Please, consider the ",(0,a.kt)("inlineCode",{parentName:"p"},"code")," keyword."),(0,a.kt)("p",null,"Here is a quick demonstration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class Service\n  include ConvenientService::Standard::Config\n\n  attr_reader :number\n\n  def initialize(number:)\n    @number = number\n  end\n\n  def result\n    return error(message: "Message for `foo`", code: :foo) if number == 1\n    return error(message: "Message for `bar`", code: :bar) if number == 2\n\n    return failure(message: "Message for `baz`", code: :baz) if number == 3\n    return failure(message: "Message for `qux`", code: :qux) if number == 4\n\n    success\n  end\nend\n')),(0,a.kt)("p",null,"Depending on the input ",(0,a.kt)("inlineCode",{parentName:"p"},"number"),", the service above returns various ",(0,a.kt)("inlineCode",{parentName:"p"},"failures")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"errors"),"."),(0,a.kt)("p",null,"A shorter form is also available."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'def result\n  return error("Message for `foo`", :foo) if number == 1\n  return error("Message for `bar`", :bar) if number == 2\n\n  return failure("Message for `baz`", :baz) if number == 3\n  return failure("Message for `qux`", :qux) if number == 4\n\n  success\nend\n')),(0,a.kt)("p",null,"This is how you can differentiate those ",(0,a.kt)("inlineCode",{parentName:"p"},"failures")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"errors")," on the calling code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'result = Service.result(number: 4)\n\nif result.success?\n  # ...\nelsif result.failure?\n  if result.code.to_sym == :baz\n    result.message\n    # => "Message for `baz`"\n  elsif result.code.to_sym == :qux\n    result.message\n    # => "Message for `qux`"\n  else\n    # ...\n  end\nelse # result.error?\n  if result.code.to_sym == :foo\n    result.message\n    # => "Message for `foo`"\n  elsif result.code.to_sym == :bar\n    result.message\n    # => "Message for `bar`"\n  else\n    # ...\n  end\nend\n')),(0,a.kt)("p",null,"Sure, this snippet is not the prettiest, but currently, there is NO alternative."),(0,a.kt)("p",null,"Optimization like the following (API is still subject to change) is planned for the subsequent ",(0,a.kt)("a",{parentName:"p",href:"/"},"Convenient Service")," releases."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result = Service.result(number: 4)\n\nresult.respond_to do |status|\n  status.success { }\n\n  status.failure(code: :baz) { }\n  status.failure(code: :qux) { }\n\n  status.error(code: :foo) { }\n  status.error(code: :bar) { }\n\n  status.unexpected { }\nend\n")),(0,a.kt)("h2",{id:"when-to-use-success-results"},"When to use ",(0,a.kt)("inlineCode",{parentName:"h2"},"success")," results?"),(0,a.kt)("p",null,"When you have a 100% guarantee that the service's desired outcome is achieved."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"In other words, all ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Business_rule"},"business rules")," are satisfied and the service's actual operation is completed.")),(0,a.kt)("h2",{id:"when-to-use-failure-results"},"When to use ",(0,a.kt)("inlineCode",{parentName:"h2"},"failure")," results?"),(0,a.kt)("p",null,"When you have a 100% guarantee that the service's desired outcome is NOT achieved."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"In other words, some ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Business_rule"},"business rule")," is NOT satisfied.")),(0,a.kt)("h2",{id:"when-to-use-error-results"},"When to use ",(0,a.kt)("inlineCode",{parentName:"h2"},"error")," results?"),(0,a.kt)("p",null,"When you don't have any guarantee that the service's desired outcome was even tried to be completely achieved."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"In other words, some ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Business_rule"},"business rule")," check is NOT completed or the service's actual operation is NOT completed.")),(0,a.kt)("h2",{id:"how-to-decide-between-success-failure-and-error-results"},"How to decide between ",(0,a.kt)("inlineCode",{parentName:"h2"},"success"),", ",(0,a.kt)("inlineCode",{parentName:"h2"},"failure"),", and ",(0,a.kt)("inlineCode",{parentName:"h2"},"error")," results?"),(0,a.kt)("p",null,"Let's consider the following service."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class AddRole\n  include ConvenientService::Standard::Config\n\n  attr_reader :user, :role_name\n\n  def initialize(user:, role_name:)\n    @user = user\n    @role_name = role_name\n  end\n\n  def result\n    return error("User is blank") if user.blank?\n    return error("Role name is blank") if role_name.blank?\n\n    return failure("User(#{user.id}) already has `#{role_name}` role") if user.has_role?(role_name) # Business rule.\n    return failure("User(#{user.id}) reputation is too low for `#{role_name}` role") if user.reputation.low? && role_name == :admin # Business rule.\n\n    user.add_role(role_name) # Service actual operation.\n\n    success\n  rescue DB::ConnectionTimeout => exception\n    error("DB connection is lost due to `#{exception.message}`")\n  end\nend\n')),(0,a.kt)("p",null,"As its name states, the ",(0,a.kt)("inlineCode",{parentName:"p"},"AddRole")," service is responsible for the addition of a role to a particular user."),(0,a.kt)("p",null,"Thus successfully added role is its ",(0,a.kt)("a",{parentName:"p",href:"/basics/service_goals"},"service goal"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AddRole")," can be easily invoked like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result = AddRole.result(user: User.find(1), role_name: :admin)\n")),(0,a.kt)("p",null,"When the ",(0,a.kt)("inlineCode",{parentName:"p"},"success")," result is returned, you are confident that the role is added."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result.success?\n# => true\n")),(0,a.kt)("p",null,"When the ",(0,a.kt)("inlineCode",{parentName:"p"},"failure")," result is returned, you are confident that the role is NOT added."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result.failure?\n# => true\n")),(0,a.kt)("p",null,"As a significant bonus, you immediately receive the exact logical reason that clearly explains what forbade the role addition."),(0,a.kt)("p",null,"For this concrete service, it is the fact that the user already has the passed role."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'result.message\n# => "User(1) already has `admin` role"\n')),(0,a.kt)("p",null,"Or the fact that the user's reputation is too low for the ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," role."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'result.message\n# => "User(1) reputation is too low for `admin` role"\n')),(0,a.kt)("p",null,"So you can quickly report that reason to the interested people without additional debugging sessions."),(0,a.kt)("p",null,"When the ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," result is returned, you obtain NO new information about the service goal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result.error?\n# => true\n")),(0,a.kt)("p",null,"As you had NO idea whether it was possible or impossible to add the role before running the service."),(0,a.kt)("p",null,"The same question remains open and unresolved after executing the service."),(0,a.kt)("p",null,"Strictly speaking, the ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," result notifies that the only way to get the reliable service goal outcome is to rerun the service with changed inputs or to retry later."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AddRole")," has multiple errors."),(0,a.kt)("p",null,"The first two of them are unsatisfied input validations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'result.message\n# => "User is blank"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'result.message\n# => "Role name is blank"\n')),(0,a.kt)("p",null,"Usually, they indicate that a developer (service user) who was invoking the service made a mistake by providing incorrect inputs."),(0,a.kt)("p",null,"That is why they should be changed before rerunning the service."),(0,a.kt)("p",null,"The last one is a database exception."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'result.message\n# => "DB connection is lost due to `Default timeout exceeded`"\n')),(0,a.kt)("p",null,"Such an error may show that the runtime infrastructure is not stable."),(0,a.kt)("p",null,"That is why retrying again later may be an option."),(0,a.kt)("p",null,"Similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"failures"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"errors")," also have messages that clearly explain the reasons for what went wrong."),(0,a.kt)("p",null,"But, this time they are just hints about where to proceed with debugging, not the reliable facts about service goal resolution."))}d.isMDXComponent=!0}}]);