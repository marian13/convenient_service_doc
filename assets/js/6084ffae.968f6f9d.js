"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[6759],{2407:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>a});var o=n(4848),t=n(8453);const c={slug:"/faq/why_case_when_does_not_work_with_jus_result_codes",sidebar_position:3,title:"Why `case/when` does NOT work with just result codes?"},r=void 0,i={id:"faq/why_case_when_does_not_work_with_jus_result_codes",title:"Why `case/when` does NOT work with just result codes?",description:"Sometimes it may feel idiomatic to check the result code in the following way:",source:"@site/docs/faq/why_case_when_does_not_work_with_jus_result_codes.mdx",sourceDirName:"faq",slug:"/faq/why_case_when_does_not_work_with_jus_result_codes",permalink:"/faq/why_case_when_does_not_work_with_jus_result_codes",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/faq/why_case_when_does_not_work_with_jus_result_codes.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/faq/why_case_when_does_not_work_with_jus_result_codes",sidebar_position:3,title:"Why `case/when` does NOT work with just result codes?"},sidebar:"docs",previous:{title:"Is it possible to modify the step collection from a callback?",permalink:"/faq/is_it_possible_to_modify_step_collection_from_callback"},next:{title:"Why to use Convenient Service?",permalink:"/faq/why_to_use_convenient_service"}},l={},a=[];function d(e){const s={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.p,{children:"Sometimes it may feel idiomatic to check the result code in the following way:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ruby",children:"# wrong\nif result.not_success?\n  case result.code # `result.code` returns fancy object\n  when :full_queue\n    notify_devops\n  when :duplicated_job\n    notify_devs\n  else\n    # ...\n  end\nend\n"})}),"\n",(0,o.jsx)(s.p,{children:"Although this snippet looks very appealing, it won't work as expected."}),"\n",(0,o.jsxs)(s.p,{children:["A lot of Ruby folks often have an assumption that a value of ",(0,o.jsx)(s.code,{children:"case"})," is compared with a value of ",(0,o.jsx)(s.code,{children:"when"}),"."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ruby",children:"case value === when value\n"})}),"\n",(0,o.jsxs)(s.p,{children:["In other words, the ",(0,o.jsx)(s.code,{children:"case/when"})," from example above can be transformed to ",(0,o.jsx)(s.code,{children:"if/else"})," like so:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ruby",children:"# wrong\nif result.not_success?\n  if result.code === :full_queue\n    notify_devops\n  elsif result.code === :duplicated_job\n    notify_devs\n  else\n    # ...\n  end\nend\n"})}),"\n",(0,o.jsx)(s.p,{children:"But, that is NOT correct."}),"\n",(0,o.jsxs)(s.p,{children:["In reality, the value of ",(0,o.jsx)(s.code,{children:"when"})," is ",(0,o.jsx)(s.a,{href:"https://stackoverflow.com/a/4467823/12201472",children:"always compared"})," with the value of ",(0,o.jsx)(s.code,{children:"case"}),"."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ruby",children:"when value === case value\n"})}),"\n",(0,o.jsx)(s.p,{children:"Let's write the proper transformation:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ruby",children:"# okish\nif result.not_success?\n  if :full_queue === result.code\n    notify_devops\n  elsif :duplicated_job === result.code\n    notify_devs\n  else\n    # ...\n  end\nend\n"})}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.a,{href:"https://ruby-doc.org/core-2.7.1/Symbol.html#method-i-3D-3D-3D",children:"Symbol#==="})," is just an alias to ",(0,o.jsx)(s.a,{href:"https://ruby-doc.org/core-2.7.1/Symbol.html#method-i-3D-3D",children:"Symbol#=="}),"."]}),"\n",(0,o.jsxs)(s.p,{children:["There is no way to hook into any behavior like with strings (",(0,o.jsx)(s.a,{href:"https://ruby-doc.org/core-2.7.1/String.html#method-i-3D-3D-3D",children:"String#==="})," calls ",(0,o.jsx)(s.a,{href:"https://ruby-doc.org/core-2.7.1/String.html#method-i-to_str",children:"to_str"})," on its argument)."]}),"\n",(0,o.jsxs)(s.p,{children:["As a result, just ",(0,o.jsx)(s.code,{children:"case result.code"})," is not enough."]}),"\n",(0,o.jsxs)(s.p,{children:["But once you use ",(0,o.jsx)(s.code,{children:"case result.code.to_sym"}),", the natural Ruby charm is back."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ruby",children:"# ok\nif result.not_success?\n  case result.code.to_sym\n  when :full_queue\n    notify_devops\n  when :duplicated_job\n    notify_devs\n  else\n    # ...\n  end\nend\n"})})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>i});var o=n(6540);const t={},c=o.createContext(t);function r(e){const s=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(c.Provider,{value:s},e.children)}}}]);