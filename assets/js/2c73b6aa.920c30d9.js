"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[9841],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(r),h=s,m=d["".concat(i,".").concat(h)]||d[h]||p[h]||a;return r?n.createElement(m,l(l({ref:t},c),{},{components:r})):n.createElement(m,l({ref:t},c))}));function h(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,l=new Array(a);l[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:s,l[1]=o;for(var u=2;u<a;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5320:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var n=r(7462),s=(r(7294),r(3905));const a={slug:"/guides/usage/how_to_use_results",sidebar_position:2,title:"How to use service results?"},l=void 0,o={unversionedId:"guides/usage/how_to_use_results",id:"guides/usage/how_to_use_results",title:"How to use service results?",description:"Which result types/statuses are available?",source:"@site/docs/guides/usage/how_to_use_results.mdx",sourceDirName:"guides/usage",slug:"/guides/usage/how_to_use_results",permalink:"/guides/usage/how_to_use_results",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/usage/how_to_use_results.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/guides/usage/how_to_use_results",sidebar_position:2,title:"How to use service results?"},sidebar:"docs",previous:{title:"How to create and invoke services?",permalink:"/guides/usage/how_to_create_and_invoke_services"},next:{title:"How to pass a value to step from class/instance scope?",permalink:"/guides/usage/how_to_pass_value_to_step_class_or_instance_scope"}},i={},u=[{value:"Which result types/statuses are available?",id:"which-result-typesstatuses-are-available",level:2},{value:"When to use <code>success</code> results?",id:"when-to-use-success-results",level:2},{value:"When to use <code>failure</code> results?",id:"when-to-use-failure-results",level:2},{value:"When to use <code>error</code> results?",id:"when-to-use-error-results",level:2},{value:"How to decide between <code>success</code>, <code>failure</code>, and <code>error</code> results?",id:"how-to-decide-between-success-failure-and-error-results",level:2},{value:"How to check result status?",id:"how-to-check-result-status",level:2}],c={toc:u};function p(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"which-result-typesstatuses-are-available"},"Which result types/statuses are available?"),(0,s.kt)("p",null,"There are only ",(0,s.kt)("a",{parentName:"p",href:"/faq/why_both_failure_and_error"},"3 available statuses")," for service results."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"success")," status is when the service goal is resolved positively."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"failure")," status is when a service goal is resolved negatively."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"error")," status is when the service goal is not resolved. Additional moves are required to get a ",(0,s.kt)("inlineCode",{parentName:"p"},"failure")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"success")," instead."),(0,s.kt)("h2",{id:"when-to-use-success-results"},"When to use ",(0,s.kt)("inlineCode",{parentName:"h2"},"success")," results?"),(0,s.kt)("p",null,"When you have a 100% guarantee that the service's desired outcome is achieved."),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"In other words, all ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Business_rule"},"business rules")," are satisfied and the service's actual action is completed.")),(0,s.kt)("h2",{id:"when-to-use-failure-results"},"When to use ",(0,s.kt)("inlineCode",{parentName:"h2"},"failure")," results?"),(0,s.kt)("p",null,"When you have a 100% guarantee that the service's desired outcome is NOT achieved."),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"In other words, any ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Business_rule"},"business rule")," is NOT satisfied.")),(0,s.kt)("h2",{id:"when-to-use-error-results"},"When to use ",(0,s.kt)("inlineCode",{parentName:"h2"},"error")," results?"),(0,s.kt)("p",null,"When you don't have any guarantee that the service's desired outcome was even tried to be completely achieved."),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"In other words, some ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Business_rule"},"business rule")," is NOT completed.")),(0,s.kt)("h2",{id:"how-to-decide-between-success-failure-and-error-results"},"How to decide between ",(0,s.kt)("inlineCode",{parentName:"h2"},"success"),", ",(0,s.kt)("inlineCode",{parentName:"h2"},"failure"),", and ",(0,s.kt)("inlineCode",{parentName:"h2"},"error")," results?"),(0,s.kt)("p",null,"Let's consider the following service."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'class AddRole\n  include ConvenientService::Standard::Config\n\n  attr_reader :user, :role_name\n\n  def initialize(user:, role_name:)\n    @user = user\n    @role_name = role_name\n  end\n\n  def result\n    return error("User is blank") if user.blank?\n    return error("Role name is blank") if role_name.blank?\n\n    return failure("User(#{user.id}) already has `#{role_name}` role") if user.has_role?(role_name) # Business rule.\n    return failure("User(#{user.id}) reputation is too low for `#{role_name}` role") if user.reputation.low? && role_name == :admin # Business rule.\n\n    user.add_role(role_name) # Service actual action.\n\n    success\n  rescue DB::ConnectionTimeout => exception\n    error("DB connection is lost due to `#{exception.message}`")\n  end\nend\n')),(0,s.kt)("p",null,"As its name states, the ",(0,s.kt)("inlineCode",{parentName:"p"},"AddRole")," service is responsible for the addition of a role to a particular user."),(0,s.kt)("p",null,"That is successfully added role is its ",(0,s.kt)("a",{parentName:"p",href:"/basics/service_goals"},"service goal"),"."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"AddRole")," can be easily invoked like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"result = AddRole.result(user: User.find(1), role_name: :admin)\n")),(0,s.kt)("p",null,"When the ",(0,s.kt)("inlineCode",{parentName:"p"},"success")," result is returned, you are confident that the role is added."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"result.success?\n# => true\n")),(0,s.kt)("p",null,"When the ",(0,s.kt)("inlineCode",{parentName:"p"},"failure")," result is returned, you are confident that the role is NOT added."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"result.failure?\n# => true\n")),(0,s.kt)("p",null,"As a significant bonus, you immediately receive the exact logical reason that clearly explains what forbade the role addition."),(0,s.kt)("p",null,"For this concrete service, it is the fact that the user already has the passed role."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'result.message\n# => "User(1) already has `admin` role"\n')),(0,s.kt)("p",null,"Or the fact that the user's reputation is too low for the ",(0,s.kt)("inlineCode",{parentName:"p"},"admin")," role."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'result.message\n# => "User(1) reputation is too low for `admin` role"\n')),(0,s.kt)("p",null,"So you can quickly report that reason to the interested people without additional debugging sessions."),(0,s.kt)("p",null,"When the ",(0,s.kt)("inlineCode",{parentName:"p"},"error")," result is returned, you obtain NO new information about the service goal."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"result.error?\n# => true\n")),(0,s.kt)("p",null,"As you had NO idea whether it was possible or impossible to add the role before running the service."),(0,s.kt)("p",null,"The same question remains open and unresolved after executing the service."),(0,s.kt)("p",null,"Strictly speaking, the ",(0,s.kt)("inlineCode",{parentName:"p"},"error")," result notifies that the only way to get the reliable service goal outcome is to rerun the service with changed inputs or to retry later."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"AddRole")," has multiple errors."),(0,s.kt)("p",null,"The first two of them are unsatisfied input validations."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'result.message\n# => "User is blank"\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'result.message\n# => "Role name is blank"\n')),(0,s.kt)("p",null,"Usually, they indicate that a developer (service user) who was invoking a service made a mistake by providing incorrect inputs."),(0,s.kt)("p",null,"That is why they should be changed before rerunning the service."),(0,s.kt)("p",null,"The last one is a database exception."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'result.message\n# => "DB connection is lost due to `Default timeout exceeded`"\n')),(0,s.kt)("p",null,"Such an error may show that the runtime infrastructure is not stable."),(0,s.kt)("p",null,"That is why retrying again later may be an option."),(0,s.kt)("p",null,"Similarly to ",(0,s.kt)("inlineCode",{parentName:"p"},"failures"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"errors")," also have messages that clearly explain the reasons for what went wrong."),(0,s.kt)("p",null,"But, this time they are just hints about where to proceed with debugging, not the reliable facts about service goal resolution."),(0,s.kt)("h2",{id:"how-to-check-result-status"},"How to check result status?"),(0,s.kt)("p",null,"Check the comprehensive list of commands below."),(0,s.kt)("p",null,"To make them more demonstrative, let's introduce the following minimalistic services."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"class SuccessService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"SuccessService")," always returns ",(0,s.kt)("inlineCode",{parentName:"p"},"success"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"class FailureService\n  include ConvenientService::Standard::Config\n\n  def result\n    failure\n  end\nend\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"FailureService")," always returns ",(0,s.kt)("inlineCode",{parentName:"p"},"failure"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"class ErrorServices\n  include ConvenientService::Standard::Config\n\n  def result\n    error\n  end\nend\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ErrorServices")," always returns ",(0,s.kt)("inlineCode",{parentName:"p"},"error"),"."),(0,s.kt)("p",null,"Having that information status checkers work as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.success?\n# => true\n\nFailureService.result.success?\n# => false\n\nErrorService.result.success?\n# => false\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.failure?\n# => false\n\nFailureService.result.failure?\n# => true\n\nErrorService.result.failure?\n# => false\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.error?\n# => false\n\nFailureService.result.error?\n# => false\n\nErrorService.result.error?\n# => true\n")),(0,s.kt)("p",null,"Also ",(0,s.kt)("inlineCode",{parentName:"p"},"not")," counterparts are available."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.not_success?\n# => false\n\nFailureService.result.not_success?\n# => true\n\nErrorService.result.not_success?\n# => true\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.not_failure?\n# => true\n\nFailureService.result.not_failure?\n# => false\n\nErrorService.result.not_failure?\n# => true\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.not_error?\n# => true\n\nFailureService.result.not_error?\n# => true\n\nErrorService.result.not_error?\n# => false\n")),(0,s.kt)("p",null,"For people who like to save every keyboard stroke - a shorter equivalent is available for ",(0,s.kt)("inlineCode",{parentName:"p"},"success"),"."),(0,s.kt)("p",null,"It is just ",(0,s.kt)("inlineCode",{parentName:"p"},"ok"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.ok?\n# => true\n\nFailureService.result.ok?\n# => false\n\nErrorService.result.ok?\n# => false\n")),(0,s.kt)("p",null,"And the opposite for it."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"SuccessService.result.not_ok?\n# => false\n\nFailureService.result.not_ok?\n# => true\n\nErrorService.result.not_ok?\n# => true\n")))}p.isMDXComponent=!0}}]);