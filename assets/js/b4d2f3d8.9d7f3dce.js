"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[389],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,v=d["".concat(o,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(v,i(i({ref:t},u),{},{components:n})):r.createElement(v,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6241:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={slug:"/basics/results",sidebar_position:7,title:"Results"},i=void 0,l={unversionedId:"basics/results",id:"basics/results",title:"Results",description:"Motivation behind results",source:"@site/docs/basics/results.mdx",sourceDirName:"basics",slug:"/basics/results",permalink:"/convenient_service_docs/basics/results",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/basics/results.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{slug:"/basics/results",sidebar_position:7,title:"Results"},sidebar:"docs",previous:{title:"Services",permalink:"/convenient_service_docs/basics/services"},next:{title:"Failures",permalink:"/convenient_service_docs/basics/failures"}},o={},c=[{value:"Motivation behind results",id:"motivation-behind-results",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"motivation-behind-results"},"Motivation behind results"),(0,a.kt)("p",null,"Usually, the service exposes a single public method, let it be ",(0,a.kt)("inlineCode",{parentName:"p"},"call")," for this case."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  def call\n    # ...\n  end\nend\n")),(0,a.kt)("p",null,"Since Ruby is a dynamic language, ",(0,a.kt)("inlineCode",{parentName:"p"},"call")," may return any type of value."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Duck_typing"},"Sometimes it is advantageous"),", but sometimes it may become problematic."),(0,a.kt)("p",null,"As a consequence, you can not have a unified way to check whether the value was calculated correctly."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"value = service.call\n\nif value.any? # When an array.\nif value.cover?(0...100) # Range.\nif value.match(/^[0-9]*$/) # Regexp.\nif value.dig(:user, :address) # Hash.\nif value.nozero? # Integer....\n")),(0,a.kt)("p",null,"Also it is common to forget to verify if the returned value is actually what you need:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"hash = service.call\n\nhash.merge(other_hash)\n# Expected a merge, but it raises since hash is nil...\n")),(0,a.kt)("p",null,"Convenient Service suggests utilizing Results objects as a way to overcome the problems listed above."),(0,a.kt)("p",null,"Let's create a different public method instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"call")," and name it ",(0,a.kt)("inlineCode",{parentName:"p"},"result"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  def result\n    # ...\n  end\nend\n")),(0,a.kt)("p",null,"Now, we have the following invocation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result = service.result\n\nif result.success?\n  result.data\nelse\n  result.message\nend\n")),(0,a.kt)("p",null,"How is it beneficial compared to the previous approach?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Firstly, it is predictable that all services return results, so there is a consolidated way to detect their state.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Secondly, when the result is successful, you can be 100% sure that its data is valid."))))}p.isMDXComponent=!0}}]);