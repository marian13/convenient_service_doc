"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[284],{2992:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=s(4848),t=s(8453);const r={slug:"/guides/debugging/how_to_skip_internal_library_frames_in_debugger_session",sidebar_position:3,title:"How to skip internal library frames in the debugger session?"},a=void 0,c={id:"guides/debugging/how_to_skip_internal_library_frames_in_debugger_session",title:"How to skip internal library frames in the debugger session?",description:"First of all, let's visualize the problem using the minimal reproducible example.",source:"@site/docs/guides/debugging/how_to_skip_internal_library_frames_in_debugger_session.mdx",sourceDirName:"guides/debugging",slug:"/guides/debugging/how_to_skip_internal_library_frames_in_debugger_session",permalink:"/guides/debugging/how_to_skip_internal_library_frames_in_debugger_session",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/debugging/how_to_skip_internal_library_frames_in_debugger_session.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/guides/debugging/how_to_skip_internal_library_frames_in_debugger_session",sidebar_position:3,title:"How to skip internal library frames in the debugger session?"},sidebar:"docs",previous:{title:"How to check whether the result comes from an unhandled exception?",permalink:"/guides/debugging/how_to_check_whether_result_comes_from_unhandled_exception"},next:{title:"How to call a method skipping its middlewares?",permalink:"/guides/debugging/how_to_call_method_skipping_its_middlewares"}},d={},l=[];function o(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"First of all, let's visualize the problem using the minimal reproducible example."}),"\n",(0,i.jsx)(n.p,{children:"In order to do it we are going to create a new test file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"touch test.rb\n"})}),"\n",(0,i.jsx)(n.p,{children:"Place a simple service into it."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'require "convenient_service"\n\nclass Service\n  include ConvenientService::Standard::Config\n\n  step :foo\n\n  step :bar\n\n  step :baz\n\n  def foo\n    success\n  end\n\n  def bar\n    success\n  end\n\n  def baz\n    success\n  end\nend\n\nresult = Service.result\n\nif result.success?\n  puts "OK"\nelse\n  puts result.message\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:"And run it."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ruby test.rb\n"})}),"\n",(0,i.jsx)(n.p,{children:"So far so good."}),"\n",(0,i.jsx)(n.p,{children:"Now, let's add a debugger statement to the first step."}),"\n",(0,i.jsxs)(n.p,{children:["We are using ",(0,i.jsx)(n.a,{href:"https://github.com/ruby/debug",children:"ruby/debug"})," in this example since it is the only debugger that supports ",(0,i.jsx)(n.a,{href:"https://github.com/ruby/debug/blob/v1.9.2/lib/debug/thread_client.rb#L33",children:"skipping of frames"})," at the moment when this article was initially written."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'require "convenient_service"\n# highlight-start\nrequire "debug"\n# highlight-end\n\nclass Service\n  include ConvenientService::Standard::Config\n\n  step :foo\n\n  step :bar\n\n  step :baz\n\n  def foo\n    # highlight-start\n    binding.break\n    # highlight-end\n\n    success\n  end\n\n  def bar\n    success\n  end\n\n  def baz\n    success\n  end\nend\n\nresult = Service.result\n\nif result.success?\n  puts "OK"\nelse\n  puts result.message\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:"When we rerun the test file the debugger pauses the execution."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"[9, 18] in test.rb\n     9|   step :bar\n    10|\n    11|   step :baz\n    12|\n    13|   def foo\n=>  14|     binding.break\n    15|\n    16|     success\n    17|   end\n    18|\n=>#0    Service#foo at test.rb:14\n  #1    [C] Method#call at ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/service/plugins/can_have_steps/entities/step/plugins/can_be_method_step/can_be_executed/middleware.rb:40\n  # and 66 frames (use `bt' command for all frames)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["It is currently at the beginning of the ",(0,i.jsx)(n.code,{children:"foo"})," step."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's try to navigate to the ",(0,i.jsx)(n.code,{children:"bar"})," step using only ",(0,i.jsxs)(n.a,{href:"https://github.com/ruby/debug?tab=readme-ov-file#control-flow",children:["the ",(0,i.jsx)(n.code,{children:"next"})," debugger command"]})," as we usually do when we are debugging regular classes and methods."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(rdbg) next\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"[11, 20] in test.rb\n    11|   step :baz\n    12|\n    13|   def foo\n    14|     binding.break\n    15|\n=>  16|     success\n    17|   end\n    18|\n    19|   def bar\n    20|     success\n=>#0    Service#foo at test.rb:16\n  #1    [C] Method#call at ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/service/plugins/can_have_steps/entities/step/plugins/can_be_method_step/can_be_executed/middleware.rb:40\n  # and 66 frames (use `bt' command for all frames)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The first ",(0,i.jsx)(n.code,{children:"next"}),' "moved the execution" from line 14 to line 16.']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(rdbg) next\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"[12, 21] in test.rb\n    12|\n    13|   def foo\n    14|     binding.break\n    15|\n    16|     success\n=>  17|   end\n    18|\n    19|   def bar\n    20|     success\n    21|   end\n=>#0    Service#foo at test.rb:17 #=> <Service::Result status: :success>\n  #1    [C] Method#call at ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/service/plugins/can_have_steps/entities/step/plugins/can_be_method_step/can_be_executed/middleware.rb:40\n  # and 66 frames (use `bt' command for all frames\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The second ",(0,i.jsx)(n.code,{children:"next"})," shows the calculated return value."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(rdbg) next\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"[36, 45] in ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/service/plugins/can_have_steps/entities/step/plugins/can_be_method_step/can_be_executed/middleware.rb\n    36|                       return method.call(**input_values) if params.has_rest_kwargs?\n    37|\n    38|                       return method.call(**input_values.slice(*params.named_kwargs_keys)) if params.named_kwargs_keys.any?\n    39|\n    40|                       method.call\n=>  41|                     end\n    42|\n    43|                     ##\n    44|                     # @return [Method, nil]\n    45|                     #\n=>#0    ConvenientService::Service::Plugins::CanHaveSteps::Entities::Step::Plugins::CanBeMethodStep::CanBeExecuted::Middleware#call_method(method=#<Method: Service#foo() test.rb:13>) at ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/service/plugins/can_have_steps/entities/step/plugins/can_be_method_step/can_be_executed/middleware.rb:41 #=> <Service::Result status: :success>\n  #1    ConvenientService::Service::Plugins::CanHaveSteps::Entities::Step::Plugins::CanBeMethodStep::CanBeExecuted::Middleware#next at ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/service/plugins/can_have_steps/entities/step/plugins/can_be_method_step/can_be_executed/middleware.rb:24\n  # and 64 frames (use `bt' command for all frames)\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is where the party is started."}),"\n",(0,i.jsxs)(n.p,{children:["The third ",(0,i.jsx)(n.code,{children:"next"})," stepped into the internal library code, which is good."]}),"\n",(0,i.jsx)(n.p,{children:"It would do the same with any other library."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(rdbg) next\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"[54, 63] in ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/core/entities/config/entities/method_middlewares/entities/middlewares/chain/concern/instance_methods.rb\n    54|                         # https://ruby-doc.org/core-2.7.0/doc/keywords_rdoc.html\n    55|                         #\n    56|                         # TODO: Enforce to always pass args, kwargs, block.\n    57|                         #\n    58|                         __send__(:next, *@__env__[:args], **@__env__[:kwargs], &@__env__[:block])\n=>  59|                       end\n    60|\n    61|                       ##\n    62|                       # @return [Class, Object]\n    63|                       #\n=>#0    ConvenientService::Core::Entities::Config::Entities::MethodMiddlewares::Entities::Middlewares::Chain::Concern::InstanceMethods#call(env={:args=>[], :kwargs=>{}, :block=>nil, :en...) at ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/core/entities/config/entities/method_middlewares/entities/middlewares/chain/concern/instance_methods.rb:59 #=> <Service::Result status: :success>\n  #1    ConvenientService::Core::Entities::Config::Entities::MethodMiddlewares::Entities::Middlewares::Chain::Entities::MethodChain#next(args=[], kwargs={}, block=nil) at ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/core/entities/config/entities/method_middlewares/entities/middlewares/chain/entities/method_chain.rb:47\n  # and 62 frames (use `bt' command for all frames)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The fourth ",(0,i.jsx)(n.code,{children:"next"})," stepped deeper."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(rdbg) next\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"[43, 52] in ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/core/entities/config/entities/method_middlewares/entities/middlewares/chain/entities/method_chain.rb\n    43|                       # @internal\n    44|                       #   TODO: Enforce to always pass args, kwargs, block.\n    45|                       #\n    46|                       def next(*args, **kwargs, &block)\n    47|                         stack.call(env.merge(args: args, kwargs: kwargs, block: block))\n=>  48|                       end\n    49|\n    50|                       ##\n    51|                       # @param other [ConvenientService::Core::Entities::Config::Entities::MethodMiddlewares::Entities::Chain, Object]\n    52|                       # @return [Boolean]\n=>#0    ConvenientService::Core::Entities::Config::Entities::MethodMiddlewares::Entities::Middlewares::Chain::Entities::MethodChain#next(args=[], kwargs={}, block=nil) at ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/core/entities/config/entities/method_middlewares/entities/middlewares/chain/entities/method_chain.rb:48 #=> <Service::Result status: :success>\n  #1    ConvenientService::Service::Plugins::CanHaveSteps::Entities::Step::Plugins::RaisesOnNotResultReturnValue::Middleware#next at ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/service/plugins/can_have_steps/entities/step/plugins/raises_on_not_result_return_value/middleware.rb:19\n  # and 61 frames (use `bt' command for all frames)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The fifth ",(0,i.jsx)(n.code,{children:"next"})," continues the diving."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(rdbg) next\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"[16, 25] in ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/service/plugins/can_have_steps/entities/step/plugins/raises_on_not_result_return_value/middleware.rb\n    16|                   intended_for any_method, entity: :step\n    17|\n    18|                   def next(...)\n    19|                     original_result = chain.next(...)\n    20|\n=>  21|                     return original_result if commands.is_result?(original_result)\n    22|\n    23|                     ::ConvenientService.raise Exceptions::ReturnValueNotKindOfResult.new(step: entity, result: original_result)\n    24|                   end\n    25|                 end\n=>#0    ConvenientService::Service::Plugins::CanHaveSteps::Entities::Step::Plugins::RaisesOnNotResultReturnValue::Middleware#next at ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/service/plugins/can_have_steps/entities/step/plugins/raises_on_not_result_return_value/middleware.rb:21\n  #1    ConvenientService::Core::Entities::Config::Entities::MethodMiddlewares::Entities::Middlewares::Chain::Concern::InstanceMethods#call(env={:args=>[], :kwargs=>{}, :block=>nil, :en...) at ~/.asdf/installs/ruby/3.3.3/lib/ruby/gems/3.3.0/gems/convenient_service-0.19.1/lib/convenient_service/core/entities/config/entities/method_middlewares/entities/middlewares/chain/concern/instance_methods.rb:58\n  # and 60 frames (use `bt' command for all frames)\n"})}),"\n",(0,i.jsx)(n.p,{children:"We hope you already got the idea."}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes it can take more than 50 ",(0,i.jsx)(n.code,{children:"next"})," repetitions to navigate from one ",(0,i.jsx)(n.code,{children:"step"})," to another."]}),"\n",(0,i.jsxs)(n.p,{children:["That is happening since ",(0,i.jsx)(n.a,{href:"/",children:"Convenient Service"})," core is heavily using ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Middleware",children:"middleware"})," ",(0,i.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/chain-of-responsibility",children:"chains"})," under the hood."]}),"\n",(0,i.jsx)(n.p,{children:"Any solution has its benefits and drawbacks."}),"\n",(0,i.jsx)(n.p,{children:"Middleware chains are simple to extend, but they may cause deep call stacks."}),"\n",(0,i.jsxs)(n.p,{children:["Luckily, some debuggers like ",(0,i.jsx)(n.a,{href:"https://github.com/ruby/debug",children:"ruby/debug"})," provide a way to ",(0,i.jsx)(n.a,{href:"https://github.com/ruby/debug?tab=readme-ov-file#configuration-list",children:"skip call stack frames that match regular expressions"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'require "convenient_service"\nrequire "debug"\n# highlight-start\nrequire "pathname"\n\n(DEBUGGER__::CONFIG[:skip_path] ||= []).concat([ConvenientService.root.to_s, "forwardable"])\n# highlight-end\n\nclass Service\n  include ConvenientService::Standard::Config\n\n  step :foo\n\n  step :bar\n\n  step :baz\n\n  def foo\n    binding.break\n\n    success\n  end\n\n  def bar\n    success\n  end\n\n  def baz\n    success\n  end\nend\n\nresult = Service.result\n\nif result.success?\n  puts "OK"\nelse\n  puts result.message\nend\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When we retry the debugging session the first 2 ",(0,i.jsx)(n.code,{children:"next"})," command outputs are the same as they were before."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"[12, 21] in test.rb\n    12|   step :bar\n    13|\n    14|   step :baz\n    15|\n    16|   def foo\n=>  17|     binding.break\n    18|\n    19|     success\n    20|   end\n    21|\n=>#0    Service#foo at test.rb:17\n  #67   <main> at test.rb:31\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(rdbg) next\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"[14, 23] in test.rb\n    14|   step :baz\n    15|\n    16|   def foo\n    17|     binding.break\n    18|\n=>  19|     success\n    20|   end\n    21|\n    22|   def bar\n    23|     success\n=>#0    Service#foo at test.rb:19\n  #67   <main> at test.rb:31\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(rdbg) next\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"[15, 24] in test.rb\n    15|\n    16|   def foo\n    17|     binding.break\n    18|\n    19|     success\n=>  20|   end\n    21|\n    22|   def bar\n    23|     success\n    24|   end\n=>#0    Service#foo at test.rb:20 #=> <Service::Result status: :success>\n  #67   <main> at test.rb:31\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(rdbg) next\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"[22, 31] in test.rb\n    22|   def bar\n    23|     success\n    24|   end\n    25|\n    26|   def baz\n=>  27|     success\n    28|   end\n    29| end\n    30|\n    31| result = Service.result\n=>#0    Service#baz at test.rb:27\n  #66   <main> at test.rb:31\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The third ",(0,i.jsx)(n.code,{children:"next"})," skips all block-listed internal call stack frames."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'(DEBUGGER__::CONFIG[:skip_path] ||= []).concat([ConvenientService.root.to_s, "forwardable"])\n'})}),"\n",(0,i.jsx)(n.p,{children:"A big win, exactly what we need \ud83d\udcaa."}),"\n",(0,i.jsxs)(n.p,{children:["But why it immediately navigate to the ",(0,i.jsx)(n.code,{children:"baz"}),", not the ",(0,i.jsx)(n.code,{children:"bar"})," step \ud83d\ude10?"]}),"\n",(0,i.jsx)(n.p,{children:"That is something that is out of our control for now..."}),"\n",(0,i.jsxs)(n.p,{children:["Maybe an upgrade to the newer version of ",(0,i.jsx)(n.a,{href:"https://github.com/ruby/debug",children:"ruby/debug"})," may resolve the issue soon \ud83e\udd7a."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var i=s(6540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);