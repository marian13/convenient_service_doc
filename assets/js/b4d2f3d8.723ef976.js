"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[6389],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(o,".").concat(d)]||m[d]||u[d]||s;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6241:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const s={slug:"/basics/results",sidebar_position:3,title:"Results"},i=void 0,l={unversionedId:"basics/results",id:"basics/results",title:"Results",description:"Motivation behind results",source:"@site/docs/basics/results.mdx",sourceDirName:"basics",slug:"/basics/results",permalink:"/basics/results",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/basics/results.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/basics/results",sidebar_position:3,title:"Results"},sidebar:"docs",previous:{title:"Services",permalink:"/basics/services"},next:{title:"Service goals",permalink:"/basics/service_goals"}},o={},c=[{value:"Motivation behind results",id:"motivation-behind-results",level:2},{value:"So what is a Result? Its benefits?",id:"so-what-is-a-result-its-benefits",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"motivation-behind-results"},"Motivation behind results"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.toptal.com/ruby-on-rails/rails-service-objects-tutorial"},"Usually"),", the service exposes a sole public method, let it be ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," for this case."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  def call\n    # ...\n  end\nend\n")),(0,r.kt)("p",null,"Since Ruby is a ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dynamic_programming_language"},"dynamic language"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," may return any type of value."),(0,r.kt)("p",null,"Sometimes it is advantageous, for things like ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Duck_typing"},"Duck Typing"),", ",(0,r.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/abstract-factory"},"Abstract Factories"),", ",(0,r.kt)("a",{parentName:"p",href:"https://sourcemaking.com/design_patterns/null_object"},"Null Objects"),", etc."),(0,r.kt)("p",null,"But occasionally it may also become problematic."),(0,r.kt)("p",null,"For example, you can not implement a unified way to check whether the value was calculated correctly (as it was intended by its author)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"value = service.call\n\nif value.any? # When an array.\nif value.cover?(0...100) # Range.\nif value.match(/^[0-9]*$/) # Regexp.\nif value.dig(:user, :address) # Hash.\nif value.nozero? # Integer....\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Someone may consider ",(0,r.kt)("a",{parentName:"p",href:"https://api.rubyonrails.org/classes/Object.html#method-i-blank-3F"},"Object#blank?")," and its opposite ",(0,r.kt)("a",{parentName:"p",href:"https://api.rubyonrails.org/classes/Object.html#method-i-present-3F"},"Object#present?")," from ",(0,r.kt)("a",{parentName:"p",href:"https://guides.rubyonrails.org/active_support_core_extensions.html"},"ActiveSupport")," as an attempt, but they detect ",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/20663389/12201472"},"truthiness")," in the Rails sense.")),(0,r.kt)("p",null,"Also it is common to forget to verify if the returned value is actually what you need:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"hash = service.call\n\nhash.merge(other_hash)\n# Expected a merge, but it raises since hash is nil...\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/"},"Convenient Service")," suggests utilizing Result objects as a way to overcome the problems listed above."),(0,r.kt)("p",null,"Practically speaking, to return results from all services."),(0,r.kt)("p",null,"To express this idea, let's create a different public method instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," and name it ",(0,r.kt)("inlineCode",{parentName:"p"},"result"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  def result\n    # ...\n  end\nend\n")),(0,r.kt)("p",null,"Now, we have the following invocation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"result = service.result\n\nif result.success?\n  result.data\nelse\n  result.message\nend\n")),(0,r.kt)("h2",{id:"so-what-is-a-result-its-benefits"},"So what is a Result? Its benefits?"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Result")," is a data structure that satisfies the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Firstly, it has a consolidated way to detect its state (",(0,r.kt)("inlineCode",{parentName:"p"},"success?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"failure?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"error?"),", and their counterparts with ",(0,r.kt)("inlineCode",{parentName:"p"},"not")," like ",(0,r.kt)("inlineCode",{parentName:"p"},"not_success?"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Secondly, when the result is successful, you can be 100% sure that its data is correct, no additional verifications are needed (the notion of correctness is defined by the service author).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Moveover, results induce you to always check them, before accessing their attributes, otherwise an exception is raised.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Also, when something goes wrong, the result contains a description of the reason (",(0,r.kt)("inlineCode",{parentName:"p"},"result.message"),"), which simplifies finding the source of the problem."))))}u.isMDXComponent=!0}}]);