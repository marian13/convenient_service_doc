"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[1944],{8153:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>a});var c=s(4848),t=s(8453);const o={slug:"/best_practices/skip_result_call_for_boolean_services",sidebar_position:4,title:"Skip `result` call for boolean services"},i=void 0,r={id:"best_practices/skip_result_call_for_boolean_services",title:"Skip `result` call for boolean services",description:"Let's check the following boolean service:",source:"@site/docs/best_practices/skip_result_call_for_boolean_services.mdx",sourceDirName:"best_practices",slug:"/best_practices/skip_result_call_for_boolean_services",permalink:"/best_practices/skip_result_call_for_boolean_services",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/best_practices/skip_result_call_for_boolean_services.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{slug:"/best_practices/skip_result_call_for_boolean_services",sidebar_position:4,title:"Skip `result` call for boolean services"},sidebar:"docs",previous:{title:"Services with `or` conditionals",permalink:"/best_practices/services_with_or_conditionals"},next:{title:"FDD",permalink:"/category/fdd-1"}},l={},a=[];function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:["Let's check the following ",(0,c.jsx)(n.a,{href:"/glossary/boolean_service",children:"boolean service"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:'class IsConnectionActive\n  include ::ConvenientService::Standard::Config\n\n  attr_reader :connection\n\n  def initialize(:connection)\n    @connection = connection\n  end\n\n  def result\n    return error("Connection: can\'t be blank") if connection.blank?\n    return failure("Connection `#{connection.id}` is NOT connected") unless connection.connected?\n    return failure("Connection `#{connection.id}` has NO task") if connection.task.blank?\n    return failure("Connection `#{connection.id}` task is NOT in progress") unless connection.task.in_progres?\n\n    success\n  end\nend\n'})}),"\n",(0,c.jsx)(n.p,{children:"A common way to run a usual service is like this:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"# okish\nresult = IsConnectionActive.result(connection: connection)\n\nif result.success?\n  ##\n  # `result.data` is processed somehow by the end-user here...\n  #\n  result.data\nelse\n\nend\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Most of the time you will probably work with ",(0,c.jsx)(n.code,{children:"result.data"})," inside ",(0,c.jsx)(n.code,{children:"if result.success?"})," branch."]}),"\n",(0,c.jsxs)(n.p,{children:["But that is not the case for the ",(0,c.jsx)(n.a,{href:"/glossary/boolean_service",children:"boolean services"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Their ",(0,c.jsx)(n.code,{children:"success"})," calls do NOT accept any data, that is why the previous chunk of code can be written in a shorter form:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"# better\nif IsConnectionActive.success?(connection: connection)\n\nelse\n\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>r});var c=s(6540);const t={},o=c.createContext(t);function i(e){const n=c.useContext(o);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),c.createElement(o.Provider,{value:n},e.children)}}}]);