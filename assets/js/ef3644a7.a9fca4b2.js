"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[4867],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),f=c(n),d=a,m=f["".concat(l,".").concat(d)]||f[d]||p[d]||i;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5152:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={slug:"/basics/failures",sidebar_position:4,title:"Failures"},s=void 0,o={unversionedId:"basics/failures",id:"basics/failures",title:"Failures",description:"What is a failure?",source:"@site/docs/basics/failures.mdx",sourceDirName:"basics",slug:"/basics/failures",permalink:"/convenient_service_docs/basics/failures",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/basics/failures.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{slug:"/basics/failures",sidebar_position:4,title:"Failures"},sidebar:"docs",previous:{title:"Results",permalink:"/convenient_service_docs/basics/results"},next:{title:"Errors",permalink:"/convenient_service_docs/basics/errors"}},l={},c=[{value:"What is a failure?",id:"what-is-a-failure",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"what-is-a-failure"},"What is a failure?"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Failure")," is a problem caused by the wrong input data."),(0,a.kt)("p",null,"It may be a validation error or an unmet precondition based on service arguments."),(0,a.kt)("p",null,"It is a responsibility of a developer/service user to provide correct inputs."),(0,a.kt)("p",null,"Otherwise, there is no sense in even starting any service processing."),(0,a.kt)("p",null,"Check out the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class EnsureFeatureActive\n  # ...\n  def initialize(name:)\n    @name = name\n  end\n\n  def result\n    return failure(data: {name: "Feature name can not be `nil`"}) if name.nil?\n    return failure(data: {name: "Unknown feature - `#{name}`"}) unless Feature.exist?(name: name)\n\n    # ... Tricky and non trivial logic to ensure that feature is active...\n  end\nend\n')),(0,a.kt)("p",null,"And this is how it can be triggerred:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'result = EnsureFeatureActive.result(name: "Fancy feature")\n\nif result.failure?\n  # `result.data` is a hash-like object with failure reasons grouped by parameters.\n  result.data[:name]\nend\n')),(0,a.kt)("p",null,"There is no point to involve all the heavy machinery when the feature name is ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,a.kt)("p",null,"Why do we need to waste any expensive resources if the feature name is unknown?"),(0,a.kt)("p",null,"The purpose of failure is to say that the callers need to adjust their code, not the service authors."))}p.isMDXComponent=!0}}]);