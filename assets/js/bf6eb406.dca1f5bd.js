"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[334],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),d=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=d(t),p=a,g=m["".concat(i,".").concat(p)]||m[p]||c[p]||o;return t?r.createElement(g,s(s({ref:n},u),{},{components:t})):r.createElement(g,s({ref:n},u))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var d=2;d<o;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4821:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const o={slug:"/guides/fdd/usage/how_to_create_and_invoke_entries",sidebar_position:1,title:"How to use entries?"},s=void 0,l={unversionedId:"guides/fdd/usage/how_to_use_entries",id:"guides/fdd/usage/how_to_use_entries",title:"How to use entries?",description:"How to create an entry?",source:"@site/docs/guides/fdd/usage/how_to_use_entries.mdx",sourceDirName:"guides/fdd/usage",slug:"/guides/fdd/usage/how_to_create_and_invoke_entries",permalink:"/guides/fdd/usage/how_to_create_and_invoke_entries",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/fdd/usage/how_to_use_entries.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/guides/fdd/usage/how_to_create_and_invoke_entries",sidebar_position:1,title:"How to use entries?"},sidebar:"docs",previous:{title:"Usage",permalink:"/category/usage-1"},next:{title:"Advanced",permalink:"/category/advanced"}},i={},d=[{value:"How to create an entry?",id:"how-to-create-an-entry",level:2},{value:"How to define arguments for entries?",id:"how-to-define-arguments-for-entries",level:2},{value:"How to invoke an entry?",id:"how-to-invoke-an-entry",level:2},{value:"How to add a middleware for all entries?",id:"how-to-add-a-middleware-for-all-entries",level:2},{value:"How to add a middleware for the specific entry?",id:"how-to-add-a-middleware-for-the-specific-entry",level:2}],u={toc:d};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"how-to-create-an-entry"},"How to create an entry?"),(0,a.kt)("p",null,"There are two ways to do it - block and method forms."),(0,a.kt)("p",null,"This is how it can be done using the block form."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format do\n      Services::Format.result(path: "#{::Dir.pwd}/Gemfile")\n    end\n  end\nend\n')),(0,a.kt)("p",null,"The following code snippet demonstrates the equivalent method form."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format\n\n    def format\n      Services::Format.result(path: "#{::Dir.pwd}/Gemfile")\n    end\n  end\nend\n')),(0,a.kt)("h2",{id:"how-to-define-arguments-for-entries"},"How to define arguments for entries?"),(0,a.kt)("p",null,"Since entries are built on the top of the regular Ruby blocks and methods you are able to utilize the techniques that you already know."),(0,a.kt)("p",null,"Here are some examples of how to define positional and keyword arguments."),(0,a.kt)("p",null,"The block form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format do |path, verbose: false|\n      Services::Format.result(path: path, verbose: verbose)\n    end\n  end\nend\n")),(0,a.kt)("p",null,"The method form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format\n\n    def format(path, verbose: false)\n      Services::Format.result(path: path, verbose: verbose)\n    end\n  end\nend\n")),(0,a.kt)("p",null,"Entries with ",(0,a.kt)("a",{parentName:"p",href:"https://rubyguides.com/2018/06/rubys-method-arguments"},"variable arguments list")," may look like as follows."),(0,a.kt)("p",null,"The block form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format do |*args, **kwargs, &block|\n      path = args.first\n\n      verbose = block ? block.call : kwargs[:verbose]\n\n      Services::Format.result(path: path, verbose: verbose)\n    end\n  end\nend\n")),(0,a.kt)("p",null,"The method form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format\n\n    def format(*args, **kwargs, &block)\n      path = args.first\n\n      verbose = block ? block.call : kwargs[:verbose]\n\n      Services::Format.result(path: path, verbose: verbose)\n    end\n  end\nend\n")),(0,a.kt)("h2",{id:"how-to-invoke-an-entry"},"How to invoke an entry?"),(0,a.kt)("p",null,"No matter whether an entry was defined by a block or by a method, its invocation is the same, e.g:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"Features::Gemfile.format\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"Features::Gemfile.format(path, verbose: true)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"Features::Gemfile.format(*args, **kwargs, &block)\n")),(0,a.kt)("h2",{id:"how-to-add-a-middleware-for-all-entries"},"How to add a middleware for all entries?"),(0,a.kt)("p",null,"Check the following feature."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'module Features\n  class SomeFeature\n    include ConvenientService::Feature::Standard::Config\n\n    entry :some_entry_without_arguments\n    entry :some_entry_with_arguments\n\n    def some_entry_without_arguments\n      puts "Entry `some_entry_without_arguments` called."\n    end\n\n    def some_entry_with_arguments(*args, **kwargs, &block)\n      puts "Entry `some_entry_with_arguments` called."\n    end\n  end\nend\n')),(0,a.kt)("p",null,"It has two entries that are displaying some text on the screen."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'Features::SomeFeature.first_entry\n# => "Entry `first_entry` called."\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'Features::SomeFeature.second_entry\n# => "Entry `second_entry` called."\n')),(0,a.kt)("p",null,"Now, let's define a simple middleware."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class TestMiddleware < ConvenientService::MethodMiddleware\n  def next(entry_name, *args, **kwargs, &block)\n    puts "`TestMiddleware` called for entry `#{entry_name}` with args `#{args.inspect}`, kwargs `#{kwargs.inspect}` and block `#{block.inspect}`."\n\n    chain.next(entry_name, *args, **kwargs, &block)\n  end\nend\n')),(0,a.kt)("p",null,"It logs the entry name and its arguments."),(0,a.kt)("p",null,"Then it triggers the original entry behaviour."),(0,a.kt)("p",null,"In order to register a middleware for all entries inside the particular feature, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"middlewares :entry")," directive."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'module Features\n  class SomeFeature\n    include ConvenientService::Feature::Standard::Config\n\n    # highlight-start\n    middlewares :entry do\n      use TestMiddleware\n    end\n    # highlight-end\n\n    entry :some_entry_without_arguments\n    entry :some_entry_with_arguments\n\n    def some_entry_without_arguments\n      puts "Entry `some_entry_without_arguments` called."\n    end\n\n    def some_entry_with_arguments(*args, **kwargs, &block)\n      puts "Entry `some_entry_with_arguments` called."\n    end\n  end\nend\n')),(0,a.kt)("p",null,"Now the ",(0,a.kt)("inlineCode",{parentName:"p"},"TestMiddleware")," is executed before any entry invocation."),(0,a.kt)("p",null,"This is how it looks in practice."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'Features::SomeFeature.some_entry_without_arguments\n# => "`TestMiddleware` called for entry `some_entry_without_arguments` with args `[]`, kwargs `{}` and block `nil`."\n# => "Entry `some_entry_without_arguments` called."\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'Features::SomeFeature.some_entry_with_arguments(:foo, foo: :bar) { :foo }\n# => "`TestMiddleware` called for entry `some_entry_with_arguments` with args `[:foo]`, kwargs `{:foo=>:bar}` and block `#<Proc:0x00000001227756c8.>`."\n# => "Entry `some_entry_with_arguments` called."\n')),(0,a.kt)("h2",{id:"how-to-add-a-middleware-for-the-specific-entry"},"How to add a middleware for the specific entry?"),(0,a.kt)("p",null,"The process is almost the same as with the addition of a middleware for all entries."),(0,a.kt)("p",null,"But the arguments list does not start with positional ",(0,a.kt)("inlineCode",{parentName:"p"},"entry_name"),"."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"It is still possible to access ",(0,a.kt)("inlineCode",{parentName:"p"},"entry_name")," via method ",(0,a.kt)("inlineCode",{parentName:"p"},"method")," \ud83d\ude42.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class TestMiddleware < ConvenientService::MethodMiddleware\n  def next(*args, **kwargs, &block)\n    puts "`TestMiddleware` called for entry `#{method}` with args `#{args.inspect}`, kwargs `#{kwargs.inspect}` and block `#{block.inspect}`."\n\n    chain.next(*args, **kwargs, &block)\n  end\nend\n')),(0,a.kt)("p",null,"The registration directive contains the specific entry name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'module Features\n  class SomeFeature\n    include ConvenientService::Feature::Standard::Config\n\n    # highlight-start\n    middlewares :some_entry do\n      use TestMiddleware\n    end\n    # highlight-end\n\n    entry :some_entry\n    entry :some_other_entry\n\n    def some_entry(first_positional_argument, second_positional_argument)\n      puts "Entry `some_entry` called."\n    end\n\n    def some_other_entry\n      puts "Entry `some_other_entry` called."\n    end\n  end\nend\n')),(0,a.kt)("p",null,"Thus the ",(0,a.kt)("inlineCode",{parentName:"p"},"TestMiddleware")," is executed only before specific entry invocation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'Features::SomeFeature.some_entry(:foo, :bar)\n# => "`TestMiddleware` called for entry `some_entry` with args `[:foo, :bar]`, kwargs `{}` and block `nil`."\n# => "Entry `some_entry` called."\n')),(0,a.kt)("p",null,"All the other entries stay unaffected."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'Features::SomeFeature.some_other_entry\n# => "Entry `some_other_entry` called."\n')))}c.isMDXComponent=!0}}]);