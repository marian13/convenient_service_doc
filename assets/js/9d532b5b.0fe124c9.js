"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[7530],{3905:(e,r,n)=>{n.d(r,{Zo:()=>s,kt:()=>u});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=t.createContext({}),c=function(e){var r=t.useContext(d),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},s=function(e){var r=c(e.components);return t.createElement(d.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,y=m["".concat(d,".").concat(u)]||m[u]||p[u]||o;return n?t.createElement(y,l(l({ref:r},s),{},{components:n})):t.createElement(y,l({ref:r},s))}));function u(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var d in r)hasOwnProperty.call(r,d)&&(i[d]=r[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8347:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=n(7462),a=(n(7294),n(3905));const o={slug:"/glossary/advanced/decorator_middleware",sidebar_position:2,title:"Decorator Middleware"},l=void 0,i={unversionedId:"glossary/advanced/decorator_middleware",id:"glossary/advanced/decorator_middleware",title:"Decorator Middleware",description:"A decorator middleware is a kind of middleware that always calls the next middleware in a chain.",source:"@site/docs/glossary/advanced/decorator_middleware.mdx",sourceDirName:"glossary/advanced",slug:"/glossary/advanced/decorator_middleware",permalink:"/glossary/advanced/decorator_middleware",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/glossary/advanced/decorator_middleware.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/glossary/advanced/decorator_middleware",sidebar_position:2,title:"Decorator Middleware"},sidebar:"docs",previous:{title:"Advanced",permalink:"/category/advanced-2"},next:{title:"Proxy Middleware",permalink:"/glossary/advanced/proxy_middleware"}},d={},c=[],s={toc:c};function p(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A decorator middleware is a kind of middleware that always calls the next middleware in a chain."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"HasCallbacks")," is a good example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"module ConvenientService\n  module Common\n    module Plugins\n      module HasCallbacks\n        class Middleware < Core::MethodChainMiddleware\n          # ...\n          # highlight-start\n          def next(...)\n            entity.callbacks.for([:before, method]).each { |callback| callback.call_in_context(entity) }\n\n            original_value = chain.next(...)\n\n            entity.callbacks.for([:after, method]).reverse_each { |callback| callback.call_in_context(entity, original_value) }\n\n            original_value\n          end\n          # highlight-end\n          # ...\n        end\n      end\n    end\n  end\nend\n")),(0,a.kt)("p",null,"It triggers before callbacks, then ",(0,a.kt)("inlineCode",{parentName:"p"},"chain.next(...)"),", and later after callbacks."),(0,a.kt)("p",null,"There are no conditionals that may skip ",(0,a.kt)("inlineCode",{parentName:"p"},"chain.next(...)")," invocation."),(0,a.kt)("p",null,"That is why this middleware is considered ",(0,a.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/decorator"},"decorator")," middleware."),(0,a.kt)("p",null,"In contrast, ",(0,a.kt)("a",{parentName:"p",href:"/glossary/advanced/proxy_middleware"},"proxy middlewares")," may not call ",(0,a.kt)("inlineCode",{parentName:"p"},"chain.next")," if needed."))}p.isMDXComponent=!0}}]);