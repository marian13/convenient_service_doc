"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[8036],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9739:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905)),o=n(4996);const i={slug:"/glossary/fdd/entry",sidebar_position:1,title:"Entry"},s=void 0,l={unversionedId:"glossary/fdd/entry",id:"glossary/fdd/entry",title:"Entry",description:"Entry is a single part of the feature's public interface.",source:"@site/docs/glossary/fdd/entry.mdx",sourceDirName:"glossary/fdd",slug:"/glossary/fdd/entry",permalink:"/glossary/fdd/entry",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/glossary/fdd/entry.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/glossary/fdd/entry",sidebar_position:1,title:"Entry"},sidebar:"docs",previous:{title:"FDD",permalink:"/category/fdd-2"},next:{title:"Advanced",permalink:"/category/advanced-2"}},p={},c=[],d={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Entry")," is a single part of the feature's ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Public_interface"},"public interface"),"."),(0,a.kt)("p",null,"Let's check the following feature class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"module Application\n  module Features\n    class Gemfile\n      include ConvenientService::Feature::Standard::Config\n\n      entry :format do |path:|\n        Services::Format.result(path: path)\n      end\n\n      entry :lint do |path:|\n        Services::Lint.result(path: path)\n      end\n    end\n  end\nend\n")),(0,a.kt)("p",null,"After a brief overview, you should start to have a high-level understanding of the goal of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Gemfile")," feature and what to do with it in practice."),(0,a.kt)("p",null,"In this particular case, two abilities are available:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Formatting of a Gemfile (",(0,a.kt)("inlineCode",{parentName:"p"},"entry :format"),").")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Linting of a Gemfile (",(0,a.kt)("inlineCode",{parentName:"p"},"entry :lint"),")."))),(0,a.kt)("p",null,"Calling of an entry is as simple as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'# Somewhere inside your codebase.\nApp::Features::Gemfile.format(path: "Gemfile")\n\nApp::Features::Gemfile.lint(path: "Gemfile")\n')),(0,a.kt)("p",null,"That's why people are often thinking about entries as something really close to Ruby's regular class methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"##\n# The actual entry.\n#\nentry :format do |path:|\n  Services::Format.result(path: path)\nend\n\n##\n# Just a mental concept to imagine entries as wrappers over class methods (under the hood they are something not so straightforward, but this is a topic for a different story).\n#\ndef self.format(path:)\n  Services::Format.result(path: path)\nend\n")),(0,a.kt)("p",null,"Eventually, a list of entries may and must be considered as a ",(0,a.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/facade"},"Facade")," in front of the complex system."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"While having a code review of a new (or existing) feature, prefer to check its list of entries at the very beginning."),(0,a.kt)("p",{parentName:"admonition"},"This is the way to quickly get a summary of the feature and its main purpose."),(0,a.kt)("p",{parentName:"admonition"},"In other words, to get so-called ",(0,a.kt)("a",{parentName:"p",href:"/glossary/clean_code"},'"minimal context"'),"."),(0,a.kt)("p",{parentName:"admonition"},"After that, the intention of the internal feature services may become more obvious (hopefully \ud83d\ude42).")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"In order to find all feature triggers, just search for entries invocations using your favorite code editor."),(0,a.kt)("img",{src:(0,o.Z)("./img/glossary/fdd/entry/search.png")})))}u.isMDXComponent=!0}}]);