"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[1960],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var s=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,s,n=function(e,t){if(null==e)return{};var r,s,n={},a=Object.keys(e);for(s=0;s<a.length;s++)r=a[s],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)r=a[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=s.createContext({}),l=function(e){var t=s.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=l(e.components);return s.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(r),m=n,f=d["".concat(o,".").concat(m)]||d[m]||u[m]||a;return r?s.createElement(f,c(c({ref:t},p),{},{components:r})):s.createElement(f,c({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,c=new Array(a);c[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var l=2;l<a;l++)c[l]=r[l];return s.createElement.apply(null,c)}return s.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3805:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var s=r(7462),n=(r(7294),r(3905));const a={slug:"/api/tests/rspec/matchers/results/be_success",sidebar_position:1,title:"be_success"},c=void 0,i={unversionedId:"api/tests/rspec/matchers/results/be_success",id:"api/tests/rspec/matchers/results/be_success",title:"be_success",description:"Base Matcher:",source:"@site/docs/api/tests/rspec/matchers/results/be_success.mdx",sourceDirName:"api/tests/rspec/matchers/results",slug:"/api/tests/rspec/matchers/results/be_success",permalink:"/convenient_service_docs/api/tests/rspec/matchers/results/be_success",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/api/tests/rspec/matchers/results/be_success.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/api/tests/rspec/matchers/results/be_success",sidebar_position:1,title:"be_success"},sidebar:"docs",previous:{title:"Results",permalink:"/convenient_service_docs/category/results"},next:{title:"Best Practices",permalink:"/convenient_service_docs/category/best-practices"}},o={},l=[],p={toc:l};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,s.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Base Matcher:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ruby"},"be_success\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Chainings:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ruby"},"with_data(data)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ruby"},"# frozen_string_literal: true\n\nclass ApplyDefaultParamValues\n  include ConvenientService::Standard::Config\n\n  attr_reader :params, :defaults\n\n  def initialize(params:, defaults:)\n    @params = params\n    @defaults = defaults\n  end\n\n  def result\n    success(params: defaults.merge(params))\n  end\nend\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ruby"},'# frozen_string_literal: true\n\nRSpec.describe ApplyDefaultParamValues do\n  example_group "class methods" do\n    describe ".result" do\n      include ConvenientService::RSpec::Matchers::Results\n\n      subject(:result) { described_class.result(params: params, defaults: defaults) }\n\n      let(:params) { {title: ""} }\n      let(:defaults) { {tags: []} }\n      let(:params_with_defaults) { {title: "", tags: []} }\n\n      it "return success with merged params" do\n        expect(result).to be_success.with_data(params: params_with_defaults)\n      end\n\n      context "when both `params` and `defaults` have the same key" do\n        let(:params) { {title: "", tags: [:high_priority]} }\n        let(:params_with_defaults) { {title: "", tags: [:high_priority]} }\n\n        it "takes value from `params`" do\n          expect(result).to be_success.with_data(params: params_with_defaults)\n        end\n      end\n    end\n  end\nend\n')),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"\u2757 This page is still a work in progress. More info is yet to come \u2757")))}u.isMDXComponent=!0}}]);