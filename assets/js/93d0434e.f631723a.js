"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[6059],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>h});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=n.createContext({}),p=function(e){var r=n.useContext(o),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(o.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),h=a,f=d["".concat(o,".").concat(h)]||d[h]||u[h]||l;return t?n.createElement(f,i(i({ref:r},c),{},{components:t})):n.createElement(f,i({ref:r},c))}));function h(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=d;var s={};for(var o in r)hasOwnProperty.call(r,o)&&(s[o]=r[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<l;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4850:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=t(7462),a=(t(7294),t(3905));const l={slug:"/faq/why_both_failure_and_error",sidebar_position:1,title:"Why failures and errors? Why not just failure or error?"},i=void 0,s={unversionedId:"faq/why_both_failure_and_error",id:"faq/why_both_failure_and_error",title:"Why failures and errors? Why not just failure or error?",description:"Failure and errors have different fallbacks",source:"@site/docs/faq/why_both_failure_and_error.mdx",sourceDirName:"faq",slug:"/faq/why_both_failure_and_error",permalink:"/faq/why_both_failure_and_error",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/faq/why_both_failure_and_error.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/faq/why_both_failure_and_error",sidebar_position:1,title:"Why failures and errors? Why not just failure or error?"},sidebar:"docs",previous:{title:"Frequently Asked Questions",permalink:"/category/frequently-asked-questions"},next:{title:"Why errors? Why not exceptions?",permalink:"/faq/why_error_not_exception"}},o={},p=[{value:"Failure and errors have different fallbacks",id:"failure-and-errors-have-different-fallbacks",level:2}],c={toc:p};function u(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"failure-and-errors-have-different-fallbacks"},"Failure and errors have different fallbacks"),(0,a.kt)("p",null,"Consider the following user story."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"As a doctor I would like to see a list of the patient's allergies.")),(0,a.kt)("p",null,"The list is received from the third-party API."),(0,a.kt)("p",null,"Sometimes a controller for this task may be implemented as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'title="controllers/allergies_controller.rb"',title:'"controllers/allergies_controller.rb"'},'class AllergiesController < ApplicationController\n  # ...\n  def index\n    # `response` is a `Hash`.\n    response = ApiClient.get(\n      "/allergies",\n      params: {patient_id: allowed_patient_id}\n    )\n\n    @allergies = response.dig(:data, :allergies)\n  end\nend\n')),(0,a.kt)("p",null,"And the corresponding view."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-erb",metastring:'title="views/allergies/index.html.erb"',title:'"views/allergies/index.html.erb"'},'<h2>Allergies</h2>\n\n<% if @allergies.present? %>\n  <% @allergies.each do |allergy| %>\n    <p>\n      <div>\n        Name: <%= allergy[:name] %>\n      </div>\n      <div>\n        Symptoms: <%= allergy[:symptoms].join(", ") %>\n      </div>\n    </p>\n  <% end %>\n<% else %>\n  <span>\n    Patient has no allergies.\n  </span>\n<% end %>\n')),(0,a.kt)("p",null,"The code may look innocent from the first point of view, but the devil is in the details."),(0,a.kt)("p",null,"In a case, the API response has an unexpected format, ",(0,a.kt)("inlineCode",{parentName:"p"},"response.dig(:data, :allergies)")," returns ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,a.kt)("p",null,"Then ",(0,a.kt)("inlineCode",{parentName:"p"},"@allergies.present?")," is evaluated as ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," in the view."),(0,a.kt)("p",null,"As a consequence, the ",(0,a.kt)("inlineCode",{parentName:"p"},'"Patient has no allergies"')," string is displayed in the doctor's browser."),(0,a.kt)("p",null,"Just try to imagine what may happen when a doctor blindly relies on the page text \ud83d\ude2c?"),(0,a.kt)("p",null,"Unfortunately, a code with similar problems sometimes may be written even by senior developers \ud83d\ude22."),(0,a.kt)("p",null,"That is the main reason of why ",(0,a.kt)("a",{parentName:"p",href:"/"},"Convenient Service")," differentiate ",(0,a.kt)("a",{parentName:"p",href:"/basics/failures"},"failures")," and ",(0,a.kt)("a",{parentName:"p",href:"/basics/errors"},"errors"),"."),(0,a.kt)("p",null,"Sure, the lib still can NOT 100% guarantee the complete elimination of the issue."),(0,a.kt)("p",null,"However, it encourages the users to think about fallbacks and split the failures and errors from the beginning."),(0,a.kt)("p",null,"The curiosity or the confusion that people feel when they find it difficult to decide whether to use a ",(0,a.kt)("a",{parentName:"p",href:"/basics/failures"},"failure")," or an ",(0,a.kt)("a",{parentName:"p",href:"/basics/errors"},"error")," works as a provocation for them to open and read this article."),(0,a.kt)("p",null,"This way they become aware of the issue and share it with others more frequently."),(0,a.kt)("p",null,"Refactoring using ",(0,a.kt)("a",{parentName:"p",href:"/"},"Convenient Service")," is the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'title="controllers/allergies_controller.rb"',title:'"controllers/allergies_controller.rb"'},'class FetchAllergies\n  include ::ConvenientService::Standard::Config\n  # ...\n  def result\n    return error("API response does not have `data` key") unless response.has_key?(:data)\n    return error("API response data does not have `allergies` key") unless response[:data].has_key?(:allergies)\n\n    return failure("Patient `#{allowed_patient_id}` has no allergies") if response[:data][:allergies].empty?\n\n    success(allergies: response[:data][:allergies])\n  end\n\n  private\n\n  def response\n    # `response` is a `Hash`.\n    @response ||= ApiClient.get("/allergies", params: {patient_id: allowed_patient_id})\n  end\nend\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'title="controllers/allergies_controller.rb"',title:'"controllers/allergies_controller.rb"'},"class AllergiesController < ApplicationController\n  # ...\n  def index\n    @fetch_allergies_result = FetchAllergies.result(allowed_patient_id: allowed_patient_id)\n  end\nend\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-erb",metastring:'title="views/allergies/index.html.erb"',title:'"views/allergies/index.html.erb"'},'<h2>Allergies</h2>\n\n<% if @fetch_allergies_result.success? %>\n  <% @fetch_allergies_result.data[:allergies].each do |allergy| %>\n    <p>\n      <div>\n        Name: <%= allergy[:name] %>\n      </div>\n      <div>\n        Symptoms: <%= allergy[:symptoms].join(", ") %>\n      </div>\n    </p>\n  <% end %>\n<% elsif @fetch_allergies_result.failure? %>\n  <span>\n    Patient has no allergies.\n  </span>\n<% else # @fetch_allergies_result.error? %>\n  <span>\n    No allergies information available.\n  </span>\n  <div>\n    Try to refresh the page after a while.\n  <div>\n  <div>\n    If the issue persists please contact the support.\n  </div>\n<% end %>\n')),(0,a.kt)("p",null,"The code is more verbose, but that is the price of reliability."),(0,a.kt)("p",null,"Using the ",(0,a.kt)("a",{parentName:"p",href:"/basics/service_goals"},"service goal resolution terminology"),", this is what we have as a summary."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"@fetch_allergies_result.success?")," means that a patient 100% has allergies (positive service goal resolution)."),(0,a.kt)("p",{parentName:"li"}," That is why we freely display them.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"@fetch_allergies_result.failure?")," means that a patient 100% has NO allergies (negative service goal resolution)."),(0,a.kt)("p",{parentName:"li"},' So we are confident in the "Patient has no allergies" text.')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"@fetch_allergies_result.error?")," means that even after service invocation, we still don't know whether a patient has allergies or not (no service goal resolution at all)."),(0,a.kt)("p",{parentName:"li"},' Due to that, we are telling the truth that "No allergies information available" instead of the false-negative resolution that we had before the separation of failure and errors.'))))}u.isMDXComponent=!0}}]);