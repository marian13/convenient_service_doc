"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[5562],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=p(r),m=s,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,i=new Array(a);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3710:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var n=r(7462),s=(r(7294),r(3905));const a={slug:"/api/tests/rspec/matchers/results/be_error",sidebar_position:2,title:"be_error"},i=void 0,o={unversionedId:"api/tests/rspec/matchers/results/be_error",id:"api/tests/rspec/matchers/results/be_error",title:"be_error",description:"Base Matcher:",source:"@site/docs/api/tests/rspec/matchers/results/be_error.mdx",sourceDirName:"api/tests/rspec/matchers/results",slug:"/api/tests/rspec/matchers/results/be_error",permalink:"/convenient_service_docs/api/tests/rspec/matchers/results/be_error",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/api/tests/rspec/matchers/results/be_error.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/api/tests/rspec/matchers/results/be_error",sidebar_position:2,title:"be_error"},sidebar:"docs",previous:{title:"be_failure",permalink:"/convenient_service_docs/api/tests/rspec/matchers/results/be_failure"},next:{title:"be_success",permalink:"/convenient_service_docs/api/tests/rspec/matchers/results/be_success"}},c={},p=[],l={toc:p};function u(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Base Matcher:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"be_error\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Chainings:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"with_message(message)\nand_message(message)\nwith_code(code)\nand_code(code)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'# frozen_string_literal: true\n\nclass AssertFileExists\n  include ConvenientService::Standard::Config\n\n  attr_reader :path\n\n  def initialize(path:)\n    @path = path\n  end\n\n  def result\n    return error("File with path `#{path}` does NOT exist") unless ::File.exist?(path)\n\n    success\n  end\nend\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'# frozen_string_literal: true\n\nRSpec.describe AssertFileExists do\n  include ConvenientService::RSpec::Matchers::Results\n\n  let(:service) { described_class.new(path: path) }\n\n  describe "#result" do\n    subject(:result) { service.result }\n\n    context "when file with path does NOT exist" do\n      let(:path) { "non_existing_path" }\n\n      it "returns error with message" do\n        expect(result).to be_error.with_message("File with path `#{path}` does NOT exist")\n      end\n    end\n\n    context "when file with path exists" do\n      let(:tempfile) { Tempfile.new }\n      let(:path) { tempfile.path }\n\n      it "returns success" do\n        expect(result).to be_success.without_data\n      end\n    end\n  end\nend\n')),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"\u2757 This page is still a work in progress. More info is yet to come \u2757")))}u.isMDXComponent=!0}}]);