"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[3909],{2306:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>l});var n=i(4848),r=i(8453);const t={slug:"/basics/failures",sidebar_position:6,title:"Failures"},a=void 0,o={id:"basics/failures",title:"Failures",description:"Having an overview of errors, let's discuss the meaning of failures.",source:"@site/docs/basics/failures.mdx",sourceDirName:"basics",slug:"/basics/failures",permalink:"/basics/failures",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/basics/failures.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{slug:"/basics/failures",sidebar_position:6,title:"Failures"},sidebar:"docs",previous:{title:"Errors",permalink:"/basics/errors"},next:{title:"Success",permalink:"/basics/success"}},c={},l=[{value:"What is a failure?",id:"what-is-a-failure",level:2}];function u(e){const s={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.p,{children:"Having an overview of errors, let's discuss the meaning of failures."}),"\n",(0,n.jsx)(s.h2,{id:"what-is-a-failure",children:"What is a failure?"}),"\n",(0,n.jsx)(s.p,{children:"Errors prevent the achievement of the service goal due to unsatisfied validations or exceptions."}),"\n",(0,n.jsxs)(s.p,{children:["At the same time, ",(0,n.jsx)(s.em,{children:"failures"})," prevent the achievement of the service goal due to business reasons."]}),"\n",(0,n.jsx)(s.p,{children:"That is why is so vital to use meaningful names for services."}),"\n",(0,n.jsxs)(s.p,{children:["For instance, when the aim is ",(0,n.jsx)("u",{children:"to order a bus ticket"}),", call it - ",(0,n.jsx)(s.code,{children:"OrderBusTicket"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"So when the service is invoked, but the ticket is not ordered for some logical business reason, it should be treated as a failure."}),"\n",(0,n.jsx)(s.p,{children:"Why?"}),"\n",(0,n.jsx)(s.p,{children:"Business reason is not an error, since the input is valid, the environment is stable, but the service goal is still not achieved."}),"\n",(0,n.jsx)(s.p,{children:"Please, read the following code snippet carefully to get the idea."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'class OrderBusTicket\n  # ...\n  def result\n    return error("Bus is nil") if bus.nil?\n    return error("Bus `#{bus.number}` is NOT valid") unless bus.has_valid_number?\n\n    return failure("Bus has no available seats") if bus.full?\n    return failure("Bus trip is postponed") if Trip.for_bus(bus).postponed?\n\n    ticket = BusTerminal.issue_ticket(bus)\n\n    success(ticket: ticket)\n  rescue => exception\n    error("Ticket order for bus `#{name}` is not completed due to `#{exception.message}`")\n  end\nend\n'})}),"\n",(0,n.jsx)(s.p,{children:"And this is how it can be triggerred:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"result = OrderBusTicket.result(bus: bus)\n\nif result.failure?\n  # `result.message` is a string-like object with failure reason.\n  result.message\nend\n"})}),"\n",(0,n.jsxs)(s.p,{children:["When the bus is ",(0,n.jsx)(s.code,{children:"nil"})," we can not even try to order a ticket."]}),"\n",(0,n.jsx)(s.p,{children:"When the bus does not have a valid number, we can not even try to order a ticket."}),"\n",(0,n.jsx)(s.p,{children:"When an exception is raised, we can not complete the ticket order due to the technical issue."}),"\n",(0,n.jsx)(s.p,{children:"Hence errors are returned for those cases."}),"\n",(0,n.jsx)(s.p,{children:"But once all the validation preconditions are met and exceptions are avoided, the ticket can still not be ordered for business reasons."}),"\n",(0,n.jsx)(s.p,{children:"This is the place when failures come into play."}),"\n",(0,n.jsx)(s.p,{children:"The lack of available seats or the trip delay are examples of business reasons."}),"\n",(0,n.jsx)(s.p,{children:"Just accept the fact that at the given moment in time, there is no possibility to order a ticket for that specific bus."}),"\n",(0,n.jsx)(s.p,{children:"But the crucial point is that a failure is a strong and reliable explainer of why the desired effect hasn't happened."}),"\n",(0,n.jsx)(s.p,{children:"That is the key difference between errors and failures."}),"\n",(0,n.jsxs)(s.p,{children:["Errors give you ",(0,n.jsx)(s.a,{href:"/basics/service_goals#service-problem-resolutions",children:"no service goal resolution"})," at all."]}),"\n",(0,n.jsxs)(s.p,{children:["While failures provide a stable negative service goal resolution that is a ",(0,n.jsx)(s.a,{href:"/faq/why_both_failure_and_error",children:"strong foundation for the subsequent decision-making"}),"."]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,s,i)=>{i.d(s,{R:()=>a,x:()=>o});var n=i(6540);const r={},t=n.createContext(r);function a(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);