"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[6669],{3167:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var s=t(4848),r=t(8453);const i={slug:"/best_practices/fdd/cast_feature_arguments_inside_entries",sidebar_position:2,title:"Cast feature arguments inside entries"},a=void 0,c={id:"best_practices/fdd/cast_feature_arguments_inside_entries",title:"Cast feature arguments inside entries",description:"Usually, features have their own entities to represent their domain.",source:"@site/docs/best_practices/fdd/cast_feature_arguments_inside_entries.mdx",sourceDirName:"best_practices/fdd",slug:"/best_practices/fdd/cast_feature_arguments_inside_entries",permalink:"/best_practices/fdd/cast_feature_arguments_inside_entries",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/best_practices/fdd/cast_feature_arguments_inside_entries.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/best_practices/fdd/cast_feature_arguments_inside_entries",sidebar_position:2,title:"Cast feature arguments inside entries"},sidebar:"docs",previous:{title:"Describe feature public interface using entries",permalink:"/best_practices/fdd/describe_feature_public_interface_using_entries"},next:{title:"Advanced",permalink:"/category/advanced-1"}},d={},o=[];function u(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Usually, features have their own entities to represent their domain."}),"\n",(0,s.jsx)(n.p,{children:"Entry is the best place where outside-world objects can be cast into them."}),"\n",(0,s.jsxs)(n.p,{children:["For example, consider the ",(0,s.jsx)(n.code,{children:"User"})," entity for the ",(0,s.jsx)(n.code,{children:"LoginSession"})," feature."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"module Features\n  class LoginSession\n    module Entities\n      class User\n        def initialize(email:, password:)\n          @email = email\n          @password = password\n        end\n\n        def self.cast(object)\n          if object.instance_of?(::User)\n            Entities::User.new(email: object.email_address, password: object.encrypted_password)\n          else\n            # ...\n          end\n        end\n\n        # ...\n      end\n    end\n  end\nend\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is how an entry may convert a raw ",(0,s.jsx)(n.code,{children:"user"})," object into feature specific entity."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"module Features\n  class LoginSession\n    include ConvenientService::Feature::Standard::Config\n\n    def start(**kwargs)\n      kwargs[:user] = Entities::User.cast(kwargs[:user])\n\n      Services::Login.result(**kwargs)\n    end\n  end\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);