"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[2993],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=s(t),m=a,v=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return t?r.createElement(v,o(o({ref:n},c),{},{components:t})):r.createElement(v,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:a,o[1]=d;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},392:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const i={slug:"/best_practices/advanced/invoke_proxy_middleware_behavior_via_public_method",sidebar_position:1,title:"Invoke proxy middleware behavior via public method"},o=void 0,d={unversionedId:"best_practices/advanced/invoke_proxy_middleware_behavior_via_public_method",id:"best_practices/advanced/invoke_proxy_middleware_behavior_via_public_method",title:"Invoke proxy middleware behavior via public method",description:"How?",source:"@site/docs/best_practices/advanced/invoke_proxy_middleware_behavior_via_public_method.mdx",sourceDirName:"best_practices/advanced",slug:"/best_practices/advanced/invoke_proxy_middleware_behavior_via_public_method",permalink:"/best_practices/advanced/invoke_proxy_middleware_behavior_via_public_method",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/best_practices/advanced/invoke_proxy_middleware_behavior_via_public_method.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/best_practices/advanced/invoke_proxy_middleware_behavior_via_public_method",sidebar_position:1,title:"Invoke proxy middleware behavior via public method"},sidebar:"docs",previous:{title:"Advanced",permalink:"/category/advanced-1"},next:{title:"Frequently Asked Questions",permalink:"/category/frequently-asked-questions"}},l={},s=[{value:"How?",id:"how",level:2},{value:"Why?",id:"why",level:2},{value:"Why not?",id:"why-not",level:2}],c={toc:s};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"how"},"How?"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"##\n# Okish.\n#\nmodule Plugins\n  module CanHaveConnectedSteps\n    class Middleware < MethodChainMiddleware\n      intended_for :result, entity: :service\n\n      def next(...)\n        return chain.next(...) if entity.steps.none?\n\n        entity.steps.each_evaluated_step do |step|\n          step.save_outputs_in_organizer!\n\n          # ...\n        end\n\n        entity.steps.result\n      end\n    end\n  end\nend\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"##\n# Better.\n#\nmodule Plugins\n  module CanHaveConnectedSteps\n    class Middleware < MethodChainMiddleware\n      intended_for :result, entity: :service\n\n      def next(...)\n        return chain.next(...) if entity.steps.none?\n\n        entity.steps_result(...)\n      end\n    end\n  end\nend\n\nmodule Plugins\n  module CanHaveConnectedSteps\n    module Concern\n      include Support::Concern\n\n      instance_methods do\n        def steps_result\n          # ...\n\n          steps.each_evaluated_step do |step|\n            step.save_outputs_in_organizer!\n\n            # ...\n          end\n\n          steps.result\n        end\n\n        # ...\n      end\n    end\n  end\nend\n")),(0,a.kt)("h2",{id:"why"},"Why?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"It allows end-users to create middlewares specifically for proxy middleware behavior. For example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"##\n# Good.\n#\nclass Service\n  include ConvenientService::Standard::Config\n\n  middlewares :steps_result do\n    # ...\n  end\n\n  # ...\nend\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"It decreases the amount of type checks."),(0,a.kt)("p",{parentName:"li"},"Without the extracted method, the end-user requries to utilize type checks to distinguish return values."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"##\n# Bad.\n#\nclass Middleware < MethodChainMiddleware\n  intended_for :result, entity: :service\n\n  def next(...)\n    result = chain.next(...)\n\n    if result.from_step? # Type check.\n      some_logic_with(result)\n    else\n      # ...\n    end\n  end\nend\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"##\n# Better.\n#\nclass Middleware < MethodChainMiddleware\n  intended_for :step_result, entity: :service\n\n  def next(...)\n    result = chain.next(...)\n\n    some_logic_with(result)\n  end\nend\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"It decreases the amount of order-dependent middlewares."))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"It simplifies specs. Methods are easier to tests than middlewares.")),(0,a.kt)("h2",{id:"why-not"},"Why not?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When proxy middleware behavior is truly private.")))}p.isMDXComponent=!0}}]);