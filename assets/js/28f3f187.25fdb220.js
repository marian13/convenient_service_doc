"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[9156],{8250:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var c=n(4848),t=n(8453);const i={slug:"/basics/success",sidebar_position:6,title:"Success"},a=void 0,r={id:"basics/success",title:"Success",description:"And finally, success.",source:"@site/docs/basics/success.mdx",sourceDirName:"basics",slug:"/basics/success",permalink:"/basics/success",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/basics/success.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{slug:"/basics/success",sidebar_position:6,title:"Success"},sidebar:"docs",previous:{title:"Failures",permalink:"/basics/failures"},next:{title:"Result-ducks",permalink:"/basics/results_are_ducks"}},o={},l=[{value:"What is a success?",id:"what-is-a-success",level:2},{value:"Success data",id:"success-data",level:2}];function d(e){const s={admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(s.p,{children:["And finally, ",(0,c.jsx)(s.em,{children:"success"}),"."]}),"\n",(0,c.jsx)(s.h2,{id:"what-is-a-success",children:"What is a success?"}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.em,{children:"Success"})," is a kind of result when the service objective is fully satisfied."]}),"\n",(0,c.jsx)(s.p,{children:"All errors and failures preconditions are met."}),"\n",(0,c.jsx)(s.p,{children:"Every validation check is passed."}),"\n",(0,c.jsx)(s.p,{children:"There is no obstacle that prohibits achieving the service goal."}),"\n",(0,c.jsxs)(s.p,{children:["In general, a service must have one and only one reason to return ",(0,c.jsx)(s.code,{children:"success"}),"."]}),"\n",(0,c.jsxs)(s.admonition,{type:"note",children:[(0,c.jsx)(s.p,{children:"No sense to hide the truth, sometimes it is really necessary to return multiple success cases from a single service (For example, fake HTTP responses for external testing systems)."}),(0,c.jsx)(s.p,{children:"As a rule of thumb, if you start to feel that you have such a scenario, always prefer to think about how to create multiple services instead."}),(0,c.jsx)(s.p,{children:"If not, be ready to strongly argue why your situation is truly exceptional and unavoidable."})]}),"\n",(0,c.jsx)(s.h2,{id:"success-data",children:"Success data"}),"\n",(0,c.jsx)(s.p,{children:"Success results may have some data (So-called Boolean Services are often without success data)."}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.em,{children:"Data"})," is a hash-like structure with values received by service processing."]}),"\n",(0,c.jsx)(s.p,{children:"Example:"}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-ruby",children:"class FetchPopularVideos\n  # ...\n  def result\n    # ...\n    # Actual logic to fetch videos.\n    # ...\n    success(\n      own_channel_videos: own_channel_videos,\n      followers_videos: followers_videos,\n      all_videos: own_channel_videos.concat(followers_videos)\n    )\n  end\nend\n"})}),"\n",(0,c.jsx)(s.p,{children:"With invocation:"}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-ruby",children:"result = FetchPopularVideos.result\n\nif result.success?\n  # No `data` checks here, since `result.success?` guarantees that `result.data[:all_videos]` are 100% valid.\n  markup = result.data[:all_videos].map { |video| generate_markup(video) }.join\n  # ...\nend\n"})})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,c.jsx)(s,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>r});var c=n(6540);const t={},i=c.createContext(t);function a(e){const s=c.useContext(i);return c.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),c.createElement(i.Provider,{value:s},e.children)}}}]);