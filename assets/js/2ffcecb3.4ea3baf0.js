"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[7772],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,m=u["".concat(d,".").concat(h)]||u[h]||c[h]||i;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9316:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={slug:"/guides/advanced/how_to_migrate_from_standard_v1",sidebar_position:2,title:"How to migrate from `Standard::V1`?"},s=void 0,o={unversionedId:"guides/advanced/how_to_migrate_from_standard_v1",id:"guides/advanced/how_to_migrate_from_standard_v1",title:"How to migrate from `Standard::V1`?",description:"Consider the following old service that is using the outdated ConvenientService::Config.",source:"@site/docs/guides/advanced/how_to_migrate_from_standard_v1.mdx",sourceDirName:"guides/advanced",slug:"/guides/advanced/how_to_migrate_from_standard_v1",permalink:"/guides/advanced/how_to_migrate_from_standard_v1",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/advanced/how_to_migrate_from_standard_v1.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/guides/advanced/how_to_migrate_from_standard_v1",sidebar_position:2,title:"How to migrate from `Standard::V1`?"},sidebar:"docs",previous:{title:"How to print library logs?",permalink:"/guides/advanced/logging/how_to_print_lib_logs"},next:{title:"API",permalink:"/category/api"}},d={},l=[],p={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Consider the following old service that is using the outdated ",(0,a.kt)("a",{parentName:"p",href:"/glossary/advanced/standard_v1"},"ConvenientService::Standard::V1::Config"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class AssertFileNotEmpty\n  include ConvenientService::Standard::V1::Config\n\n  attr_reader :path\n\n  def initialize(path:)\n    @path = path\n  end\n\n  def result\n    return failure(path: "Path is \\`nil\\`") if path.nil?\n    return failure(path: "Path is empty") if path.empty?\n\n    return error("File is empty at path \\`#{path}\\`") if ::File.zero?(path)\n\n    success\n  end\nend\n')),(0,a.kt)("p",null,"Its specs may look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'require "spec_helper"\n\nRSpec.describe AssertFileExists do\n  include ConvenientService::RSpec::Matchers::Results\n  include ConvenientService::RSpec::Matchers::IncludeModule\n\n  let(:result) { described_class.result(path: path) }\n\n  example_group "modules" do\n    subject { described_class }\n\n    it { is_expected.to include_module(ApplicationService::Config) }\n  end\n\n  example_group "class methods" do\n    describe ".result" do\n      context "when assertion that file exists is NOT successful" do\n        context "when `path` is NOT valid" do\n          context "when `path` is `nil`" do\n            let(:path) { nil }\n\n            it "returns `failure` with `data`" do\n              expect(result).to be_failure.with_data(path: "Path is `nil`").of_service(described_class).without_step\n            end\n          end\n\n          context "when `path` is empty" do\n            let(:path) { "" }\n\n            it "returns `failure` with `data`" do\n              expect(result).to be_failure.with_data(path: "Path is empty").of_service(described_class).without_step\n            end\n          end\n        end\n\n        context "when file with `path` does NOT exist" do\n          let(:path) { "non_existing_path" }\n\n          it "returns `error` with `message`" do\n            expect(result).to be_error.with_message("File with path `#{path}` does NOT exist").of_service(described_class).without_step\n          end\n        end\n      end\n\n      context "when assertion that file exists is successful" do\n        ##\n        # NOTE: Tempfile uses its own `let` in order to prevent its premature garbage collection.\n        #\n        let(:tempfile) { Tempfile.new }\n        let(:path) { tempfile.path }\n\n        it "returns `success`" do\n          expect(result).to be_success.of_service(described_class).without_step\n        end\n      end\n    end\n  end\nend\n')),(0,a.kt)("p",null,"In order to migrate it, we need to perform four actions:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Rename the outdated configuration to the modern one.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class AssertFileNotEmpty\n  # before\n  include ConvenientService::Standard::V1::Config\n\n  # after\n  include ConvenientService::Standard::Config\n\n  # ...\nend\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Rename ",(0,a.kt)("inlineCode",{parentName:"li"},"failures")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"errors")," results inside the source code.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class AssertFileNotEmpty\n  # ...\n\n  # before\n  def result\n    return failure(path: "Path is \\`nil\\`") if path.nil?\n    return failure(path: "Path is empty") if path.empty?\n\n    return error("File is empty at path \\`#{path}\\`") if ::File.zero?(path)\n\n    success\n  end\n\n  # after\n  def result\n    return error("Path is \\`nil\\`") if path.nil?\n    return error("Path is empty") if path.empty?\n\n    return failure("File is empty at path \\`#{path}\\`") if ::File.zero?(path)\n\n    success\n  end\nend\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},'This update should NOT be "blind".'),(0,a.kt)("p",{parentName:"admonition"},"Make sure ",(0,a.kt)("inlineCode",{parentName:"p"},"failures")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"errors")," are used according to their meanings.")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Rename ",(0,a.kt)("inlineCode",{parentName:"li"},"failures")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"errors")," results inside the specs.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'require "spec_helper"\n\nRSpec.describe AssertFileExists do\n  # ...\n\n  # before\n  it "returns `failure` with `data`" do\n    expect(result).to be_failure.with_data(path: "Path is `nil`").of_service(described_class).without_step\n  end\n\n  # after\n  it "returns `error` with `message`" do\n    expect(result).to be_error.with_message("Path is `nil`").of_service(described_class).without_step\n  end\n\n  # before\n  it "returns `failure` with `data`" do\n    expect(result).to be_failure.with_data(path: "Path is empty").of_service(described_class).without_step\n  end\n\n  # after\n  it "returns `error` with `message`" do\n    expect(result).to be_error.with_message("Path is empty").of_service(described_class).without_step\n  end\n\n  # before\n  it "returns `error` with `message`" do\n    expect(result).to be_error.with_message("File with path `#{path}` does NOT exist").of_service(described_class).without_step\n  end\n\n  # after\n  it "returns `failure` with `message`" do\n    expect(result).to be_failure.with_message("File with path `#{path}` does NOT exist").of_service(described_class).without_step\n  end\n\n  # ...\nend\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Again, please, ensure that ",(0,a.kt)("inlineCode",{parentName:"p"},"failures")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"errors")," are used according to their meanings."),(0,a.kt)("p",{parentName:"admonition"},"Otherwise, this renaming makes no sense.")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Repeat the same procedure for the rest services that are using ",(0,a.kt)("a",{parentName:"li",href:"/glossary/advanced/standard_v1"},"ConvenientService::Standard::V1::Config"),".")),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Do not mix services with the modern and outdated configurations."),(0,a.kt)("p",{parentName:"admonition"},"For example, that is possible with steps."),(0,a.kt)("p",{parentName:"admonition"},"Instead, update all outdated services at once or delay this refactoring for the better times."),(0,a.kt)("p",{parentName:"admonition"},"If you structure your services as isolated features, then refactor the whole feature.")))}c.isMDXComponent=!0}}]);