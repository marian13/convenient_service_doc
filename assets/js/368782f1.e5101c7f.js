"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[4618],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,m=p["".concat(o,".").concat(f)]||p[f]||d[f]||s;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4920:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={slug:"/guides/how_to_debug_services_via_callbacks",sidebar_position:4,title:"How to debug services via callbacks?"},i=void 0,l={unversionedId:"guides/how_to_debug_services_via_callbacks",id:"guides/how_to_debug_services_via_callbacks",title:"How to debug services via callbacks?",description:"Use after result",source:"@site/docs/guides/how_to_debug_services_via_callbacks.mdx",sourceDirName:"guides",slug:"/guides/how_to_debug_services_via_callbacks",permalink:"/guides/how_to_debug_services_via_callbacks",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/how_to_debug_services_via_callbacks.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{slug:"/guides/how_to_debug_services_via_callbacks",sidebar_position:4,title:"How to debug services via callbacks?"},sidebar:"docs",previous:{title:"How to pass a value to step from class/instance scope?",permalink:"/guides/how_to_pass_value_to_step_class_or_instance_scope"},next:{title:"How to find result parents?",permalink:"/guides/how_to_find_result_parents"}},o={},c=[{value:"Use <code>after</code> result",id:"use-after-result",level:2},{value:"Use <code>after</code> step",id:"use-after-step",level:2},{value:"Use <code>around</code> result",id:"use-around-result",level:2},{value:"Use <code>after</code> step",id:"use-after-step-1",level:2},{value:"Real-world example",id:"real-world-example",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"use-after-result"},"Use ",(0,a.kt)("inlineCode",{parentName:"h2"},"after")," result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"after :result do |result|\n  binding.pry\nend\n")),(0,a.kt)("h2",{id:"use-after-step"},"Use ",(0,a.kt)("inlineCode",{parentName:"h2"},"after")," step"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"##\n# Step is Result-like duck.\n#\nafter :step do |step|\n  byebug\nend\n")),(0,a.kt)("h2",{id:"use-around-result"},"Use ",(0,a.kt)("inlineCode",{parentName:"h2"},"around")," result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'after :result do |chain|\n  puts "before"\n\n  result = chain.yield\n\n  p "after"\nend\n')),(0,a.kt)("h2",{id:"use-after-step-1"},"Use ",(0,a.kt)("inlineCode",{parentName:"h2"},"after")," step"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'##\n# Step is Result-like duck.\n#\nafter :step do |step|\n  binding.break\n\n  step = chain.yield\n\n  print "after"\nend\n')),(0,a.kt)("h2",{id:"real-world-example"},"Real-world example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'# frozen_string_literal: true\n\nmodule Services\n  class AssertNpmPackageAvailable\n    include ConvenientService::Standard::Config\n\n    attr_reader :name\n\n    step :validate_name\n\n    step Services::AssertNodeAvailable\n\n    step Services::RunShell, in: {command: -> { "npm list #{name} --depth=0 > /dev/null 2>&1" }}\n\n    # highlight-start\n    after :result do |result|\n      binding.pry\n    end\n\n    after :step do |step|\n      byebug\n    end\n    # highlight-end\n\n    def initialize(name:)\n      @name = name\n    end\n\n    private\n\n    def validate_name\n      return failure(name: "Name is `nil`") if name.nil?\n      return failure(name: "Name is empty") if name.empty?\n\n      success\n    end\n  end\nend\n')))}d.isMDXComponent=!0}}]);