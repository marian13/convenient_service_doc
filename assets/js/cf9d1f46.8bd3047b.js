"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[4548],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=s.createContext({}),p=function(e){var t=s.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return s.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),k=a,m=d["".concat(o,".").concat(k)]||d[k]||c[k]||r;return n?s.createElement(m,i(i({ref:t},u),{},{components:n})):s.createElement(m,i({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4534:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var s=n(7462),a=(n(7294),n(3905));const r={slug:"/guides/usage/how_to_use_steps",sidebar_position:3,title:"How to use service steps?"},i=void 0,l={unversionedId:"guides/usage/how_to_use_steps",id:"guides/usage/how_to_use_steps",title:"How to use service steps?",description:"Which types of steps are available?",source:"@site/docs/guides/usage/how_to_use_steps.mdx",sourceDirName:"guides/usage",slug:"/guides/usage/how_to_use_steps",permalink:"/guides/usage/how_to_use_steps",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/usage/how_to_use_steps.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/guides/usage/how_to_use_steps",sidebar_position:3,title:"How to use service steps?"},sidebar:"docs",previous:{title:"How to use service results?",permalink:"/guides/usage/how_to_use_results"},next:{title:"How to pass a value to step from class/instance scope?",permalink:"/guides/usage/how_to_pass_value_to_step_class_or_instance_scope"}},o={},p=[{value:"Which types of steps are available?",id:"which-types-of-steps-are-available",level:2},{value:"How to define a service step?",id:"how-to-define-a-service-step",level:2},{value:"How to define a method step?",id:"how-to-define-a-method-step",level:2},{value:"What is the result of a service with steps?",id:"what-is-the-result-of-a-service-with-steps",level:2},{value:"What is an organizer?",id:"what-is-an-organizer",level:2},{value:"How to pass arguments to steps?",id:"how-to-pass-arguments-to-steps",level:2},{value:"How to access step result data?",id:"how-to-access-step-result-data",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"which-types-of-steps-are-available"},"Which types of steps are available?"),(0,a.kt)("p",null,"The two criteria currently categorize steps."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"By action: service and method steps.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"By control flow: ",(0,a.kt)("inlineCode",{parentName:"p"},"and"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"or"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"not")," steps."))),(0,a.kt)("h2",{id:"how-to-define-a-service-step"},"How to define a service step?"),(0,a.kt)("p",null,"You can register existing services as steps of other services using the ",(0,a.kt)("inlineCode",{parentName:"p"},"step")," directive."),(0,a.kt)("p",null,"Let's have a look at it in practice."),(0,a.kt)("p",null,"Having the ",(0,a.kt)("inlineCode",{parentName:"p"},"Service")," service."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n")),(0,a.kt)("p",null,"We can use it as a step of the ",(0,a.kt)("inlineCode",{parentName:"p"},"OtherService")," service in the following way."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class OtherService\n  include ConvenientService::Standard::Config\n\n  step Service\nend\n")),(0,a.kt)("p",null,"This code works almost the same as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class OtherService\n  include ConvenientService::Standard::Config\n\n  def result\n    Service.result\n  end\nend\n")),(0,a.kt)("p",null,"That is why for a single-step service the usage of steps may not seem very beneficial."),(0,a.kt)("p",null,"So consider a more complex example."),(0,a.kt)("p",null,"Now we have 3 services."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class FooService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class BarService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class BazService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"HostService")," uses them as steps."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class HostService\n  include ConvenientService::Standard::Config\n\n  step FooService\n  step BarService\n  step BazService\nend\n")),(0,a.kt)("p",null,"Rough ",(0,a.kt)("inlineCode",{parentName:"p"},"HostService")," equivalent without steps may be implemented as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class HostService\n  include ConvenientService::Standard::Config\n\n  def result\n    foo_result = FooService.result\n\n    return foo_result unless foo_result.success?\n\n    bar_result = BarService.result\n\n    return bar_result unless bar_result.success?\n\n    BazService.result\n  end\nend\n")),(0,a.kt)("p",null,"As you can see, steps allow us to eliminate at least 2 assignments and 2 if-conditionals for this particular example."),(0,a.kt)("p",null,"Sure, those assignments and if-conditionals are still performed under the hood, but it is no longer a developer's responsibility to manage them."),(0,a.kt)("p",null,"Now the benefit of steps becomes more obvious, but that is not the only benefit."),(0,a.kt)("p",null,"Other guides are going to demonstrate the additional simplifications."),(0,a.kt)("h2",{id:"how-to-define-a-method-step"},"How to define a method step?"),(0,a.kt)("p",null,"Any method can be a step."),(0,a.kt)("p",null,"The only requirement is that it must return a result."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  include ConvenientService::Standard::Config\n\n  step :foo\n\n  def foo\n    success\n  end\nend\n")),(0,a.kt)("h2",{id:"what-is-the-result-of-a-service-with-steps"},"What is the result of a service with steps?"),(0,a.kt)("p",null,"Consider the following service."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  include ConvenientService::Standard::Config\n\n  step :foo\n  step :bar\n  step :baz\n\n  def foo\n    success\n  end\n\n  def bar\n    success\n  end\n\n  def baz\n    success\n  end\nend\n")),(0,a.kt)("p",null,"When all steps are successful, the overall service result is the last step result."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result = Service.result\n# => <Service::Result status: :success>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result.step\n# => <Service::Step method: :baz>\n")),(0,a.kt)("p",null,"Let's check some other service."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class OtherService\n  include ConvenientService::Standard::Config\n\n  step :foo\n  step :bar\n  step :baz\n\n  def foo\n    success\n  end\n\n  def bar\n    failure("Message from `bar`") # `error("Message from `bar`")` also stops the sequence.\n  end\n\n  def baz\n    raise "Not raised exception"\n\n    success\n  end\nend\n')),(0,a.kt)("p",null,"When any step is NOT successful, the overall service result is that NOT successful step result."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result = OtherService.result\n# => <OtherService::Result status: :failure>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"result.step\n# => <OtherService::Step method: :bar>\n")),(0,a.kt)("p",null,"It is important to note that the remaining steps are NOT even evaluated."),(0,a.kt)("p",null,"That is why the exception from ",(0,a.kt)("inlineCode",{parentName:"p"},"baz")," was not raised."),(0,a.kt)("h2",{id:"what-is-an-organizer"},"What is an organizer?"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Organizer")," is a service with steps."),(0,a.kt)("p",null,"It is also worth mentioning that services without steps are often referred to as ",(0,a.kt)("em",{parentName:"p"},"regular services"),"."),(0,a.kt)("h2",{id:"how-to-pass-arguments-to-steps"},"How to pass arguments to steps?"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"in")," option of the ",(0,a.kt)("inlineCode",{parentName:"p"},"step")," directive."),(0,a.kt)("p",null,"Here is a quick example."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"NestedService")," accepts two keyword arguments - ",(0,a.kt)("inlineCode",{parentName:"p"},":first_kwarg"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},":second_kwarg"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class NestedService\n  include ConvenientService::Standard::Config\n\n  attr_reader :first_kwarg, :second_kwarg\n\n  def initialize(:first_kwarg, :second_kwarg)\n    @first_kwarg = first_kwarg\n    @second_kwarg = second_kwarg\n  end\n\n  def result\n    puts "first_kwarg: `#{first_kwarg}`"\n    puts "second_kwarg: `#{second_kwarg}`"\n\n    success\n  end\nend\n')),(0,a.kt)("p",null,"This is how the ",(0,a.kt)("inlineCode",{parentName:"p"},"in")," option is utilized in order to pass them as step inputs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class Service\n  include ConvenientService::Standard::Config\n\n  step NestedService, in: [:first_kwarg, :second_kwarg]\n\n  def first_kwarg\n    :foo\n  end\n\n  def second_kwarg\n    :bar\n  end\nend\n")),(0,a.kt)("p",null,"As you can see below, the corresponding methods' return values are passed as ",(0,a.kt)("inlineCode",{parentName:"p"},":first_kwarg")," and ",(0,a.kt)("inlineCode",{parentName:"p"},":second_kwarg")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"NestedService")," step when we call the organizer."),(0,a.kt)("p",null,"For this particular case, it is ",(0,a.kt)("inlineCode",{parentName:"p"},":foo")," and ",(0,a.kt)("inlineCode",{parentName:"p"},":bar")," respectively."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'result = Service.result\n# => "first_kwarg: `:foo`"\n# => "second_kwarg: `:bar`"\n# => <Service::Result status: :success>\n')),(0,a.kt)("p",null,"In order to simplify the understanding of the step inputs, let's have a closer look at this specific line."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"step NestedService, in: [:first_kwarg, :second_kwarg]\n")),(0,a.kt)("p",null,"Whenever you have trouble with its meaning, please, remember that it can be always ",(0,a.kt)("a",{parentName:"p",href:"/basics/step_to_result_translation_table"},"mentally translated")," like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"def first_step_result\n  @first_step_result ||= NestedService.result(\n    first_kwarg: first_kwarg,\n    second_kwarg: second_kwarg\n  )\nend\n")),(0,a.kt)("p",null,"That is why it is important to have corresponding instance methods defined for step inputs in the organizer class."),(0,a.kt)("p",null,"More examples of the ",(0,a.kt)("inlineCode",{parentName:"p"},"in")," option usage may be found in ",(0,a.kt)("a",{parentName:"p",href:"/basics/step_to_result_translation_table"},"the so-called translation table"),"."),(0,a.kt)("h2",{id:"how-to-access-step-result-data"},"How to access step result data?"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"out")," option of the ",(0,a.kt)("inlineCode",{parentName:"p"},"step")," directive."),(0,a.kt)("p",null,"Here is a short example."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"NestedService")," returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"success")," with data that has two keys - ",(0,a.kt)("inlineCode",{parentName:"p"},":first_data_key"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},":second_data_key"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class NestedService\n  include ConvenientService::Standard::Config\n\n  def result\n    success(first_data_key: :baz, second_data_key: :qux)\n  end\nend\n")),(0,a.kt)("p",null,"This is how the ",(0,a.kt)("inlineCode",{parentName:"p"},"out")," option is utilized in order to access them as step outputs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'class Service\n  include ConvenientService::Standard::Config\n\n  step NestedService, out: [:first_data_key, :second_data_key]\n\n  step :result\n\n  def result\n    puts "first_data_key: `#{first_data_key}`"\n    puts "second_data_key: `#{second_data_key}`"\n\n    success\n  end\nend\n')),(0,a.kt)("p",null,"Step result data values become available via the ",(0,a.kt)("inlineCode",{parentName:"p"},"first_data_key")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"second_data_key")," instance methods."),(0,a.kt)("p",null,"For this particular case, they return ",(0,a.kt)("inlineCode",{parentName:"p"},":baz")," and ",(0,a.kt)("inlineCode",{parentName:"p"},":qux"),", the same values that were passed to the original ",(0,a.kt)("inlineCode",{parentName:"p"},"success")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"NestedService")," service."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'result = Service.result\n# => "first_data_key: `:baz`"\n# => "second_data_key: `:qux`"\n# => <Service::Result status: :success>\n')),(0,a.kt)("p",null,"In order to simplify the understanding of the step outputs, let's have a closer look at this specific line."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"step NestedService, out: [:first_data_key, :second_data_key]\n")),(0,a.kt)("p",null,"Whenever you have trouble with its meaning, please, remember that it can be always ",(0,a.kt)("a",{parentName:"p",href:"/basics/step_to_result_translation_table"},"mentally translated")," like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"def first_step_result\n  @first_step_result ||= NestedService.result\nend\n\ndef first_data_key\n  first_step_result.data[:first_data_key]\nend\n\ndef second_data_key\n  first_step_result.data[:second_data_key]\nend\n")),(0,a.kt)("p",null,"Having this information, avoid defining instance methods with the same names as step outputs in the organizer class."),(0,a.kt)("p",null,"Otherwise, your methods will be silently overridden."),(0,a.kt)("p",null,"More examples of the ",(0,a.kt)("inlineCode",{parentName:"p"},"out")," option usage may be found in ",(0,a.kt)("a",{parentName:"p",href:"/basics/step_to_result_translation_table"},"the so-called translation table"),"."))}c.isMDXComponent=!0}}]);