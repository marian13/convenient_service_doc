"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[516],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>v});var n=t(7294);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,s=function(e,r){if(null==e)return{};var t,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(t),v=s,f=p["".concat(l,".").concat(v)]||p[v]||d[v]||i;return t?n.createElement(f,o(o({ref:r},u),{},{components:t})):n.createElement(f,o({ref:r},u))}));function v(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var i=t.length,o=new Array(i);o[0]=p;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a.mdxType="string"==typeof e?e:s,o[1]=a;for(var c=2;c<i;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3803:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var n=t(7462),s=(t(7294),t(3905));const i={slug:"/basics/service_goals",sidebar_position:5,title:"Service goals"},o=void 0,a={unversionedId:"basics/service_goals",id:"basics/service_goals",title:"Service goals",description:"What is the service goal?",source:"@site/docs/basics/service_goals.mdx",sourceDirName:"basics",slug:"/basics/service_goals",permalink:"/basics/service_goals",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/basics/service_goals.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{slug:"/basics/service_goals",sidebar_position:5,title:"Service goals"},sidebar:"docs",previous:{title:"Results",permalink:"/basics/results"},next:{title:"Errors",permalink:"/basics/errors"}},l={},c=[{value:"What is the service goal?",id:"what-is-the-service-goal",level:2},{value:"Service problem resolutions",id:"service-problem-resolutions",level:2}],u={toc:c};function d(e){let{components:r,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"what-is-the-service-goal"},"What is the service goal?"),(0,s.kt)("p",null,"The ",(0,s.kt)("em",{parentName:"p"},"service goal")," is the desired effect of an action/operation."),(0,s.kt)("p",null,"What does it mean in practise?"),(0,s.kt)("p",null,"Imagine the service below:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"class FindUser\n  # ...\n\n  def initialize(user_id:)\n    @user_id = user_id\n  end\n\n  def result\n    # ...\n  end\nend\n")),(0,s.kt)("p",null,"Its desired effect is the found user record."),(0,s.kt)("p",null,"Simple and straightforward."),(0,s.kt)("p",null,"So, if you are a developer who wants to utilize this service, the only reason why you would decide to do it is to get the user record."),(0,s.kt)("p",null,"Thus the following conclusion can be made."),(0,s.kt)("p",null,"We always invoke a service to achieve some concrete goal defined by the service author."),(0,s.kt)("p",null,"In other words, we call a service to resolve some specific problem stated by the service name."),(0,s.kt)("h2",{id:"service-problem-resolutions"},"Service problem resolutions"),(0,s.kt)("p",null,"Let's come back to the ",(0,s.kt)("inlineCode",{parentName:"p"},"FindUser")," service and add some basic implementation for it."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'class FindUser\n  include ::ConvenientService::Standard::Config\n\n  def initialize(user_id:)\n    @user_id = user_id\n  end\n\n  def result\n    return error("User id in NOT an integer") unless user_id.instance_of?(::Integer)\n\n    user = ::User.find_by(id: user_id)\n\n    return failure("NO user with id `#{user_id}`") unless user\n\n    success(user: user)\n  end\nend\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"result = FindUser.result(user_id: user_id)\n# => `success`, `failure` or `error`.\n")),(0,s.kt)("p",null,"As you can see, it may return one of the three possible result types that represent different resolutions."),(0,s.kt)("p",null,"Each of them has a specific meaning."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"success")," result communicates to its caller the positive service problem resolution, since the found user record is returned as expected."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"failure")," result provides the negative resolution, because the user record does not exist in database."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"error")," result gives no resolution at all, since the service no even tried to find the user."))}d.isMDXComponent=!0}}]);