"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[3055],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var s=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=s.createContext({}),c=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return s.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},d=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?s.createElement(y,o(o({ref:n},p),{},{components:t})):s.createElement(y,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<a;c++)o[c]=t[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1001:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=t(7462),r=(t(7294),t(3905));const a={slug:"/best_practices/service_has_only_one_success",sidebar_position:1,title:"Service has only one `success`"},o=void 0,i={unversionedId:"best_practices/service_has_only_one_success",id:"best_practices/service_has_only_one_success",title:"Service has only one `success`",description:"Most of the time it is relatively easy to follow this rule.",source:"@site/docs/best_practices/service_has_only_one_success.mdx",sourceDirName:"best_practices",slug:"/best_practices/service_has_only_one_success",permalink:"/convenient_service_docs/best_practices/service_has_only_one_success",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/best_practices/service_has_only_one_success.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/best_practices/service_has_only_one_success",sidebar_position:1,title:"Service has only one `success`"},sidebar:"docs",previous:{title:"Avoid error shadowing",permalink:"/convenient_service_docs/best_practices/avoid_error_shadowing"},next:{title:"Glossary",permalink:"/convenient_service_docs/category/glossary"}},l={},c=[],p={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,s.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Most of the time it is relatively easy to follow this rule."),(0,r.kt)("p",null,"Consider the following service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class BuildDisplayName\n  include ::ConvenientService::Standard::Config\n\n  attr_reader :person\n\n  def initialize(person:)\n    @person = person\n  end\n\n  def result\n    return failure(person: "can\'t be blank") if person.blank?\n\n    success(display_name: "#{person.first_name} #{persom.last_name}")\n  end\nend\n')),(0,r.kt)("p",null,"It currently has no conditional logic to build the ",(0,r.kt)("inlineCode",{parentName:"p"},"display_name"),"."),(0,r.kt)("p",null,"After a while, our system started to grow and it appears that some people would like to see their pseudo in place of display names."),(0,r.kt)("p",null,"Let's reflect on that change in the code using a naive approach:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class BuildDisplayName\n  include ::ConvenientService::Standard::Config\n\n  attr_reader :person\n\n  def initialize(person:)\n    @person = person\n  end\n\n  def result\n    return failure(person: "can\'t be blank") if person.blank?\n\n    if person.has_pseudonym?\n      success(display_name: person.pseudonym)\n    else\n      success(display_name: "#{person.first_name} #{persom.last_name}")\n    end\n  end\nend\n')),(0,r.kt)("p",null,"Having two ",(0,r.kt)("inlineCode",{parentName:"p"},"success")," calls inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," is what we try to avoid."),(0,r.kt)("p",null,"Why?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It encourages future devs to write ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikibooks.org/wiki/Computer_Programming/Coding_Style/Minimize_nesting"},"deeply nested conditionals"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It interferes with the ",(0,r.kt)("a",{parentName:"p",href:"https://www.oreilly.com/library/view/universal-principles-of/9781592535873/xhtml/ch67.html"},"layering of information"),"."))),(0,r.kt)("p",null,"You don't need to know the details of the implementation until you really need it."),(0,r.kt)("p",null,"The code above tells you about pseudonyms too early, even if you are not interested in them."),(0,r.kt)("p",null,"If you refactor ",(0,r.kt)("inlineCode",{parentName:"p"},"BuildDisplayName")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class BuildDisplayName\n  include ::ConvenientService::Standard::Config\n\n  def initialize(person:)\n    @person = person\n  end\n\n  def result\n    return failure(person: "can\'t be blank") if person.blank?\n\n    success(display_name: display_name)\n  end\n\n  private\n\n  def display_name\n    @display_name ||= person.has_pseudonym? ? person.pseudonym : "#{person.first_name} #{persom.last_name}"\n  end\nend\n')),(0,r.kt)("p",null,"Then the ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," describes which data it may return and when it is NOT successful, just that."),(0,r.kt)("p",null,"Only when you are curious about how ",(0,r.kt)("inlineCode",{parentName:"p"},"display_name")," is exactly built, feel free to check private methods."),(0,r.kt)("p",null,"This is how the ",(0,r.kt)("a",{parentName:"p",href:"https://www.oreilly.com/library/view/universal-principles-of/9781592535873/xhtml/ch67.html"},"layering of information")," works in practice."),(0,r.kt)("p",null,"Nesting is replaced by a ",(0,r.kt)("a",{parentName:"p",href:"https://blog.codinghorror.com/flattening-arrow-code/"},"flat ternary operator"),"."),(0,r.kt)("p",null,"It is time to have a look at the specs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'# spec/services/assert_file_exists_spec.rb\nrequire "spec_helper"\n\nRSpec.describe BuildDisplayName do\n  include ConvenientService::RSpec::Matchers::Results\n\n  example_group "class methods" do\n    describe ".result" do\n      let(:result) { described_class.result(person: person) }\n\n      context "when building of display name is NOT successful" do\n        context "when `person` is blank" do\n          let(:person) { nil }\n\n          it "returns `failure`" do\n            expect(result).to be_failure.with_data(person: "can\'t be blank").of_service(described_class).without_step\n          end\n        end\n      end\n\n      context "when building of display name is successful" do\n        context "when `person` does NOT have pseudonym" do\n          let(:person) { Person.new("John", "Doe") }\n\n          it "returns `success` with first name and last name as display name" do\n            expect(result).to be_success.with_data(display_name: "John Doe").of_service(described_class).without_step\n          end\n        end\n\n        context "when `person` has pseudonym" do\n          let(:person) { Person.new("John", "Doe", preudonym: "Gorilla") }\n\n          it "returns `success` with pseudonym as display name" do\n            expect(result).to be_success.with_data(display_name: "Gorilla").of_service(described_class).without_step\n          end\n        end\n      end\n    end\n  end\nend\n')),(0,r.kt)("p",null,"As you can see, specs still have two contexts for successful cases and that is completely OK."),(0,r.kt)("p",null,"Now, we are ready for the conclusion:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Service has only one ",(0,r.kt)("inlineCode",{parentName:"em"},"success"))," actually means that a service calls ",(0,r.kt)("inlineCode",{parentName:"p"},"success")," inside ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," only once."),(0,r.kt)("p",null,"But that ",(0,r.kt)("inlineCode",{parentName:"p"},"success")," can still have multiple variations of data values, just like ",(0,r.kt)("inlineCode",{parentName:"p"},"display_name")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"BuildDisplayName"),"."),(0,r.kt)("p",null,"Thanks."))}u.isMDXComponent=!0}}]);