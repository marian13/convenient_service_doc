"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[8064],{3905:(e,r,n)=>{n.d(r,{Zo:()=>s,kt:()=>m});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function d(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=t.createContext({}),c=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},s=function(e){var r=c(e.components);return t.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,y=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?t.createElement(y,i(i({ref:r},s),{},{components:n})):t.createElement(y,i({ref:r},s))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var d={};for(var l in r)hasOwnProperty.call(r,l)&&(d[l]=r[l]);d.originalType=e,d.mdxType="string"==typeof e?e:a,i[1]=d;for(var c=2;c<o;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4873:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var t=n(7462),a=(n(7294),n(3905));const o={slug:"/glossary/advanced/proxy_middleware",sidebar_position:3,title:"Proxy Middleware"},i=void 0,d={unversionedId:"glossary/advanced/proxy_middleware",id:"glossary/advanced/proxy_middleware",title:"Proxy Middleware",description:"A proxy middleware is a kind of middleware that may skip calling the next middleware in a chain.",source:"@site/docs/glossary/advanced/proxy_middleware.mdx",sourceDirName:"glossary/advanced",slug:"/glossary/advanced/proxy_middleware",permalink:"/glossary/advanced/proxy_middleware",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/glossary/advanced/proxy_middleware.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/glossary/advanced/proxy_middleware",sidebar_position:3,title:"Proxy Middleware"},sidebar:"docs",previous:{title:"Decorator Middleware",permalink:"/glossary/advanced/decorator_middleware"},next:{title:"Standard::V1::Config",permalink:"/glossary/advanced/standard_v1"}},l={},c=[],s={toc:c};function p(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A proxy middleware is a kind of middleware that may skip calling the next middleware in a chain."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CachesReturnValue")," is a good example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"module ConvenientService\n  module Common\n    module Plugins\n      module CachesReturnValue\n        class Middleware < Core::MethodChainMiddleware\n          # ...\n          # highlight-start\n          def next(*args, **kwargs, &block)\n            key = cache.keygen(:return_values, method, *args, **kwargs, &block)\n\n            cache.fetch(key) { chain.next(*args, **kwargs, &block) }\n          end\n          # highlight-end\n          # ...\n        end\n      end\n    end\n  end\nend\n")),(0,a.kt)("p",null,"When the cache does NOT contain any value by key, it calls the next middleware in the chain and stores its return value."),(0,a.kt)("p",null,"When the cache already contains a value by key, it does NOT trigger the next middleware at all."),(0,a.kt)("p",null,"That is why this middleware is considered ",(0,a.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/proxy"},"proxy")," middleware."),(0,a.kt)("p",null,"In contrast, ",(0,a.kt)("a",{parentName:"p",href:"/glossary/advanced/decorator_middleware"},"decorator middlewares")," always call ",(0,a.kt)("inlineCode",{parentName:"p"},"chain.next"),"."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"cache.fetch")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"CachesReturnValue")," has the same semantics as Ruby's ",(0,a.kt)("a",{parentName:"p",href:"https://ruby-doc.org/core-3.1.2/Hash.html#method-i-fetch"},"Hash#fetch"),".")))}p.isMDXComponent=!0}}]);