"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[2892],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>_});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),_=r,f=d["".concat(i,".").concat(_)]||d[_]||p[_]||a;return n?o.createElement(f,s(s({ref:t},u),{},{components:n})):o.createElement(f,s({ref:t},u))}));function _(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<a;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7383:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={slug:"/faq/why_case_when_does_not_work_with_jus_result_codes",sidebar_position:3,title:"Why `case/when` does NOT work with just result codes?"},s=void 0,l={unversionedId:"faq/why_case_when_does_not_work_with_jus_result_codes",id:"faq/why_case_when_does_not_work_with_jus_result_codes",title:"Why `case/when` does NOT work with just result codes?",description:"Sometimes it may feel idiomatic to check the result code in the following way:",source:"@site/docs/faq/why_case_when_does_not_work_with_jus_result_codes.mdx",sourceDirName:"faq",slug:"/faq/why_case_when_does_not_work_with_jus_result_codes",permalink:"/faq/why_case_when_does_not_work_with_jus_result_codes",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/faq/why_case_when_does_not_work_with_jus_result_codes.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/faq/why_case_when_does_not_work_with_jus_result_codes",sidebar_position:3,title:"Why `case/when` does NOT work with just result codes?"},sidebar:"docs",previous:{title:"Is it possible to modify the step collection from a callback?",permalink:"/faq/is_it_possible_to_modify_step_collection_from_callback"},next:{title:"What is the purpose of Standard::V1::Config?",permalink:"/faq/what_is_purpose_of_v1_config"}},i={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Sometimes it may feel idiomatic to check the result code in the following way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# wrong\nif result.not_success?\n  case result.code # `result.code` returns fancy object\n  when :full_queue\n    notify_devops\n  when :duplicated_job\n    notify_devs\n  else\n    # ...\n  end\nend\n")),(0,r.kt)("p",null,"Although this snippet looks very appealing, it won't work as expected."),(0,r.kt)("p",null,"A lot of Ruby folks often have an assumption that a value of ",(0,r.kt)("inlineCode",{parentName:"p"},"case")," is compared with a value of ",(0,r.kt)("inlineCode",{parentName:"p"},"when"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"case value === when value\n")),(0,r.kt)("p",null,"In other words, the ",(0,r.kt)("inlineCode",{parentName:"p"},"case/when")," from example above can be transformed to ",(0,r.kt)("inlineCode",{parentName:"p"},"if/else")," like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# wrong\nif result.not_success?\n  if result.code === :full_queue\n    notify_devops\n  elsif result.code === :duplicated_job\n    notify_devs\n  else\n    # ...\n  end\nend\n")),(0,r.kt)("p",null,"But, that is NOT correct."),(0,r.kt)("p",null,"In reality, the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"when")," is ",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/4467823/12201472"},"always compared")," with the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"case"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"when value === case value\n")),(0,r.kt)("p",null,"Let's write the proper transformation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# okish\nif result.not_success?\n  if :full_queue === result.code\n    notify_devops\n  elsif :duplicated_job === result.code\n    notify_devs\n  else\n    # ...\n  end\nend\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ruby-doc.org/core-2.7.1/Symbol.html#method-i-3D-3D-3D"},"Symbol#===")," is just an alias to ",(0,r.kt)("a",{parentName:"p",href:"https://ruby-doc.org/core-2.7.1/Symbol.html#method-i-3D-3D"},"Symbol#=="),"."),(0,r.kt)("p",null,"There is no way to hook into any behavior like with strings (",(0,r.kt)("a",{parentName:"p",href:"https://ruby-doc.org/core-2.7.1/String.html#method-i-3D-3D-3D"},"String#===")," calls ",(0,r.kt)("a",{parentName:"p",href:"https://ruby-doc.org/core-2.7.1/String.html#method-i-to_str"},"to_str")," on its argument)."),(0,r.kt)("p",null,"As a result, just ",(0,r.kt)("inlineCode",{parentName:"p"},"case result.code")," is not enough."),(0,r.kt)("p",null,"But once you use ",(0,r.kt)("inlineCode",{parentName:"p"},"case result.code.to_sym"),", the natural Ruby charm is back."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# ok\nif result.not_success?\n  case result.code.to_sym\n  when :full_queue\n    notify_devops\n  when :duplicated_job\n    notify_devs\n  else\n    # ...\n  end\nend\n")))}p.isMDXComponent=!0}}]);