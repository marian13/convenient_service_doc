"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[9496,7918],{5162:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(7294),r=t(6010);const i="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>v});var a=t(7462),r=t(7294),i=t(6010),l=t(2389),s=t(7392),u=t(7094),c=t(2466);const o="tabList__CuJ",d="tabItem_LNqP";function p(e){var n;const{lazy:t,block:l,defaultValue:p,values:v,groupId:m,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=v??g.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),b=(0,s.l)(f,((e,n)=>e.value===n.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const E=null===p?p:p??(null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)??g[0].props.value;if(null!==E&&!f.some((e=>e.value===E)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${E}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:_}=(0,u.U)(),[C,S]=(0,r.useState)(E),Z=[],{blockElementScrollPositionUntilNextRender:A}=(0,c.o5)();if(null!=m){const e=y[m];null!=e&&e!==C&&f.some((n=>n.value===e))&&S(e)}const F=e=>{const n=e.currentTarget,t=Z.indexOf(n),a=f[t].value;a!==C&&(A(n),S(a),null!=m&&_(m,String(a)))},w=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=Z.indexOf(e.currentTarget)+1;t=Z[n]??Z[0];break}case"ArrowLeft":{const n=Z.indexOf(e.currentTarget)-1;t=Z[n]??Z[Z.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",o)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":l},h)},f.map((e=>{let{value:n,label:t,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===n?0:-1,"aria-selected":C===n,key:n,ref:e=>Z.push(e),onKeyDown:w,onFocus:F,onClick:F},l,{className:(0,i.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":C===n})}),t??n)}))),t?(0,r.cloneElement)(g.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==C})))))}function v(e){const n=(0,l.Z)();return r.createElement(p,(0,a.Z)({key:String(n)},e))}},3019:(e,n,t)=>{t.r(n),t.d(n,{default:()=>u});var a=t(7294),r=t(6791),i=t(5488),l=t(5162),s=t(8573);function u(){return a.createElement(r.Z,null,a.createElement(s.Z,{language:"ruby"},'\n          def read_file_content(path)\n            result = ReadFileContent.result(path: path)\n            -\n            content = result.success? ? result.data[:content] : ""\n            -\n            puts result.message unless result.success?\n            -\n            content\n          end\n        '),a.createElement(i.Z,{groupId:"config"},a.createElement(l.Z,{value:"standard",label:"Standard",default:!0},a.createElement(s.Z,{language:"ruby"},'require "convenient_service"')),a.createElement(l.Z,{value:"rails",label:"Rails"},a.createElement(s.Z,{language:"ruby"},'\n              require "active_model" # NOTE: Minimal `active_model` version - `5.2.0`.\n              -\n              require "convenient_service"\n              -\n              ConvenientService::Dependencies.require_assigns_attributes_in_constructor_using_active_model_attribute_assignment\n              ConvenientService::Dependencies.require_has_attributes_using_active_model_attributes\n              ConvenientService::Dependencies.require_has_result_params_validations_using_active_model_validations\n            ')),a.createElement(l.Z,{value:"dry",label:"Dry"},a.createElement(s.Z,{language:"ruby"},'\n              require "dry-initializer" # NOTE: Minimal `dry-initializer` version - `3.0.0`.\n              require "dry-validation" # NOTE: Minimal `dry-validation` version - `1.5.0`.\n              -\n              require "convenient_service"\n              -\n              ConvenientService::Dependencies.require_assigns_attributes_in_constructor_using_dry_initializer\n              ConvenientService::Dependencies.require_has_result_params_validations_using_dry_validation\n            '))),a.createElement(i.Z,{groupId:"config"},a.createElement(l.Z,{value:"standard",label:"Standard",default:!0},a.createElement(s.Z,{language:"ruby"},"\n              module ApplicationService\n                module Config\n                  include ConvenientService::Concern\n                  -\n                  included do |service_class|\n                    service_class.include ConvenientService::Standard::Config\n                  end\n                end\n              end\n            ")),a.createElement(l.Z,{value:"rails",label:"Rails"},a.createElement(s.Z,{language:"ruby"},"\n              module RailsService\n                module Config\n                  include ConvenientService::Concern\n                  -\n                  included do |service_class|\n                    service_class.class_exec do\n                      include ConvenientService::Standard::Config\n                      -\n                      concerns do\n                        use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingActiveModelAttributeAssignment::Concern\n                        use ConvenientService::Plugins::Common::HasAttributes::UsingActiveModelAttributes::Concern\n                        use ConvenientService::Plugins::Service::HasResultParamsValidations::UsingActiveModelValidations::Concern\n                      end\n                      -\n                      middlewares :initialize do\n                        use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingActiveModelAttributeAssignment::Middleware\n                      end\n                      -\n                      middlewares :result do\n                        insert_before \\\n                          ConvenientService::Plugins::Service::HasResultSteps::Middleware,\n                          ConvenientService::Plugins::Service::HasResultParamsValidations::UsingActiveModelValidations::Middleware\n                      end\n                    end\n                  end\n                end\n              end\n            ")),a.createElement(l.Z,{value:"dry",label:"Dry"},a.createElement(s.Z,{language:"ruby"},"\n              module DryService\n                module Config\n                  include ConvenientService::Concern\n                  -\n                  included do |service_class|\n                    service_class.class_exec do\n                      include ConvenientService::Standard::Config\n                      -\n                      concerns do\n                        use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingDryInitializer::Concern\n                        use ConvenientService::Plugins::Service::HasResultParamsValidations::UsingDryValidation::Concern\n                      end\n                      -\n                      middlewares :result do\n                        insert_before \\\n                          ConvenientService::Plugins::Service::HasResultSteps::Middleware,\n                          ConvenientService::Plugins::Service::HasResultParamsValidations::UsingDryValidation::Middleware\n                      end\n                    end\n                  end\n                end\n              end\n            "))),a.createElement(i.Z,{groupId:"config"},a.createElement(l.Z,{value:"standard",label:"Standard",default:!0},a.createElement(s.Z,{language:"ruby"},'\n              class AssertFileExists\n                include ApplicationService::Config\n                -\n                attr_reader :path\n                -\n                def initialize(path:)\n                  @path = path\n                end\n                -\n                def result\n                  return failure(path: "Path is `nil`") if path.nil?\n                  return failure(path: "Path is empty") if path.empty?\n                  -\n                  return error("File does not exist at path `#{path}`") unless ::File.exist?(path)\n                  -\n                  success\n                end\n              end\n            ')),a.createElement(l.Z,{value:"rails",label:"Rails"},a.createElement(s.Z,{language:"ruby"},'\n              class AssertFileExists\n                include RailsService::Config\n                -\n                attribute :path, :string\n                -\n                validates :path, presence: true\n                -\n                def result\n                  return error("File does not exist at path `#{path}`") unless ::File.exist?(path)\n                  -\n                  success\n                end\n              end\n            ')),a.createElement(l.Z,{value:"dry",label:"Dry"},a.createElement(s.Z,{language:"ruby"},'\n              class AssertFileExists\n                include DryService::Config\n                -\n                option :path\n                -\n                contract do\n                  schema do\n                    required(:path).value(:string)\n                  end\n                end\n                -\n                def result\n                  return error("File does not exist at path `#{path}`") unless ::File.exist?(path)\n                  -\n                  success\n                end\n              end\n            '))),a.createElement(s.Z,{language:"ruby"},'result = AssertFileExists.result(path: "Gemfile")'),a.createElement(i.Z,{groupId:"config"},a.createElement(l.Z,{value:"standard",label:"Standard",default:!0},a.createElement(s.Z,{language:"ruby"},'\n              class AssertFileNotEmpty\n                include ApplicationService::Config\n                -\n                attr_accessor :path\n                -\n                def initialize(path:)\n                  @path = path\n                end\n                -\n                def result\n                  return failure(path: "Path is `nil`") if path.nil?\n                  return failure(path: "Path is empty") if path.empty?\n                  -\n                  return error("File is empty at path `#{path}`") if ::File.zero?(path)\n                  -\n                  success\n                end\n              end\n            ')),a.createElement(l.Z,{value:"rails",label:"Rails"},a.createElement(s.Z,{language:"ruby"},'\n              class AssertFileNotEmpty\n                include RailsService::Config\n                -\n                attribute :path, :string\n                -\n                validates :path, presence: true\n                -\n                def result\n                  return error("File is empty at path `#{path}`") if ::File.zero?(path)\n                  -\n                  success\n                end\n              end\n            ')),a.createElement(l.Z,{value:"dry",label:"Dry"},a.createElement(s.Z,{language:"ruby"},'\n              class AssertFileNotEmpty\n                include DryService::Config\n                -\n                option :path\n                -\n                contract do\n                  schema do\n                    required(:path).value(:string)\n                  end\n                end\n                -\n                def result\n                  return error("File is empty at path `#{path}`") if ::File.zero?(path)\n                  -\n                  success\n                end\n              end\n            '))),a.createElement(s.Z,{language:"ruby"},'result = AssertFileNotEmpty.result(path: "Gemfile")'),a.createElement(i.Z,{groupId:"config"},a.createElement(l.Z,{value:"standard",label:"Standard",default:!0},a.createElement(s.Z,{language:"ruby"},'\n              class ReadFileContent\n                include ApplicationService::Config\n                -\n                attr_reader :path\n                -\n                step :validate_path\n                step AssertFileExists, in: :path\n                step AssertFileNotEmpty, in: :path\n                step :result, in: :path, out: :content\n                -\n                def initialize(path:)\n                  @path = path\n                end\n                -\n                def result\n                  success(content: ::File.read(path))\n                end\n                -\n                private\n                -\n                def validate_path\n                  return failure(path: "Path is `nil`") if path.nil?\n                  return failure(path: "Path is empty") if path.empty?\n                  -\n                  success\n                end\n              end\n            ')),a.createElement(l.Z,{value:"rails",label:"Rails"},a.createElement(s.Z,{language:"ruby"},"\n              class ReadFileContent\n                include RailsService::Config\n                -\n                attribute :path, :string\n                -\n                validates :path, presence: true\n                -\n                step AssertFileExists, in: :path\n                step AssertFileNotEmpty, in: :path\n                step :result, in: :path, out: :content\n                -\n                def result\n                  success(content: ::File.read(path))\n                end\n              end\n            ")),a.createElement(l.Z,{value:"dry",label:"Dry"},a.createElement(s.Z,{language:"ruby"},"\n              class ReadFileContent\n                include DryService::Config\n                -\n                option :path\n                -\n                contract do\n                  schema do\n                    required(:path).value(:string)\n                  end\n                end\n                -\n                step AssertFileExists, in: :path\n                step AssertFileNotEmpty, in: :path\n                step :result, in: :path, out: :content\n                -\n                def result\n                  success(content: ::File.read(path))\n                end\n              end\n            "))),a.createElement(s.Z,{language:"ruby"},'result = ReadFileContent.result(path: "Gemfile")'))}},8573:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(7410),r=t(7294),i=t(814);(void 0!==t.g?t.g:window).Prism=a.Z,t(9385);function l(e){let{children:n,...t}=e;return r.createElement(r.Fragment,null,r.createElement(i.Z,t,(e=>{let n=e.toString().split("\n");n=""===n[0]?n.slice(1):n;const t=n.find((e=>e.length)).search(/[^ ]/),a=-1===t?0:t;return n.map((e=>e.trimEnd())).map((e=>"-"===e.trimStart()?"":e)).map((e=>e.slice(a))).join("\n")})(n)))}}}]);