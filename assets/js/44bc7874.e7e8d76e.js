"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[8339],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,h=m["".concat(c,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(h,s(s({ref:t},l),{},{components:n})):r.createElement(h,s({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7207:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={slug:"/api/tests/rspec/matchers/delegate_to",sidebar_position:1,title:"delegate_to"},s=void 0,o={unversionedId:"api/tests/rspec/matchers/delegate_to",id:"api/tests/rspec/matchers/delegate_to",title:"delegate_to",description:"What is delegate_to?",source:"@site/docs/api/tests/rspec/matchers/delegate_to.mdx",sourceDirName:"api/tests/rspec/matchers",slug:"/api/tests/rspec/matchers/delegate_to",permalink:"/convenient_service_docs/api/tests/rspec/matchers/delegate_to",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/api/tests/rspec/matchers/delegate_to.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/api/tests/rspec/matchers/delegate_to",sidebar_position:1,title:"delegate_to"},sidebar:"docs",previous:{title:"Matchers",permalink:"/convenient_service_docs/category/matchers"},next:{title:"Troubleshooting",permalink:"/convenient_service_docs/category/troubleshooting"}},c={},p=[{value:"What is <code>delegate_to</code>?",id:"what-is-delegate_to",level:2},{value:"<code>delegate_to</code> is context-independent",id:"delegate_to-is-context-independent",level:2},{value:"Pitfalls",id:"pitfalls",level:2}],l={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"what-is-delegate_to"},"What is ",(0,a.kt)("inlineCode",{parentName:"h2"},"delegate_to"),"?"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"delegate_to")," is a ",(0,a.kt)("a",{parentName:"p",href:"https://relishapp.com/rspec/rspec-expectations/docs/custom-matchers/define-a-custom-matcher"},"custom RSpec matcher")," that provides a neat way to check whether a ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Delegation_(computing)"},"delegation")," was performed as expected."),(0,a.kt)("p",null,"For example, consider the following code snippet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class FirstService\n  attr_reader :params\n\n  def initialize(params:)\n    @params = params\n  end\n\n  def result\n    # ...\n    SecondService.result(params: params)\n  end\nend\n")),(0,a.kt)("p",null,'As you can see, the first service asks the second one to do some "interesting" stuff and returns its value.'),(0,a.kt)("p",null,"This behavior can be easily tested in ",(0,a.kt)("a",{parentName:"p",href:"https://rspec.info/"},"RSpec")," like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'RSpec.describe FirstService do\n  describe ".result" do\n    let(:params) { {foo: :bar} }\n\n    it "delegates to `SecondService.result`" do\n      # Creates a spy.\n      allow(SecondService).to receive(:result).and_call_orginal\n\n      FirstService.result(params: params)\n\n      # Confirms delegation.\n      expect(SecondService).to have_received(:result)\n    end\n\n    it "returns `SecondService.result`" do\n      # Confirms return value equality.\n      expect(FirstService.result(params: params)).to eq(SecondService.result(params: params))\n    end\n  end\nend\n')),(0,a.kt)("p",null,"Since it is so common to write specs as above when working with services, the ",(0,a.kt)("inlineCode",{parentName:"p"},"delegate_to")," matcher is provided to hide the repeatable noise."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'RSpec.describe FirstService do\n  describe ".result" do\n    # highlight-start\n    include ConvenientService::RSpec::Matchers::DelegateTo\n    # highlight-end\n\n    let(:params) { {foo: :bar} }\n\n    # highlight-start\n    it "delegates to `SecondService.result`" do\n      expect { FirstService.result(params: params) }.to delegate_to(SecondService, :result)\n    end\n    # highlight-end\n\n    it "returns `SecondService.result`" do\n      # Confirms return value equality.\n      expect(FirstService.result(params: params)).to eq(SecondService.result(params: params))\n    end\n  end\nend\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"delegate_to")," has a self-explanatory ",(0,a.kt)("inlineCode",{parentName:"p"},"and_return_its_value")," ",(0,a.kt)("a",{parentName:"p",href:"https://relishapp.com/rspec/rspec-expectations/docs/compound-expectations"},"chaining"),", so we can ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Code_refactoring"},"refactor out")," the second spec as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'RSpec.describe FirstService do\n  describe ".result" do\n    include ConvenientService::RSpec::Matchers::DelegateTo\n\n    let(:kwargs) { {foo: :bar} }\n\n    # highlight-start\n    it "delegates to and returns `SecondService.result`" do\n      expect { FirstService.result(params: params) }\n        .to delegate_to(SecondService, :result)\n        .and_return_its_value\n    end\n    # highlight-end\n  end\nend\n')),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"and_return_its_value")," uses ",(0,a.kt)("a",{parentName:"p",href:"https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/equality-matchers"},"RSpec ",(0,a.kt)("inlineCode",{parentName:"a"},"eq"))," to compare values, therefore ensure your return values define meaningful ",(0,a.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/7157051/12201472"},(0,a.kt)("inlineCode",{parentName:"a"},"==")," operator"),".")),(0,a.kt)("p",null,"Also ",(0,a.kt)("inlineCode",{parentName:"p"},"delegate_to")," supports ",(0,a.kt)("inlineCode",{parentName:"p"},"with_arguments")," chaining to make sure that delegation happened with certain arguments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'RSpec.describe FirstService do\n  describe ".result" do\n    include ConvenientService::RSpec::Matchers::DelegateTo\n\n    let(:params) { {foo: :bar} }\n\n    it "delegates to and returns `SecondService.result`" do\n      expect { FirstService.result(params: params) }\n        .to delegate_to(SecondService, :result)\n        # highlight-start\n        .with_arguments(params: params)\n        # highlight-end\n        .and_return_its_value\n    end\n  end\nend\n')),(0,a.kt)("p",null,"This spec can be simplified even further."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'RSpec.describe FirstService do\n  describe ".result" do\n    include ConvenientService::RSpec::Matchers::DelegateTo\n\n    let(:params) { {foo: :bar} }\n\n    # highlight-start\n    specify do\n      # highlight-end\n      expect { FirstService.result(params: params) }\n        .to delegate_to(SecondService, :result)\n        .with_arguments(params: params)\n        .and_return_its_value\n    end\n  end\nend\n')),(0,a.kt)("p",null,"When ",(0,a.kt)("a",{parentName:"p",href:"https://rspec.info/documentation/3.12/rspec-core/RSpec/Core/ExampleGroup.html#specify-class_method"},"specify")," is utilized, ",(0,a.kt)("a",{parentName:"p",href:"https://relishapp.com/rspec/rspec-expectations/v/3-12/docs/implicit-docstrings"},"RSpec infers spec description")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"delegate_to")," arguments and chainings."),(0,a.kt)("h2",{id:"delegate_to-is-context-independent"},(0,a.kt)("inlineCode",{parentName:"h2"},"delegate_to")," is context-independent"),(0,a.kt)("p",null,"In other words, ",(0,a.kt)("inlineCode",{parentName:"p"},"delegate_to")," is applicable for any classes, not only for services, e.g:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"class Notifier\n  # ...\n  def broadcast_event(*args, **kwargs, &block)\n    Event.create(*args, **kwargs, &block)\n  end\nend\n")),(0,a.kt)("p",null,"With specs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'RSpec.describe Notifier do\n  describe "#broadcast_event" do\n    include ConvenientService::RSpec::Matchers::DelegateTo\n\n    let(:notifier) { create(:notifier) }\n\n    let(:args) { :foo }\n    let(:kwargs) { {foo: :bar} }\n    let(:block) { proc { :foo } }\n\n    specify do\n      expect { notifier.broadcast_event(*args, **kwargs, &block) }\n        .to delegate_to(Event, :create)\n        .with_arguments(*args, **kwargs, &block)\n        .and_return_its_value\n    end\n  end\nend\n')),(0,a.kt)("p",null,"Please, note that ",(0,a.kt)("inlineCode",{parentName:"p"},"delegate_to")," is able to verify block argument (",(0,a.kt)("inlineCode",{parentName:"p"},"&block"),") ",(0,a.kt)("a",{parentName:"p",href:"https://relishapp.com/rspec/rspec-mocks/v/3-12/docs/setting-constraints/matching-arguments"},"that is not possible with raw ",(0,a.kt)("inlineCode",{parentName:"a"},"allow")," ",(0,a.kt)("inlineCode",{parentName:"a"},"to")," ",(0,a.kt)("inlineCode",{parentName:"a"},"receive")),"."),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://ruby-doc.org/core-3.1.0/Proc.html"},"Blocks (procs, lambdas"),") are compared by ",(0,a.kt)("a",{parentName:"p",href:"https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/equality-matchers"},"RSpec ",(0,a.kt)("inlineCode",{parentName:"a"},"eq"))," under the hood."),(0,a.kt)("p",{parentName:"admonition"},"Please, remember their semantics in order to not be overly surprised."),(0,a.kt)("p",{parentName:"admonition"},"The two ",(0,a.kt)("a",{parentName:"p",href:"https://ruby-doc.org/core-3.1.0/Proc.html"},"Proc")," instances may look the same from the ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Syntax"},"syntax")," point of view."),(0,a.kt)("p",{parentName:"admonition"},"But they are different from the Proc ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Semantics"},"semantics")," point of view."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"first = proc { :foo }\nsecond = proc { :foo }\n\nfirst == second # => false\nfirst == first # => true\nsecond == second # => true\n"))),(0,a.kt)("h2",{id:"pitfalls"},"Pitfalls"),(0,a.kt)("p",null,"Currently, ",(0,a.kt)("inlineCode",{parentName:"p"},"delegate_to")," expects that delegation is executed only once inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"expect")," block."),(0,a.kt)("p",null,"For example, the next spec won't work:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'it "fails since delegation was done twice" do\n  expect {\n    File.exist?("Gemfile")\n\n    !File.exist?("Gemfile")\n  }\n    .to delegate_to(File, :exist?)\n    .with_arguments("Gemfile")\nend\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://relishapp.com/rspec/rspec-mocks/docs/setting-constraints/receive-counts"},"Receive Counts")," feature is planned for the future releases of the ",(0,a.kt)("a",{parentName:"p",href:"/"},"Convenient Service"),"."),(0,a.kt)("p",null,"For now, please stick with plain ",(0,a.kt)("a",{parentName:"p",href:"https://rspec.info/"},"RSpec")," for such cases."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'it "passes with multiple delegations" do\n  allow(File).to receive(:exist?).with("Gemfile").and_call_original\n\n  File.exist?("Gemfile")\n\n  !File.exist?("Gemfile")\n\n  expect(File).to have_received(:exist?).with("Gemfile").twice\nend\n')))}d.isMDXComponent=!0}}]);