"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[8064],{3905:(e,n,r)=>{r.d(n,{Zo:()=>s,kt:()=>m});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function d(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,y=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return r?t.createElement(y,i(i({ref:n},s),{},{components:r})):t.createElement(y,i({ref:n},s))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:a,i[1]=d;for(var c=2;c<o;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4873:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var t=r(7462),a=(r(7294),r(3905));const o={slug:"/glossary/advanced/proxy_middleware",sidebar_position:3,title:"Proxy Middleware"},i=void 0,d={unversionedId:"glossary/advanced/proxy_middleware",id:"glossary/advanced/proxy_middleware",title:"Proxy Middleware",description:"A proxy middleware is a kind of middleware that may skip calling the next middleware in a chain.",source:"@site/docs/glossary/advanced/proxy_middleware.mdx",sourceDirName:"glossary/advanced",slug:"/glossary/advanced/proxy_middleware",permalink:"/convenient_service_docs/glossary/advanced/proxy_middleware",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/glossary/advanced/proxy_middleware.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/glossary/advanced/proxy_middleware",sidebar_position:3,title:"Proxy Middleware"},sidebar:"docs",previous:{title:"Decorator Middleware",permalink:"/convenient_service_docs/glossary/advanced/decorator_middleware"},next:{title:"Standard::V1::Config",permalink:"/convenient_service_docs/glossary/advanced/standard_v1"}},l={},c=[],s={toc:c};function p(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A proxy middleware is a kind of middleware that may skip calling the next middleware in a chain."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CachesReturnValue")," is a good example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"module ConvenientService\n  module Common\n    module Plugins\n      module CachesReturnValue\n        class Middleware < Core::MethodChainMiddleware\n          # ...\n          # highlight-start\n          def next(*args, **kwargs, &block)\n            key = cache.keygen(:return_values, method, *args, **kwargs, &block)\n\n            cache.fetch(key) { chain.next(*args, **kwargs, &block) }\n          end\n          # highlight-end\n          # ...\n        end\n      end\n    end\n  end\nend\n")),(0,a.kt)("p",null,"When the cache does NOT contain any value by key, it calls the next middleware in the chain and stores its return value."),(0,a.kt)("p",null,"When the cache already contains a value by key, it does NOT trigger the next middleware at all."),(0,a.kt)("p",null,"That is why this middleware is considered ",(0,a.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/proxy"},"proxy")," middleware."),(0,a.kt)("p",null,"In contrast, ",(0,a.kt)("a",{parentName:"p",href:"/glossary/advanced/decorator_middleware"},"decorator middlewares")," always call ",(0,a.kt)("inlineCode",{parentName:"p"},"chain.next"),"."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"cache.fetch")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"CachesReturnValue")," has the same semantics as Ruby's ",(0,a.kt)("a",{parentName:"p",href:"https://ruby-doc.org/core-3.1.2/Hash.html#method-i-fetch"},"Hash#fetch"),".")))}p.isMDXComponent=!0}}]);