"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[4876],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=i,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={slug:"/api/plugins/common/assigns_attributes_in_constructor/using_dry_initializer",sidebar_position:2,title:"Assigns attributes in constructor using Dry::Initializer"},o=void 0,s={unversionedId:"api/plugins/common/assigns_attributes_in_constructor/using_dry_initializer",id:"api/plugins/common/assigns_attributes_in_constructor/using_dry_initializer",title:"Assigns attributes in constructor using Dry::Initializer",description:"It is so common to write constructors and attributes in Ruby like so:",source:"@site/docs/api/plugins/common/assigns_attributes_in_constructor/using_dry_initializer.mdx",sourceDirName:"api/plugins/common/assigns_attributes_in_constructor",slug:"/api/plugins/common/assigns_attributes_in_constructor/using_dry_initializer",permalink:"/api/plugins/common/assigns_attributes_in_constructor/using_dry_initializer",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/api/plugins/common/assigns_attributes_in_constructor/using_dry_initializer.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/api/plugins/common/assigns_attributes_in_constructor/using_dry_initializer",sidebar_position:2,title:"Assigns attributes in constructor using Dry::Initializer"},sidebar:"docs",previous:{title:"Assigns attributes in constructor",permalink:"/category/assigns-attributes-in-constructor"},next:{title:"Tests",permalink:"/category/tests"}},l={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It is so common to write ",(0,i.kt)("a",{parentName:"p",href:"https://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/objinitialization.html"},"constructors")," and ",(0,i.kt)("a",{parentName:"p",href:"https://ruby-doc.com/docs/ProgrammingRuby/html/tut_classes.html"},"attributes")," in ",(0,i.kt)("a",{parentName:"p",href:"https://www.ruby-lang.org/en/"},"Ruby")," like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"class FormatHeader\n  include ApplicationService::Config\n\n  attr_reader :parsed_content, :skip_frozen_string_literal\n\n  def initialize(parsed_content:, skip_frozen_string_literal: false)\n    @parsed_content = parsed_content\n    @skip_frozen_string_literal = skip_frozen_string_literal\n  end\n  # ...\nend\n")),(0,i.kt)("p",null,"If ",(0,i.kt)("a",{parentName:"p",href:"https://www.ruby-lang.org/en/"},"Ruby")," is your ",(0,i.kt)("a",{parentName:"p",href:"https://survey.stackoverflow.co/2022/#section-most-popular-technologies-programming-scripting-and-markup-languages"},"day-to-day language"),", such code probably seems too ",(0,i.kt)("a",{parentName:"p",href:"https://www.collinsdictionary.com/dictionary/english/routine"},"routine")," for you."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"class RunShell\n  include ApplicationService::Config\n\n  attr_reader :command, :debug\n\n  def initialize(command:, debug: false)\n    @command = command\n    @debug = debug\n  end\n  # ...\nend\n")),(0,i.kt)("p",null,"Also, it is ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/aemkei/jsfuck"},"so annoying to make accidental typos"),", when you are already tired, but you still have some stuff to complete."),(0,i.kt)("p",null,"For example, the word ",(0,i.kt)("inlineCode",{parentName:"p"},"command")," is typed 4 times in the example above, so there are 4 opportunities to make an automatic mistake."),(0,i.kt)("p",null,"Please, don't even tell that ",(0,i.kt)("a",{parentName:"p",href:"https://www.reddit.com/r/software/comments/xeepud/dont_always_trust_what_your_ide_tells_you/"},"your IDE handles that for you"),"."),(0,i.kt)("p",null,"When the whole team is feeling the same annoyance."),(0,i.kt)("p",null,"All of the members really believe in the benefits of the removal of such repeatable code."),(0,i.kt)("p",null,"You may consider to utilizing the ",(0,i.kt)("a",{parentName:"p",href:"https://dry-rb.org/gems/dry-initializer/3.0/params-and-options/"},"Dry::Initializer")," integration that the ",(0,i.kt)("a",{parentName:"p",href:"/api/plugins/common/assigns_attributes_in_constructor/using_dry_initializer"},"AssignsAttributesInConstructor::UsingDryInitalizer")," plugin provides."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"module ApplicationService\n  module Config\n    include ConvenientService::Concern\n\n    included do |service_class|\n      service_class.class_exec do\n        include ConvenientService::Standard::Config\n        # ...\n        concerns do\n          use ConvenientService::Plugins::Common::AssignsAttributesInConstructor::UsingDryInitalizer::Concern\n        end\n      end\n    end\n  end\nend\n")),(0,i.kt)("p",null,"Thus, ",(0,i.kt)("inlineCode",{parentName:"p"},"FormatHeader")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RunShell")," can be reduced in the following way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"class FormatHeader\n  include ApplicationService::Config\n\n  option :parsed_content\n  option :skip_frozen_string_literal, default: -> { false }\n  # ...\nend\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"class RunShell\n  include ApplicationService::Config\n\n  option :command\n  option :debug, default: -> { false }\n  # ...\nend\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://dry-rb.org/gems/dry-initializer/3.0/params-and-options/"},"Dry::Initializer")," does NOT call ",(0,i.kt)("inlineCode",{parentName:"p"},"super")," in its ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dry-rb/dry-initializer/blob/v3.1.1/lib/dry/initializer/mixin/root.rb#L11"},"initialize")," implementation."),(0,i.kt)("p",{parentName:"admonition"},"If it causes problems for you, try to place ",(0,i.kt)("a",{parentName:"p",href:"/api/plugins/common/assigns_attributes_in_constructor/using_dry_initializer"},"AssignsAttributesInConstructor::UsingDryInitalizer")," closer to the top in the concerns stack."),(0,i.kt)("p",{parentName:"admonition"},"See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Ibsciss/ruby-middleware/tree/v0.4.2#insert-before"},"insert_before"),".")),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Introduce new libraries to the projects only when you have strong arguments and complete ideas about why to do so."),(0,i.kt)("p",{parentName:"admonition"},"In fast-paced enterprise projects, with a poor onboarding process, simplicity is almost always a better choice."),(0,i.kt)("p",{parentName:"admonition"},"The simplicity in a sense, that the tech stack should be familiar to the people, who maintain the project for years."),(0,i.kt)("p",{parentName:"admonition"},'Since you probably won\'t have a chance to talk with the "one-task" developers while they remember the initial reasoning behind their code.'),(0,i.kt)("p",{parentName:"admonition"},"Moreover, that code is frequently left without any diagrams, documentation, or even tests \ud83d\ude10.")))}u.isMDXComponent=!0}}]);