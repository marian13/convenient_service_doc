"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[9127],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=s,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5127:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=n(7462),s=(n(7294),n(3905));const a={slug:"/api/tests/rspec/matchers/results/be_failure",sidebar_position:1,title:"be_failure"},i=void 0,o={unversionedId:"api/tests/rspec/matchers/results/be_failure",id:"api/tests/rspec/matchers/results/be_failure",title:"be_failure",description:"Base Matcher:",source:"@site/docs/api/tests/rspec/matchers/results/be_failure.mdx",sourceDirName:"api/tests/rspec/matchers/results",slug:"/api/tests/rspec/matchers/results/be_failure",permalink:"/convenient_service_docs/api/tests/rspec/matchers/results/be_failure",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/api/tests/rspec/matchers/results/be_failure.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/api/tests/rspec/matchers/results/be_failure",sidebar_position:1,title:"be_failure"},sidebar:"docs",previous:{title:"Results",permalink:"/convenient_service_docs/category/results"},next:{title:"be_error",permalink:"/convenient_service_docs/api/tests/rspec/matchers/results/be_error"}},c={},l=[],u={toc:l};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Base Matcher:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"be_failure\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Chainings:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"with_data(data)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'# frozen_string_literal: true\n\nclass PrintShellCommand\n  include ConvenientService::Standard::Config\n\n  attr_reader :text, :out\n\n  def initialize(text:, out: $stdout)\n    @text = text\n    @out = out\n  end\n\n  def result\n    return failure(text: "Text is `nil`") if text.nil?\n\n    out.puts\n\n    out.puts "$ #{text}"\n\n    success\n  end\nend\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'# frozen_string_literal: true\n\nRSpec.describe PrintShellCommand do\n  include ConvenientService::RSpec::Matchers::Results\n\n  let(:service) { described_class.new(text: text, out: out) }\n\n  let(:out) { Tempfile.new }\n\n  describe "#result" do\n    subject(:result) { service.result }\n\n    let(:out_content) { out.tap(&:rewind).read }\n\n    context "when text is nil" do\n      let(:text) { nil }\n\n      it "returns failure with data" do\n        expect(result).to be_failure.with_data(text: "Text is `nil`")\n      end\n    end\n\n    context "when text is NOT nil" do\n      let(:text) { "ls -a" }\n\n      it "prints text" do\n        result\n\n        expect(out_content).to match(/\\$ #{text}/)\n      end\n\n      it "returns success without data" do\n        expect(result).to be_success.without_data\n      end\n    end\n  end\nend\n')),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"\u2757 This page is still a work in progress. More info is yet to come \u2757")))}p.isMDXComponent=!0}}]);