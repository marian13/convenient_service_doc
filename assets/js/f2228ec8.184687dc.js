"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[3963],{4435:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>c,toc:()=>a});var r=n(4848),i=n(8453);const t={slug:"/basics/service_goals",sidebar_position:5,title:"Service goals"},o=void 0,c={id:"basics/service_goals",title:"Service goals",description:"To get an idea of the results even better, let's introduce an auxiliary term - service goal.",source:"@site/docs/basics/service_goals.mdx",sourceDirName:"basics",slug:"/basics/service_goals",permalink:"/basics/service_goals",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/basics/service_goals.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{slug:"/basics/service_goals",sidebar_position:5,title:"Service goals"},sidebar:"docs",previous:{title:"Results",permalink:"/basics/results"},next:{title:"Errors",permalink:"/basics/errors"}},l={},a=[{value:"What is the service goal?",id:"what-is-the-service-goal",level:2},{value:"Service problem resolutions",id:"service-problem-resolutions",level:2}];function d(e){const s={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["To get an idea of the results even better, let's introduce an auxiliary term - ",(0,r.jsx)(s.em,{children:"service goal"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"what-is-the-service-goal",children:"What is the service goal?"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.em,{children:"service goal"})," is the desired effect of an action/operation."]}),"\n",(0,r.jsx)(s.p,{children:"What does it mean in practise?"}),"\n",(0,r.jsx)(s.p,{children:"Imagine the service below:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"class FindUser\n  # ...\n\n  def initialize(user_id:)\n    @user_id = user_id\n  end\n\n  def result\n    # ...\n  end\nend\n"})}),"\n",(0,r.jsx)(s.p,{children:"Its desired effect is the found user record."}),"\n",(0,r.jsx)(s.p,{children:"Simple and straightforward."}),"\n",(0,r.jsx)(s.p,{children:"So, if you are a developer who wants to utilize this service, the only reason why you would decide to do it is to get the user record."}),"\n",(0,r.jsx)(s.p,{children:"Thus the following conclusion can be made."}),"\n",(0,r.jsx)(s.p,{children:"We always invoke a service to achieve some concrete goal defined by the service author."}),"\n",(0,r.jsx)(s.p,{children:"In other words, we call a service to resolve some specific problem stated by the service name."}),"\n",(0,r.jsx)(s.h2,{id:"service-problem-resolutions",children:"Service problem resolutions"}),"\n",(0,r.jsxs)(s.p,{children:["Let's come back to the ",(0,r.jsx)(s.code,{children:"FindUser"})," service and add some basic implementation for it."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:'class FindUser\n  include ::ConvenientService::Standard::Config\n\n  def initialize(user_id:)\n    @user_id = user_id\n  end\n\n  def result\n    return error("User id in NOT an integer") unless user_id.instance_of?(::Integer)\n\n    user = ::User.find_by(id: user_id)\n\n    return failure("NO user with id `#{user_id}`") unless user\n\n    success(user: user)\n  end\nend\n'})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"result = FindUser.result(user_id: user_id)\n# => `success`, `failure` or `error`.\n"})}),"\n",(0,r.jsx)(s.p,{children:"As you can see, it may return one of the three possible result types that represent different resolutions."}),"\n",(0,r.jsx)(s.p,{children:"Each of them has a specific meaning."}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"success"})," result communicates to its caller the positive service problem resolution, since the found user record is returned as expected."]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"failure"})," result provides the negative resolution, because the user record does not exist in database."]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"error"})," result gives no resolution at all, since the service no even tried to complete the user lookup."]})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>c});var r=n(6540);const i={},t=r.createContext(i);function o(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);