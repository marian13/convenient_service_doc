"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[5562],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(7294);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,s=function(e,r){if(null==e)return{};var t,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=s,b=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return t?n.createElement(b,o(o({ref:r},p),{},{components:t})):n.createElement(b,o({ref:r},p))}));function m(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=d;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<a;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3710:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=t(7462),s=(t(7294),t(3905));const a={slug:"/api/tests/rspec/matchers/results/be_error",sidebar_position:2,title:"be_error"},o=void 0,i={unversionedId:"api/tests/rspec/matchers/results/be_error",id:"api/tests/rspec/matchers/results/be_error",title:"be_error",description:"Base Matcher:",source:"@site/docs/api/tests/rspec/matchers/results/be_error.mdx",sourceDirName:"api/tests/rspec/matchers/results",slug:"/api/tests/rspec/matchers/results/be_error",permalink:"/convenient_service_docs/api/tests/rspec/matchers/results/be_error",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/api/tests/rspec/matchers/results/be_error.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/api/tests/rspec/matchers/results/be_error",sidebar_position:2,title:"be_error"},sidebar:"docs",previous:{title:"be_success",permalink:"/convenient_service_docs/api/tests/rspec/matchers/results/be_success"},next:{title:"Troubleshooting",permalink:"/convenient_service_docs/category/troubleshooting"}},c={},l=[],p={toc:l};function u(e){let{components:r,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Base Matcher:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"be_error\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Chainings:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},"with_message(message)\nand_message(message)\nwith_code(code)\nand_code(code)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'# frozen_string_literal: true\n\nclass ValidateUncastedParams\n  include ConvenientService::Standard::Config\n\n  attr_reader :params\n\n  step :validate_id\n\n  def initialize(params:)\n    @params = params[:id]\n  end\n\n  private\n\n  def validate_id\n    return error("ID `#{params[:id]}` is not a valid integer") unless Integer(params[:id], exception: false)\n\n    success\n  end\nend\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ruby"},'# frozen_string_literal: true\n\nRSpec.describe ValidateUncastedParams do\n  example_group "class methods" do\n    describe ".result" do\n      include ConvenientService::RSpec::Matchers::Results\n\n      subject(:result) { described_class.result(params: params) }\n\n      context "when `id` is NOT valid" do\n        let(:params) { {id: "42abc"} }\n\n        it "returns error with message" do\n          expect(result).to be_error.with_message("ID `#{params[:id]}` is not a valid integer")\n        end\n      end\n\n      context "when `id` is valid" do\n        let(:params) { {id: "42"} }\n\n        it "returns success without data" do\n          expect(result).to be_success.without_data\n        end\n      end\n    end\n  end\nend\n')),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"\u2757 This page is still a work in progress. More info is yet to come \u2757")))}u.isMDXComponent=!0}}]);