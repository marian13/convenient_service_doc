"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[6926],{2373:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=n(4848),c=n(8453);const i={slug:"/guides/debugging/how_to_access_result_original_service",sidebar_position:5,title:"How to access result original service?"},t=void 0,l={id:"guides/debugging/how_to_access_result_original_service",title:"How to access result original service?",description:"The Result#service method returns the service instance that created its result.",source:"@site/docs/guides/debugging/how_to_access_result_original_service.mdx",sourceDirName:"guides/debugging",slug:"/guides/debugging/how_to_access_result_original_service",permalink:"/guides/debugging/how_to_access_result_original_service",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/debugging/how_to_access_result_original_service.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{slug:"/guides/debugging/how_to_access_result_original_service",sidebar_position:5,title:"How to access result original service?"},sidebar:"docs",previous:{title:"How to access result attributes without checking its status?",permalink:"/guides/debugging/how_to_access_result_attributes_without_checking_its_status"},next:{title:"How to check whether the result comes from an unhandled exception?",permalink:"/guides/debugging/how_to_check_whether_result_comes_from_unhandled_exception"}},o={},d=[];function a(e){const s={code:"code",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"Result#service"})," method returns the service instance that created its result."]}),"\n",(0,r.jsx)(s.p,{children:"For example:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"result = Service.result\n# => <Service::Result status: :success>\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"result.service\n# => <Service>\n"})}),"\n",(0,r.jsxs)(s.p,{children:["When the result is bubbled up from a deeply nested step, the ",(0,r.jsx)(s.code,{children:"Result#service"})," method returns a top-level organizer instance."]}),"\n",(0,r.jsx)(s.p,{children:"Let's see it in practice:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"class TwoLevelsNestedService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"class OneLevelNestedService\n  include ConvenientService::Standard::Config\n\n  step TwoLevelsNestedService\nend\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step OneLevelNestedService\nend\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"result = Service.result\n# => <Service::Result status: :success>\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"result.service\n# => <Service>\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Here, the ",(0,r.jsx)(s.code,{children:"TwoLevelsNestedService"})," creates a ",(0,r.jsx)(s.code,{children:"success"})," result."]}),"\n",(0,r.jsxs)(s.p,{children:["Later this result is processed by steps from the ",(0,r.jsx)(s.code,{children:"OneLevelNestedService"})," and ",(0,r.jsx)(s.code,{children:"Service"})," services."]}),"\n",(0,r.jsxs)(s.p,{children:["That is why it becomes the ",(0,r.jsx)(s.code,{children:"Service"})," overall result."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"result.service\n# => <Service>\n"})}),"\n",(0,r.jsx)(s.p,{children:"Sometimes it may be useful to access the original service instance, e.g. for debugging purposes."}),"\n",(0,r.jsxs)(s.p,{children:["For that reason the ",(0,r.jsx)(s.code,{children:"Result#original_service"})," method is available."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"result.original_service\n# => <TwoLevelsNestedService>\n"})})]})}function u(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>l});var r=n(6540);const c={},i=r.createContext(c);function t(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);