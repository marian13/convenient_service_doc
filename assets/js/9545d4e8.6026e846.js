"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[4500],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,b=d["".concat(i,".").concat(m)]||d[m]||c[m]||s;return n?a.createElement(b,l(l({ref:t},u),{},{components:n})):a.createElement(b,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1225:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={slug:"/basics/step_to_result_translation_table",sidebar_position:8,title:"Translation table"},l=void 0,o={unversionedId:"basics/step_to_result_translation_table",id:"basics/step_to_result_translation_table",title:"Translation table",description:"No in methods",source:"@site/docs/basics/step_to_result_translation_table.mdx",sourceDirName:"basics",slug:"/basics/step_to_result_translation_table",permalink:"/convenient_service_docs/basics/step_to_result_translation_table",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/basics/step_to_result_translation_table.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{slug:"/basics/step_to_result_translation_table",sidebar_position:8,title:"Translation table"},sidebar:"docs",previous:{title:"Steps",permalink:"/convenient_service_docs/basics/steps"},next:{title:"*Configs",permalink:"/convenient_service_docs/basics/configs"}},i={},p=[{value:"No <code>in</code> methods",id:"no-in-methods",level:3},{value:"One usual <code>in</code> method",id:"one-usual-in-method",level:3},{value:"Multiple usual <code>in</code> methods",id:"multiple-usual-in-methods",level:3},{value:"One alias <code>in</code> method",id:"one-alias-in-method",level:3},{value:"Multiple alias <code>in</code> method",id:"multiple-alias-in-method",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"no-in-methods"},"No ",(0,r.kt)("inlineCode",{parentName:"h3"},"in")," methods"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Definition:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"step AssertNodeAvailable\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Translation:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def step_result\n  @step_result ||= AssertNodeAvailable.result\nend\n")),(0,r.kt)("h3",{id:"one-usual-in-method"},"One usual ",(0,r.kt)("inlineCode",{parentName:"h3"},"in")," method"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Definitions (equivalent):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"step ValidateUncastedParams,\n  in: :params\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"step ValidateUncastedParams,\n  in: [\n    :params\n  ]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Translation:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def step_result\n  @step_result ||=\n    ValidateUncastedParams.result(\n      params: params\n    )\nend\n")),(0,r.kt)("h3",{id:"multiple-usual-in-methods"},"Multiple usual ",(0,r.kt)("inlineCode",{parentName:"h3"},"in")," methods"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Definition:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"step LogRequestParams, \\\n  in: [\n    :request,\n    :params\n  ]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Translation:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def step_result\n  @step_result ||=\n    LogRequestParams.result(\n      request: request,\n      params: params\n    )\nend\n")),(0,r.kt)("h3",{id:"one-alias-in-method"},"One alias ",(0,r.kt)("inlineCode",{parentName:"h3"},"in")," method"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Definitions (equivalent):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"step ValidateCastedParams,\n  in: {casted_params: :params}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"step ValidateCastedParams,\n  in: [\n    {casted_params: :params}\n  ]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Translation:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def step_result\n  @step_result ||=\n    ValidateCastedParams.result(\n      casted_params: params\n    )\nend\n")),(0,r.kt)("h3",{id:"multiple-alias-in-method"},"Multiple alias ",(0,r.kt)("inlineCode",{parentName:"h3"},"in")," method"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Definitions:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"step AuditContent,\n  in: [\n    {content: :content_without_comments},\n    {verbose: :debug}\n  ]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Translation:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def step_result\n  @step_result ||=\n    AuditContent.result(\n      content: content_without_comments,\n      verbose: debug\n    )\nend\n")))}c.isMDXComponent=!0}}]);