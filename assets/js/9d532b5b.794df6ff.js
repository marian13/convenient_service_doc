"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[7530],{3905:(e,n,r)=>{r.d(n,{Zo:()=>s,kt:()=>u});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),d=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=d(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=d(r),u=a,y=m["".concat(c,".").concat(u)]||m[u]||p[u]||o;return r?t.createElement(y,i(i({ref:n},s),{},{components:r})):t.createElement(y,i({ref:n},s))}));function u(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=r[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8347:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var t=r(7462),a=(r(7294),r(3905));const o={slug:"/glossary/advanced/decorator_middleware",sidebar_position:2,title:"Decorator Middleware"},i=void 0,l={unversionedId:"glossary/advanced/decorator_middleware",id:"glossary/advanced/decorator_middleware",title:"Decorator Middleware",description:"A decorator middleware is a kind of middleware that always calls the next middleware in a chain.",source:"@site/docs/glossary/advanced/decorator_middleware.mdx",sourceDirName:"glossary/advanced",slug:"/glossary/advanced/decorator_middleware",permalink:"/convenient_service_docs/glossary/advanced/decorator_middleware",draft:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/glossary/advanced/decorator_middleware.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/glossary/advanced/decorator_middleware",sidebar_position:2,title:"Decorator Middleware"},sidebar:"docs",previous:{title:"Advanced",permalink:"/convenient_service_docs/category/advanced-1"},next:{title:"Proxy Middleware",permalink:"/convenient_service_docs/glossary/advanced/proxy_middleware"}},c={},d=[],s={toc:d};function p(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A decorator middleware is a kind of middleware that always calls the next middleware in a chain."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"HasCallbacks")," is a good example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"module ConvenientService\n  module Common\n    module Plugins\n      module HasCallbacks\n        class Middleware < Core::MethodChainMiddleware\n          # ...\n          # highlight-start\n          def next(...)\n            entity.callbacks.for([:before, method]).each { |callback| callback.call_in_context(entity) }\n\n            original_value = chain.next(...)\n\n            entity.callbacks.for([:after, method]).reverse_each { |callback| callback.call_in_context(entity, original_value) }\n\n            original_value\n          end\n          # highlight-end\n          # ...\n        end\n      end\n    end\n  end\nend\n")),(0,a.kt)("p",null,"It triggers before callbacks, then ",(0,a.kt)("inlineCode",{parentName:"p"},"chain.next(...)"),", and later after callbacks."),(0,a.kt)("p",null,"There are no conditionals that may skip ",(0,a.kt)("inlineCode",{parentName:"p"},"chain.next(...)")," invocation."),(0,a.kt)("p",null,"That is why this middleware is considered ",(0,a.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/decorator"},"decorator")," middleware."),(0,a.kt)("p",null,"In contrast, ",(0,a.kt)("a",{parentName:"p",href:"/glossary/advanced/proxy_middleware"},"proxy middlewares")," may not call ",(0,a.kt)("inlineCode",{parentName:"p"},"chain.next")," if needed."))}p.isMDXComponent=!0}}]);