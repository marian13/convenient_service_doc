"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[6530],{6903:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>d});var s=t(4848),r=t(8453);const c={slug:"/api/tests/rspec/matchers/delegate_to",sidebar_position:1,title:"delegate_to"},i=void 0,a={id:"api/tests/rspec/matchers/delegate_to",title:"delegate_to",description:"What is delegate_to?",source:"@site/docs/api/tests/rspec/matchers/delegate_to.mdx",sourceDirName:"api/tests/rspec/matchers",slug:"/api/tests/rspec/matchers/delegate_to",permalink:"/api/tests/rspec/matchers/delegate_to",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/api/tests/rspec/matchers/delegate_to.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/api/tests/rspec/matchers/delegate_to",sidebar_position:1,title:"delegate_to"},sidebar:"docs",previous:{title:"Matchers",permalink:"/category/matchers"},next:{title:"Best Practices",permalink:"/category/best-practices"}},o={},d=[{value:"What is <code>delegate_to</code>?",id:"what-is-delegate_to",level:2},{value:"<code>delegate_to</code> is context-independent",id:"delegate_to-is-context-independent",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"what-is-delegate_to",children:["What is ",(0,s.jsx)(n.code,{children:"delegate_to"}),"?"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"delegate_to"})," is a ",(0,s.jsx)(n.a,{href:"https://relishapp.com/rspec/rspec-expectations/docs/custom-matchers/define-a-custom-matcher",children:"custom RSpec matcher"})," that provides a neat way to check whether a ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Delegation_(computing)",children:"delegation"})," was performed as expected."]}),"\n",(0,s.jsx)(n.p,{children:"For example, consider the following code snippet:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"class FirstService\n  attr_reader :params\n\n  def initialize(params:)\n    @params = params\n  end\n\n  def result\n    # ...\n    SecondService.result(params: params)\n  end\nend\n"})}),"\n",(0,s.jsx)(n.p,{children:'As you can see, the first service asks the second one to do some "interesting" stuff and returns its value.'}),"\n",(0,s.jsxs)(n.p,{children:["This behavior can be easily tested in ",(0,s.jsx)(n.a,{href:"https://rspec.info/",children:"RSpec"})," like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'RSpec.describe FirstService do\n  describe ".result" do\n    let(:params) { {foo: :bar} }\n\n    it "delegates to `SecondService.result`" do\n      # Creates a spy.\n      allow(SecondService).to receive(:result).and_call_orginal\n\n      FirstService.result(params: params)\n\n      # Confirms delegation.\n      expect(SecondService).to have_received(:result)\n    end\n\n    it "returns `SecondService.result`" do\n      # Confirms return value equality.\n      expect(FirstService.result(params: params)).to eq(SecondService.result(params: params))\n    end\n  end\nend\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Since it is so common to write specs as above when working with services, the ",(0,s.jsx)(n.code,{children:"delegate_to"})," matcher is provided to hide the repeatable noise."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'RSpec.describe FirstService do\n  describe ".result" do\n    # highlight-start\n    include ConvenientService::RSpec::Matchers::DelegateTo\n    # highlight-end\n\n    let(:params) { {foo: :bar} }\n\n    # highlight-start\n    it "delegates to `SecondService.result`" do\n      expect { FirstService.result(params: params) }.to delegate_to(SecondService, :result)\n    end\n    # highlight-end\n\n    it "returns `SecondService.result`" do\n      # Confirms return value equality.\n      expect(FirstService.result(params: params)).to eq(SecondService.result(params: params))\n    end\n  end\nend\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"delegate_to"})," has a self-explanatory ",(0,s.jsx)(n.code,{children:"and_return_its_value"})," ",(0,s.jsx)(n.a,{href:"https://relishapp.com/rspec/rspec-expectations/docs/compound-expectations",children:"chaining"}),", so we can ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Code_refactoring",children:"refactor out"})," the second spec as well."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'RSpec.describe FirstService do\n  describe ".result" do\n    include ConvenientService::RSpec::Matchers::DelegateTo\n\n    let(:kwargs) { {foo: :bar} }\n\n    # highlight-start\n    it "delegates to and returns `SecondService.result`" do\n      expect { FirstService.result(params: params) }\n        .to delegate_to(SecondService, :result)\n        .and_return_its_value\n    end\n    # highlight-end\n  end\nend\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"and_return_its_value"})," uses ",(0,s.jsxs)(n.a,{href:"https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/equality-matchers",children:["RSpec ",(0,s.jsx)(n.code,{children:"eq"})]})," to compare values, therefore ensure your return values define meaningful ",(0,s.jsxs)(n.a,{href:"https://stackoverflow.com/a/7157051/12201472",children:[(0,s.jsx)(n.code,{children:"=="})," operator"]}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["Also ",(0,s.jsx)(n.code,{children:"delegate_to"})," supports ",(0,s.jsx)(n.code,{children:"with_arguments"})," chaining to make sure that delegation happened with certain arguments."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'RSpec.describe FirstService do\n  describe ".result" do\n    include ConvenientService::RSpec::Matchers::DelegateTo\n\n    let(:params) { {foo: :bar} }\n\n    it "delegates to and returns `SecondService.result`" do\n      expect { FirstService.result(params: params) }\n        .to delegate_to(SecondService, :result)\n        # highlight-start\n        .with_arguments(params: params)\n        # highlight-end\n        .and_return_its_value\n    end\n  end\nend\n'})}),"\n",(0,s.jsx)(n.p,{children:"This spec can be simplified even further."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'RSpec.describe FirstService do\n  describe ".result" do\n    include ConvenientService::RSpec::Matchers::DelegateTo\n\n    let(:params) { {foo: :bar} }\n\n    # highlight-start\n    specify do\n      # highlight-end\n      expect { FirstService.result(params: params) }\n        .to delegate_to(SecondService, :result)\n        .with_arguments(params: params)\n        .and_return_its_value\n    end\n  end\nend\n'})}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.a,{href:"https://rspec.info/documentation/3.12/rspec-core/RSpec/Core/ExampleGroup.html#specify-class_method",children:"specify"})," is utilized, ",(0,s.jsx)(n.a,{href:"https://relishapp.com/rspec/rspec-expectations/v/3-12/docs/implicit-docstrings",children:"RSpec infers spec description"})," from ",(0,s.jsx)(n.code,{children:"delegate_to"})," arguments and chainings."]}),"\n",(0,s.jsxs)(n.h2,{id:"delegate_to-is-context-independent",children:[(0,s.jsx)(n.code,{children:"delegate_to"})," is context-independent"]}),"\n",(0,s.jsxs)(n.p,{children:["In other words, ",(0,s.jsx)(n.code,{children:"delegate_to"})," is applicable for any classes, not only for services, e.g:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"class Notifier\n  # ...\n  def broadcast_event(*args, **kwargs, &block)\n    Event.create(*args, **kwargs, &block)\n  end\nend\n"})}),"\n",(0,s.jsx)(n.p,{children:"With specs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'RSpec.describe Notifier do\n  describe "#broadcast_event" do\n    include ConvenientService::RSpec::Matchers::DelegateTo\n\n    let(:notifier) { create(:notifier) }\n\n    let(:args) { :foo }\n    let(:kwargs) { {foo: :bar} }\n    let(:block) { proc { :foo } }\n\n    specify do\n      expect { notifier.broadcast_event(*args, **kwargs, &block) }\n        .to delegate_to(Event, :create)\n        .with_arguments(*args, **kwargs, &block)\n        .and_return_its_value\n    end\n  end\nend\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Please, note that ",(0,s.jsx)(n.code,{children:"delegate_to"})," is able to verify block argument (",(0,s.jsx)(n.code,{children:"&block"}),") ",(0,s.jsxs)(n.a,{href:"https://relishapp.com/rspec/rspec-mocks/v/3-12/docs/setting-constraints/matching-arguments",children:["that is not possible with raw ",(0,s.jsx)(n.code,{children:"allow"})," ",(0,s.jsx)(n.code,{children:"to"})," ",(0,s.jsx)(n.code,{children:"receive"})]}),"."]}),"\n",(0,s.jsxs)(n.admonition,{type:"danger",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://ruby-doc.org/core-3.1.0/Proc.html",children:"Blocks (procs, lambdas"}),") are compared by ",(0,s.jsxs)(n.a,{href:"https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/equality-matchers",children:["RSpec ",(0,s.jsx)(n.code,{children:"eq"})]})," under the hood."]}),(0,s.jsx)(n.p,{children:"Please, remember their semantics in order to not be overly surprised."}),(0,s.jsxs)(n.p,{children:["The two ",(0,s.jsx)(n.a,{href:"https://ruby-doc.org/core-3.1.0/Proc.html",children:"Proc"})," instances may look the same from the ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Syntax",children:"syntax"})," point of view."]}),(0,s.jsxs)(n.p,{children:["But they are different from the Proc ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Semantics",children:"semantics"})," point of view."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"first = proc { :foo }\nsecond = proc { :foo }\n\nfirst == second # => false\nfirst == first # => true\nsecond == second # => true\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},c=s.createContext(r);function i(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);