"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[1844],{8419:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var t=n(4848),r=n(8453);const i={slug:"/guides/usage/how_to_use_steps",sidebar_position:3,title:"How to use service steps?"},a=void 0,c={id:"guides/usage/how_to_use_steps",title:"How to use service steps?",description:"Which types of steps are available?",source:"@site/docs/guides/usage/how_to_use_steps.mdx",sourceDirName:"guides/usage",slug:"/guides/usage/how_to_use_steps",permalink:"/guides/usage/how_to_use_steps",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/guides/usage/how_to_use_steps.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/guides/usage/how_to_use_steps",sidebar_position:3,title:"How to use service steps?"},sidebar:"docs",previous:{title:"How to use service results?",permalink:"/guides/usage/how_to_use_results"},next:{title:"How to pass a value to step from class/instance scope?",permalink:"/guides/usage/how_to_pass_value_to_step_class_or_instance_scope"}},l={},d=[{value:"Which types of steps are available?",id:"which-types-of-steps-are-available",level:2},{value:"How to define a service step?",id:"how-to-define-a-service-step",level:2},{value:"How to define a method step?",id:"how-to-define-a-method-step",level:2},{value:"What is the result of a service with steps?",id:"what-is-the-result-of-a-service-with-steps",level:2},{value:"What is an organizer?",id:"what-is-an-organizer",level:2},{value:"How to pass arguments to steps?",id:"how-to-pass-arguments-to-steps",level:2},{value:"How to access step result data?",id:"how-to-access-step-result-data",level:2},{value:"How to create a step input alias?",id:"how-to-create-a-step-input-alias",level:2}];function o(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"which-types-of-steps-are-available",children:"Which types of steps are available?"}),"\n",(0,t.jsx)(s.p,{children:"The two criteria currently categorize steps."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"By action: service and method steps."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["By control flow: ",(0,t.jsx)(s.code,{children:"and"}),", ",(0,t.jsx)(s.code,{children:"or"}),", ",(0,t.jsx)(s.code,{children:"not"})," steps."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"how-to-define-a-service-step",children:"How to define a service step?"}),"\n",(0,t.jsxs)(s.p,{children:["You can register existing services as steps of other services using the ",(0,t.jsx)(s.code,{children:"step"})," directive."]}),"\n",(0,t.jsx)(s.p,{children:"Let's have a look at it in practice."}),"\n",(0,t.jsxs)(s.p,{children:["Having the ",(0,t.jsx)(s.code,{children:"Service"})," service."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n"})}),"\n",(0,t.jsxs)(s.p,{children:["We can use it as a step of the ",(0,t.jsx)(s.code,{children:"OtherService"})," service in the following way."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class OtherService\n  include ConvenientService::Standard::Config\n\n  step Service\nend\n"})}),"\n",(0,t.jsx)(s.p,{children:"This code works almost the same as:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class OtherService\n  include ConvenientService::Standard::Config\n\n  def result\n    Service.result\n  end\nend\n"})}),"\n",(0,t.jsx)(s.p,{children:"That is why for a single-step service the usage of steps may not seem very beneficial."}),"\n",(0,t.jsx)(s.p,{children:"So consider a more complex example."}),"\n",(0,t.jsx)(s.p,{children:"Now we have 3 services."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class FooService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class BarService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class BazService\n  include ConvenientService::Standard::Config\n\n  def result\n    success\n  end\nend\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"HostService"})," uses them as steps."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class HostService\n  include ConvenientService::Standard::Config\n\n  step FooService\n  step BarService\n  step BazService\nend\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Rough ",(0,t.jsx)(s.code,{children:"HostService"})," equivalent without steps may be implemented as follows:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class HostService\n  include ConvenientService::Standard::Config\n\n  def result\n    foo_result = FooService.result\n\n    return foo_result unless foo_result.success?\n\n    bar_result = BarService.result\n\n    return bar_result unless bar_result.success?\n\n    BazService.result\n  end\nend\n"})}),"\n",(0,t.jsx)(s.p,{children:"As you can see, steps allow us to eliminate at least 2 assignments and 2 if-conditionals for this particular example."}),"\n",(0,t.jsx)(s.p,{children:"Sure, those assignments and if-conditionals are still performed under the hood, but it is no longer a developer's responsibility to manage them."}),"\n",(0,t.jsx)(s.p,{children:"Now the benefit of steps becomes more obvious, but that is not the only benefit."}),"\n",(0,t.jsx)(s.p,{children:"Other guides are going to demonstrate the additional simplifications."}),"\n",(0,t.jsx)(s.h2,{id:"how-to-define-a-method-step",children:"How to define a method step?"}),"\n",(0,t.jsx)(s.p,{children:"Any method can be a step."}),"\n",(0,t.jsx)(s.p,{children:"The only requirement is that it must return a result."}),"\n",(0,t.jsx)(s.p,{children:"For example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step :foo\n\n  def foo\n    success\n  end\nend\n"})}),"\n",(0,t.jsx)(s.h2,{id:"what-is-the-result-of-a-service-with-steps",children:"What is the result of a service with steps?"}),"\n",(0,t.jsx)(s.p,{children:"Consider the following service."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step :foo\n  step :bar\n  step :baz\n\n  def foo\n    success\n  end\n\n  def bar\n    success\n  end\n\n  def baz\n    success\n  end\nend\n"})}),"\n",(0,t.jsx)(s.p,{children:"When all steps are successful, the overall service result is the last step result."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"result = Service.result\n# => <Service::Result status: :success>\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"result.step\n# => <Service::Step method: :baz>\n"})}),"\n",(0,t.jsx)(s.p,{children:"Let's check some other service."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'class OtherService\n  include ConvenientService::Standard::Config\n\n  step :foo\n  step :bar\n  step :baz\n\n  def foo\n    success\n  end\n\n  def bar\n    failure("Message from `bar`")\n    # `error("Message from `bar`")` also stops the sequence.\n  end\n\n  def baz\n    raise "Not raised exception"\n\n    success\n  end\nend\n'})}),"\n",(0,t.jsx)(s.p,{children:"When any step is NOT successful, the overall service result is that NOT successful step result."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"result = OtherService.result\n# => <OtherService::Result status: :failure>\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"result.step\n# => <OtherService::Step method: :bar>\n"})}),"\n",(0,t.jsx)(s.p,{children:"It is important to note that the remaining steps are NOT even evaluated."}),"\n",(0,t.jsxs)(s.p,{children:["That is why the exception from ",(0,t.jsx)(s.code,{children:"baz"})," was not raised."]}),"\n",(0,t.jsx)(s.h2,{id:"what-is-an-organizer",children:"What is an organizer?"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Organizer"})," is a service with steps."]}),"\n",(0,t.jsxs)(s.p,{children:["It is also worth mentioning that services without steps are often referred to as ",(0,t.jsx)(s.em,{children:"regular services"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"how-to-pass-arguments-to-steps",children:"How to pass arguments to steps?"}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.code,{children:"in"})," option of the ",(0,t.jsx)(s.code,{children:"step"})," directive."]}),"\n",(0,t.jsx)(s.p,{children:"Here is a quick example."}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"NestedService"})," accepts two keyword arguments - ",(0,t.jsx)(s.code,{children:":first_kwarg"}),", and ",(0,t.jsx)(s.code,{children:":second_kwarg"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'class NestedService\n  include ConvenientService::Standard::Config\n\n  attr_reader :first_kwarg, :second_kwarg\n\n  def initialize(:first_kwarg, :second_kwarg)\n    @first_kwarg = first_kwarg\n    @second_kwarg = second_kwarg\n  end\n\n  def result\n    puts "first_kwarg: `#{first_kwarg}`"\n    puts "second_kwarg: `#{second_kwarg}`"\n\n    success\n  end\nend\n'})}),"\n",(0,t.jsxs)(s.p,{children:["This is how the ",(0,t.jsx)(s.code,{children:"in"})," option is utilized in order to pass them as step inputs."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class Service\n  include ConvenientService::Standard::Config\n\n  step NestedService, in: [:first_kwarg, :second_kwarg]\n\n  def first_kwarg\n    :foo\n  end\n\n  def second_kwarg\n    :bar\n  end\nend\n"})}),"\n",(0,t.jsxs)(s.p,{children:["As you can see below, the corresponding methods' return values are passed as ",(0,t.jsx)(s.code,{children:":first_kwarg"})," and ",(0,t.jsx)(s.code,{children:":second_kwarg"})," to the ",(0,t.jsx)(s.code,{children:"NestedService"})," step when we call the organizer."]}),"\n",(0,t.jsxs)(s.p,{children:["For this particular case, it is ",(0,t.jsx)(s.code,{children:":foo"})," and ",(0,t.jsx)(s.code,{children:":bar"})," respectively."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'result = Service.result\n# "first_kwarg: `:foo`"\n# "second_kwarg: `:bar`"\n# => <Service::Result status: :success>\n'})}),"\n",(0,t.jsx)(s.p,{children:"In order to simplify the understanding of the step inputs, let's have a closer look at this specific line."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"step NestedService, in: [:first_kwarg, :second_kwarg]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Whenever you have trouble with its meaning, please, remember that it can be always ",(0,t.jsx)(s.a,{href:"/basics/step_to_result_translation_table",children:"mentally translated"})," like so:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"def first_step_result\n  @first_step_result ||= NestedService.result(\n    first_kwarg: first_kwarg,\n    second_kwarg: second_kwarg\n  )\nend\n"})}),"\n",(0,t.jsx)(s.p,{children:"That is why it is important to have corresponding instance methods defined for step inputs in the organizer class."}),"\n",(0,t.jsxs)(s.p,{children:["More examples of the ",(0,t.jsx)(s.code,{children:"in"})," option usage may be found in ",(0,t.jsx)(s.a,{href:"/basics/step_to_result_translation_table",children:"the so-called translation table"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"how-to-access-step-result-data",children:"How to access step result data?"}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.code,{children:"out"})," option of the ",(0,t.jsx)(s.code,{children:"step"})," directive."]}),"\n",(0,t.jsx)(s.p,{children:"Here is a short example."}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"NestedService"})," returns a ",(0,t.jsx)(s.code,{children:"success"})," with data that has two keys - ",(0,t.jsx)(s.code,{children:":first_data_key"}),", and ",(0,t.jsx)(s.code,{children:":second_data_key"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class NestedService\n  include ConvenientService::Standard::Config\n\n  def result\n    success(first_data_key: :baz, second_data_key: :qux)\n  end\nend\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This is how the ",(0,t.jsx)(s.code,{children:"out"})," option is utilized in order to access them as step outputs."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'class Service\n  include ConvenientService::Standard::Config\n\n  step NestedService, out: [:first_data_key, :second_data_key]\n\n  step :result\n\n  def result\n    puts "first_data_key: `#{first_data_key}`"\n    puts "second_data_key: `#{second_data_key}`"\n\n    success\n  end\nend\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Step result data values become available via the ",(0,t.jsx)(s.code,{children:"first_data_key"})," and ",(0,t.jsx)(s.code,{children:"second_data_key"})," instance methods."]}),"\n",(0,t.jsxs)(s.p,{children:["For this particular case, they return ",(0,t.jsx)(s.code,{children:":baz"})," and ",(0,t.jsx)(s.code,{children:":qux"}),", the same values that were passed to the original ",(0,t.jsx)(s.code,{children:"success"})," in the ",(0,t.jsx)(s.code,{children:"NestedService"})," service."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'result = Service.result\n# "first_data_key: `:baz`"\n# "second_data_key: `:qux`"\n# => <Service::Result status: :success>\n'})}),"\n",(0,t.jsx)(s.p,{children:"In order to simplify the understanding of the step outputs, let's have a closer look at this specific line."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"step NestedService, out: [:first_data_key, :second_data_key]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Whenever you have trouble with its meaning, please, remember that it can be always ",(0,t.jsx)(s.a,{href:"/basics/step_to_result_translation_table",children:"mentally translated"})," like so:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"def first_step_result\n  @first_step_result ||= NestedService.result\nend\n\ndef first_data_key\n  first_step_result.data[:first_data_key]\nend\n\ndef second_data_key\n  first_step_result.data[:second_data_key]\nend\n"})}),"\n",(0,t.jsx)(s.p,{children:"Having this information, avoid defining instance methods with the same names as step outputs in the organizer class."}),"\n",(0,t.jsx)(s.p,{children:"Otherwise, your methods will be silently overridden."}),"\n",(0,t.jsxs)(s.p,{children:["More examples of the ",(0,t.jsx)(s.code,{children:"out"})," option usage may be found in ",(0,t.jsx)(s.a,{href:"/basics/step_to_result_translation_table",children:"the so-called translation table"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"how-to-create-a-step-input-alias",children:"How to create a step input alias?"}),"\n",(0,t.jsx)(s.p,{children:"There are cases when the organizer service does not have the corresponding method defined with the same name as a step input."}),"\n",(0,t.jsx)(s.p,{children:"Or that method is already reserved for some other purpose and can not be reused."}),"\n",(0,t.jsxs)(s.p,{children:["Consider the example, when the ",(0,t.jsx)(s.code,{children:"RemoveNilElements"})," service expects the ",(0,t.jsx)(s.code,{children:"elements"})," keyword argument as its input."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class RemoveNilElements\n  include ConvenientService::Standard::Config\n\n  attr_reader :elements\n\n  def initialize(elements:)\n    @elements = elements\n  end\n\n  def result\n    success(elements: elements.compact)\n  end\nend\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"PrepareCollection"})," service tries to register ",(0,t.jsx)(s.code,{children:"RemoveNilElements"})," as its step."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'class PrepareCollection\n  include ConvenientService::Standard::Config\n\n  step RemoveNilElements, in: [:elements]\n\n  def collection\n    [42, nil, "foo"]\n  end\nend\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Since it does not have the ",(0,t.jsx)(s.code,{children:"elements"})," method defined, the usual ",(0,t.jsx)(s.code,{children:"in: [:elements]"})," declaration won't work."]}),"\n",(0,t.jsxs)(s.p,{children:["But it has the ",(0,t.jsx)(s.code,{children:"collection"})," method instead."]}),"\n",(0,t.jsxs)(s.p,{children:["In order to utilize its return value as the ",(0,t.jsx)(s.code,{children:":elements"})," input, the ",(0,t.jsx)(s.code,{children:"PrepareCollection"})," should be updated as follows."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'class PrepareCollection\n  include ConvenientService::Standard::Config\n\n  # highlight-start\n  step RemoveNilElements, in: [{elements: :collection}]\n  # highlight-end\n\n  def collection\n    [42, nil, "foo"]\n  end\nend\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Now, the ",(0,t.jsx)(s.code,{children:"in"})," option contains a hash ",(0,t.jsx)(s.code,{children:"{elements: :collection}"}),' that can be read as "Pass ',(0,t.jsx)(s.code,{children:"elements"})," as ",(0,t.jsx)(s.code,{children:"collection"}),'".']}),"\n",(0,t.jsx)(s.admonition,{type:"tip",children:(0,t.jsx)(s.p,{children:"As a rule of thumb, try to memorize that the alias is always on the right side of the hash \ud83d\ude0e."})}),"\n",(0,t.jsxs)(s.p,{children:["Traditionally, to simplify the understanding of the steps-related stuff, input aliases at this particular time, let's have a closer look at the ",(0,t.jsx)(s.code,{children:"step"})," directive again."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"step RemoveNilElements, in: [{elements: :collection}]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Whenever you have trouble with its meaning, please, remember that it can be always ",(0,t.jsx)(s.a,{href:"/basics/step_to_result_translation_table",children:"mentally translated"})," like so:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"def first_step_result\n  @first_step_result ||= RemoveNilElements.result(elements: collection)\nend\n"})}),"\n",(0,t.jsx)(s.p,{children:"As you can see, creating an alias is just passing a different method return value to the underlying service."}),"\n",(0,t.jsxs)(s.p,{children:["More examples of the ",(0,t.jsx)(s.code,{children:"in"})," option aliases usage may be found in ",(0,t.jsx)(s.a,{href:"/basics/step_to_result_translation_table",children:"the so-called translation table"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>c});var t=n(6540);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);