"use strict";(self.webpackChunkconvenient_service_docs=self.webpackChunkconvenient_service_docs||[]).push([[3795],{8440:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var r=t(4848),i=t(8453);const s={slug:"/best_practices/fdd/describe_feature_public_interface_using_entries",sidebar_position:1,title:"Describe feature public interface using entries"},c=void 0,a={id:"best_practices/fdd/describe_feature_public_interface_using_entries",title:"Describe feature public interface using entries",description:"This way it becomes easier to get an overview of what a feature can do.",source:"@site/docs/best_practices/fdd/describe_feature_public_interface_using_entries.mdx",sourceDirName:"best_practices/fdd",slug:"/best_practices/fdd/describe_feature_public_interface_using_entries",permalink:"/best_practices/fdd/describe_feature_public_interface_using_entries",draft:!1,unlisted:!1,editUrl:"https://github.com/marian13/convenient_service_docs/blob/main/docs/best_practices/fdd/describe_feature_public_interface_using_entries.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/best_practices/fdd/describe_feature_public_interface_using_entries",sidebar_position:1,title:"Describe feature public interface using entries"},sidebar:"docs",previous:{title:"FDD",permalink:"/category/fdd-1"},next:{title:"Cast feature arguments inside entries",permalink:"/best_practices/fdd/cast_feature_arguments_inside_entries"}},d={},o=[];function u(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This way it becomes easier to get an overview of what a feature can do."}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example of the ",(0,r.jsx)(n.code,{children:"Gemfile"})," feature."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"module Features\n  class Gemfile\n    include ConvenientService::Feature::Standard::Config\n\n    entry :format\n    entry :lint\n    entry :update\n    entry :regenerate\n\n    def format\n      # ...\n    end\n\n    def lint\n      # ...\n    end\n\n    def update\n      # ...\n    end\n\n    def regenerate\n      # ...\n    end\n  end\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Having a quick eye on the list of entries you immediately realize that there are abilities to ",(0,r.jsx)(n.code,{children:"format"}),", ",(0,r.jsx)(n.code,{children:"lint"}),", ",(0,r.jsx)(n.code,{children:"update"}),", and ",(0,r.jsx)(n.code,{children:"regenerate"})," Gemfiles."]}),"\n",(0,r.jsxs)(n.p,{children:["Now, check out the ",(0,r.jsx)(n.code,{children:"RequestParams"})," feature."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"module Features\n  class RequestParams\n    include ConvenientService::Feature::Standard::Config\n\n    entry :extract_from_url_path\n    entry :extract_from_url_query\n    entry :extract_from_body\n\n    def extract_from_url_path\n      # ...\n    end\n\n    def extract_from_url_query\n      # ...\n    end\n\n    def extract_from_body\n      # ...\n    end\n  end\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The same story, once you review the entries' names, you get the idea of what the ",(0,r.jsx)(n.code,{children:"RequestParams"})," feature is about."]}),"\n",(0,r.jsx)(n.p,{children:"It gives the opportunity to extract parameters from the request body and URL path/query."})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);